{"version":3,"file":"user.js","sources":["../../../src/models/user.ts"],"sourcesContent":["import type { UserContext, UserMembers } from '../../interfaces/models/user';\n\n/**\n * @class User\n * @description Provides access to user information including profile data, enrolled factors, and organizations.\n * @implements {UserMembers}\n */\nexport class User implements UserMembers {\n  /** @property {string | null} id - The unique identifier of the user */\n  id: UserMembers['id'];\n\n  /** @property {string | null} username - The username of the user */\n  username: UserMembers['username'];\n\n  /** @property {string | null} email - The email address of the user */\n  email: UserMembers['email'];\n\n  /** @property {string | null} picture - URL to the user's profile picture */\n  picture: UserMembers['picture'];\n\n  /** @property {string | null} phoneNumber - The phone number of the user */\n  phoneNumber: UserMembers['phoneNumber'];\n\n  /** @property {{ [key: string]: string } | null} userMetadata - User-specific metadata that can be modified */\n  userMetadata: UserMembers['userMetadata'];\n\n  /** @property {{ [key: string]: string } | null} appMetadata - Application-specific metadata about the user */\n  appMetadata: UserMembers['appMetadata'];\n\n  /** @property {string[] | null} enrolledFactors - List of MFA factors the user has enrolled in */\n  enrolledFactors: UserMembers['enrolledFactors'];\n\n  /** @property {EnrolledEmail[] | null} enrolledEmails - List of emails the user has enrolled for MFA */\n  enrolledEmails: UserMembers['enrolledEmails'];\n\n  /** @property {EnrolledPhoneNumber[] | null} enrolledPhoneNumbers - List of phone numbers the user has enrolled for MFA */\n  enrolledPhoneNumbers: UserMembers['enrolledPhoneNumbers'];\n\n  /** @property {EnrolledDevice[] | null} enrolledDevices - List of devices the user has enrolled for MFA */\n  enrolledDevices: UserMembers['enrolledDevices'];\n\n  /**\n   * @property {Array<{organizationId: string | undefined, organizationName: string | undefined, displayName: string | undefined, branding: {logoUrl: string | undefined} | undefined}> | null} organizations\n   * - Organizations the user belongs to\n   */\n  organizations: UserMembers['organizations'];\n\n  /**\n   * @constructor\n   * @param {UserContext} user - The user context from Universal Login\n   */\n  constructor(user: UserContext) {\n    this.id = user?.id ?? null;\n    this.username = user?.username ?? null;\n    this.email = user?.email ?? null;\n    this.picture = user?.picture ?? null;\n    this.phoneNumber = user?.phone_number ?? null;\n    this.userMetadata = user?.user_metadata ?? null;\n    this.appMetadata = user?.app_metadata ?? null;\n    this.enrolledFactors = user?.enrolled_factors ?? null;\n    this.enrolledEmails = user?.enrolled_emails ?? null;\n    this.enrolledPhoneNumbers = user?.enrolled_phone_numbers ?? null;\n    this.enrolledDevices = user?.enrolled_devices ?? null;\n    this.organizations = User.getOrganizations(user);\n  }\n\n  /**\n   * @static\n   * @method getOrganizations\n   * @description Extracts and transforms organization information for the user\n   * @param {UserContext} user - The user context\n   * @returns {Array<{organizationId: string | undefined, organizationName: string | undefined, displayName: string | undefined, branding: {logoUrl: string | undefined} | undefined}> | null}\n   * - Array of user's organizations or null if none\n   */\n  static getOrganizations(user: UserContext): UserMembers['organizations'] {\n    if (!user?.organizations || !Array.isArray(user?.organizations)) return null;\n\n    return user?.organizations.map((organization) => {\n      return {\n        organizationId: organization.id,\n        organizationName: organization.name,\n        displayName: organization.display_name,\n        branding: {\n          logoUrl: organization.branding?.logo_url,\n        },\n      };\n    });\n  }\n}\n"],"names":["User","id","username","email","picture","phoneNumber","userMetadata","appMetadata","enrolledFactors","enrolledEmails","enrolledPhoneNumbers","enrolledDevices","organizations","constructor","user","this","phone_number","user_metadata","app_metadata","enrolled_factors","enrolled_emails","enrolled_phone_numbers","enrolled_devices","getOrganizations","Array","isArray","map","organization","organizationId","organizationName","name","displayName","display_name","branding","logoUrl","logo_url"],"mappings":"MAOaA,EAEXC,GAGAC,SAGAC,MAGAC,QAGAC,YAGAC,aAGAC,YAGAC,gBAGAC,eAGAC,qBAGAC,gBAMAC,cAMA,WAAAC,CAAYC,GACVC,KAAKd,GAAKa,GAAMb,IAAM,KACtBc,KAAKb,SAAWY,GAAMZ,UAAY,KAClCa,KAAKZ,MAAQW,GAAMX,OAAS,KAC5BY,KAAKX,QAAUU,GAAMV,SAAW,KAChCW,KAAKV,YAAcS,GAAME,cAAgB,KACzCD,KAAKT,aAAeQ,GAAMG,eAAiB,KAC3CF,KAAKR,YAAcO,GAAMI,cAAgB,KACzCH,KAAKP,gBAAkBM,GAAMK,kBAAoB,KACjDJ,KAAKN,eAAiBK,GAAMM,iBAAmB,KAC/CL,KAAKL,qBAAuBI,GAAMO,wBAA0B,KAC5DN,KAAKJ,gBAAkBG,GAAMQ,kBAAoB,KACjDP,KAAKH,cAAgBZ,EAAKuB,iBAAiBT,GAW7C,uBAAOS,CAAiBT,GACtB,OAAKA,GAAMF,eAAkBY,MAAMC,QAAQX,GAAMF,eAE1CE,GAAMF,cAAcc,KAAKC,IACvB,CACLC,eAAgBD,EAAa1B,GAC7B4B,iBAAkBF,EAAaG,KAC/BC,YAAaJ,EAAaK,aAC1BC,SAAU,CACRC,QAASP,EAAaM,UAAUE,cARkC"}