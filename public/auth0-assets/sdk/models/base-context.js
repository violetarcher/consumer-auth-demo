import{Branding as t}from"./branding.js";import{Client as n}from"./client.js";import{Organization as e}from"./organization.js";import{Prompt as r}from"./prompt.js";import{Screen as o}from"./screen.js";import{Tenant as i}from"./tenant.js";import{Transaction as s}from"./transaction.js";import{UntrustedData as a}from"./untrusted-data.js";import{User as c}from"./user.js";class m{branding;screen;tenant;prompt;organization;client;transaction;user;untrustedData;static context=null;static screenIdentifier="";constructor(){if(!m.context){const t=window;m.context=t.universal_login_context??null}const u=m.context,l=new.target?.screenIdentifier;if(!u)throw new Error("Universal Login Context is not available on the global window object.");if(l!==u?.screen?.name&&""!==l)throw new Error(`Incorrect import: The current screen name does not match the imported screen class. Imported Screen: ${l}, Current Screen: ${u?.screen?.name}`);this.branding=new t(u.branding),this.screen=new o(u.screen),this.tenant=new i(u.tenant),this.prompt=new r(u.prompt),this.organization=new e(u.organization),this.client=new n(u.client),this.transaction=new s(u.transaction),this.user=new c(u.user),this.untrustedData=new a(u.untrusted_data)}getContext(t){if(!m.context){const t=window;m.context=t.universal_login_context??null}if(m.context)return m.context[t]}getError(){return this.transaction?.errors??[]}}export{m as BaseContext};
//# sourceMappingURL=base-context.js.map
