{"version":3,"file":"transaction.js","sources":["../../../src/models/transaction.ts"],"sourcesContent":["import type { TransactionContext, TransactionMembers } from '../../interfaces/models/transaction';\n\n/**\n * @class Transaction\n * @description Provides access to the current authentication transaction, including state, errors, connections, and locale.\n * @implements {TransactionMembers}\n */\nexport class Transaction implements TransactionMembers {\n  /** @property {string} state - The current state of the authentication transaction */\n  state: TransactionMembers['state'];\n\n  /** @property {boolean} hasErrors - Indicates if the transaction has errors */\n  hasErrors: TransactionMembers['hasErrors'];\n\n  /** @property {string} locale - The current locale for the transaction */\n  locale: TransactionMembers['locale'];\n\n  /** @property {string | null} countryCode - The country code if available */\n  countryCode: TransactionMembers['countryCode'];\n\n  /** @property {string | null} countryPrefix - The phone prefix for the country */\n  countryPrefix: TransactionMembers['countryCode'];\n\n  /** @property {string | null} connectionStrategy - The strategy of the current connection */\n  connectionStrategy: TransactionMembers['connectionStrategy'];\n\n  /** @property {Error[] | null} errors - List of errors in the transaction */\n  errors: TransactionMembers['errors'];\n\n  /** @property {Connection | null} currentConnection - The connection being used */\n  currentConnection: TransactionMembers['currentConnection'];\n\n  /** @property {(Connection | EnterpriseConnection)[] | null} alternateConnections - Other available connections */\n  alternateConnections: TransactionMembers['alternateConnections'];\n\n  /**\n   * @constructor\n   * @param {TransactionContext} transaction - The transaction context from Universal Login\n   */\n  constructor(transaction: TransactionContext) {\n    this.state = transaction.state;\n    this.hasErrors = !!(transaction.errors && transaction.errors.length > 0);\n    this.locale = transaction.locale;\n    this.countryCode = transaction.country_code?.code ?? null;\n    this.countryPrefix = transaction.country_code?.prefix ?? null;\n    this.connectionStrategy = transaction?.connection?.strategy?.toLowerCase() ?? null;\n    this.errors = Transaction.getErrors(transaction);\n    this.currentConnection = Transaction.getCurrentConnection(transaction);\n    this.alternateConnections = Transaction.getAlternateConnections(transaction);\n  }\n\n  /**\n   * @static\n   * @method getErrors\n   * @description Extracts and transforms error information from the transaction\n   * @param {TransactionContext} transaction - The transaction context\n   * @returns {Error[] | null} Array of errors or null if no errors\n   */\n  static getErrors(transaction: TransactionContext): TransactionMembers['errors'] {\n    if (!transaction.errors || transaction.errors.length === 0) {\n      return null;\n    }\n\n    return transaction.errors.map((error) => ({\n      code: error.code,\n      field: error.field,\n      message: error.message,\n    }));\n  }\n\n  /**\n   * @static\n   * @method getCurrentConnection\n   * @description Extracts information about the current connection\n   * @param {TransactionContext} transaction - The transaction context\n   * @returns {Connection | null} The current connection or null if unavailable\n   */\n  static getCurrentConnection(transaction: TransactionContext): TransactionMembers['currentConnection'] {\n    if (!transaction?.connection) {\n      return null;\n    }\n\n    const { name, strategy, metadata } = transaction.connection;\n    return {\n      name,\n      strategy,\n      metadata,\n    };\n  }\n\n  /**\n   * @static\n   * @method getAlternateConnections\n   * @description Extracts information about alternate connections (like social providers)\n   * @param {TransactionContext} transaction - The transaction context\n   * @returns {(Connection | EnterpriseConnection)[] | null} Array of alternate connections or null if none\n   */\n  static getAlternateConnections(transaction: TransactionContext): TransactionMembers['alternateConnections'] {\n    const alternateConnections = transaction?.alternate_connections;\n\n    if (!alternateConnections || !Array.isArray(alternateConnections)) {\n      return null;\n    }\n\n    return alternateConnections.map((connection) => {\n      const { name, strategy, metadata } = connection;\n      const connectionProperties = {\n        name,\n        strategy,\n        metadata,\n      };\n\n      if ('options' in connection) {\n        const { icon_url: iconUrl, display_name: displayName, show_as_button: showAsButton } = connection.options;\n        return {\n          ...connectionProperties,\n          options: { iconUrl, displayName, showAsButton },\n        };\n      }\n\n      return connectionProperties;\n    });\n  }\n}\n"],"names":["Transaction","state","hasErrors","locale","countryCode","countryPrefix","connectionStrategy","errors","currentConnection","alternateConnections","constructor","transaction","this","length","country_code","code","prefix","connection","strategy","toLowerCase","getErrors","getCurrentConnection","getAlternateConnections","map","error","field","message","name","metadata","alternate_connections","Array","isArray","connectionProperties","icon_url","iconUrl","display_name","displayName","show_as_button","showAsButton","options"],"mappings":"MAOaA,EAEXC,MAGAC,UAGAC,OAGAC,YAGAC,cAGAC,mBAGAC,OAGAC,kBAGAC,qBAMA,WAAAC,CAAYC,GACVC,KAAKX,MAAQU,EAAYV,MACzBW,KAAKV,aAAeS,EAAYJ,QAAUI,EAAYJ,OAAOM,OAAS,GACtED,KAAKT,OAASQ,EAAYR,OAC1BS,KAAKR,YAAcO,EAAYG,cAAcC,MAAQ,KACrDH,KAAKP,cAAgBM,EAAYG,cAAcE,QAAU,KACzDJ,KAAKN,mBAAqBK,GAAaM,YAAYC,UAAUC,eAAiB,KAC9EP,KAAKL,OAASP,EAAYoB,UAAUT,GACpCC,KAAKJ,kBAAoBR,EAAYqB,qBAAqBV,GAC1DC,KAAKH,qBAAuBT,EAAYsB,wBAAwBX,GAUlE,gBAAOS,CAAUT,GACf,OAAKA,EAAYJ,QAAwC,IAA9BI,EAAYJ,OAAOM,OAIvCF,EAAYJ,OAAOgB,KAAKC,IAAW,CACxCT,KAAMS,EAAMT,KACZU,MAAOD,EAAMC,MACbC,QAASF,EAAME,YANR,KAiBX,2BAAOL,CAAqBV,GAC1B,IAAKA,GAAaM,WAChB,OAAO,KAGT,MAAMU,KAAEA,EAAIT,SAAEA,EAAQU,SAAEA,GAAajB,EAAYM,WACjD,MAAO,CACLU,OACAT,WACAU,YAWJ,8BAAON,CAAwBX,GAC7B,MAAMF,EAAuBE,GAAakB,sBAE1C,OAAKpB,GAAyBqB,MAAMC,QAAQtB,GAIrCA,EAAqBc,KAAKN,IAC/B,MAAMU,KAAEA,EAAIT,SAAEA,EAAQU,SAAEA,GAAaX,EAC/Be,EAAuB,CAC3BL,OACAT,WACAU,YAGF,GAAI,YAAaX,EAAY,CAC3B,MAAQgB,SAAUC,EAASC,aAAcC,EAAaC,eAAgBC,GAAiBrB,EAAWsB,QAClG,MAAO,IACFP,EACHO,QAAS,CAAEL,UAASE,cAAaE,iBAIrC,OAAON,CAAoB,IAnBpB"}