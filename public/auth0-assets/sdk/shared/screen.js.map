{"version":3,"file":"screen.js","sources":["../../../src/shared/screen.ts"],"sourcesContent":["import type { PasskeyCreate, PasskeyRead, Scope, ScreenContext } from '../../interfaces/models/screen';\n\n/**\n * Retrieves the signup link from the screen context.\n *\n * @param {ScreenContext} screen - The screen context object from Universal Login.\n * @returns {string | null} - The signup link URL or null if not available.\n */\nexport function getSignupLink(screen: ScreenContext): string | null {\n  const links = screen?.links;\n  return links?.signup ?? null;\n}\n\n/**\n * Retrieves the back link from the screen context.\n *\n * @param {ScreenContext} screen - The screen context object from Universal Login.\n * @returns {string | null} - The back link URL or null if not available.\n */\nexport function getBackLink(screen: ScreenContext): string | null {\n  const links = screen?.links;\n  return links?.back ?? null;\n}\n\n/**\n * Retrieves the login link from the screen context.\n *\n * @param {ScreenContext} screen - The screen context object from Universal Login.\n * @returns {string | null} - The login link URL or null if not available.\n */\nexport function getLoginLink(screen: ScreenContext): string | null {\n  const links = screen?.links;\n  return links?.login ?? null;\n}\n\n/**\n * Retrieves the reset password link from the screen context.\n *\n * @param {ScreenContext} screen - The screen context object from Universal Login.\n * @returns {string | null} - The reset password link URL or null if not available.\n */\nexport function getResetPasswordLink(screen: ScreenContext): string | null {\n  const links = screen?.links;\n  return links?.reset_password ?? null;\n}\n\n/**\n * Retrieves the forgot password link from the screen context.\n *\n * @param {ScreenContext} screen - The screen context object from Universal Login.\n * @returns {string | null} - The forgot password link URL or null if not available.\n */\nexport function getForgotPasswordLink(screen: ScreenContext): string | null {\n  const links = screen?.links;\n  return links?.forgot_password ?? null;\n}\n\n/**\n * Retrieves the edit identifier link from the screen context.\n *\n * @param {ScreenContext} screen - The screen context object from Universal Login.\n * @returns {string | null} - The edit identifier link URL or null if not available.\n */\nexport function getEditIdentifierLink(screen: ScreenContext): string | null {\n  const links = screen?.links;\n  return links?.edit_identifier ?? null;\n}\n\n/**\n * Retrieves the public key for passkeys from the screen context.\n *\n * @param {ScreenContext} screen - The screen context object from Universal Login.\n * @returns {PasskeyRead['public_key'] | PasskeyCreate['public_key'] | null} - The public key for passkeys or null if not available.\n */\nexport function getPublicKey(screen: ScreenContext): PasskeyRead['public_key'] | PasskeyCreate['public_key'] | null {\n  const passkey = screen.data?.passkey as PasskeyRead | PasskeyCreate;\n  return passkey?.public_key ?? null;\n}\n\n/**\n * Retrieves the remember device option from the screen context.\n * This is used in MFA flows where users can choose to remember their device for future logins.\n *\n * @param {ScreenContext} screen - The screen context object from Universal Login.\n * @returns {boolean} - Whether the remember device option is available and enabled.\n */\nexport function getShowRememberDevice(screen: ScreenContext): boolean {\n  return screen.data?.show_remember_device as boolean || false;\n}\n\n/**\n * Retrieves the WebAuthn type from the screen context.\n *\n * @param {ScreenContext} screen - The screen context object from Universal Login.\n * @returns {string | null} - The WebAuthn type (e.g., 'roaming', 'platform') or null if not available.\n */\nexport function getWebAuthnType(screen: ScreenContext): string | null {\n  return screen.data?.webauthnType as string ?? null;\n}\n\n/**\n * Retrieves and processes the scopes from the provided screen context.\n *\n * This function ensures that the scopes are properly formatted and validated.\n * It provides default values for optional fields and ensures that the `values`\n * property is always an array of strings. Invalid entries are filtered out.\n *\n * @param screen - The screen context containing the data with scopes.\n * @returns An array of processed `Scope` objects.\n */\nexport function getScopes(screen: ScreenContext): Scope[] {\n  return Array.isArray(screen.data?.scopes)\n        ? (screen.data?.scopes as Scope[])\n            .map((scope: Scope): Scope => {\n              return {\n                value: scope.value,\n                // Provide defaults for optional fields\n                description: typeof scope.description === 'string' ? scope.description : ''\n              };\n            })\n        : [];\n}\n"],"names":["getSignupLink","screen","links","signup","getBackLink","back","getLoginLink","login","getResetPasswordLink","reset_password","getEditIdentifierLink","edit_identifier","getPublicKey","passkey","data","public_key","getShowRememberDevice","show_remember_device","getWebAuthnType","webauthnType","getScopes","Array","isArray","scopes","map","scope","value","description"],"mappings":"AAQM,SAAUA,EAAcC,GAC5B,MAAMC,EAAQD,GAAQC,MACtB,OAAOA,GAAOC,QAAU,IAC1B,CAQM,SAAUC,EAAYH,GAC1B,MAAMC,EAAQD,GAAQC,MACtB,OAAOA,GAAOG,MAAQ,IACxB,CAQM,SAAUC,EAAaL,GAC3B,MAAMC,EAAQD,GAAQC,MACtB,OAAOA,GAAOK,OAAS,IACzB,CAQM,SAAUC,EAAqBP,GACnC,MAAMC,EAAQD,GAAQC,MACtB,OAAOA,GAAOO,gBAAkB,IAClC,CAmBM,SAAUC,EAAsBT,GACpC,MAAMC,EAAQD,GAAQC,MACtB,OAAOA,GAAOS,iBAAmB,IACnC,CAQM,SAAUC,EAAaX,GAC3B,MAAMY,EAAUZ,EAAOa,MAAMD,QAC7B,OAAOA,GAASE,YAAc,IAChC,CASM,SAAUC,EAAsBf,GACpC,OAAOA,EAAOa,MAAMG,uBAAmC,CACzD,CAQM,SAAUC,EAAgBjB,GAC9B,OAAOA,EAAOa,MAAMK,cAA0B,IAChD,CAYM,SAAUC,EAAUnB,GACxB,OAAOoB,MAAMC,QAAQrB,EAAOa,MAAMS,SACzBtB,EAAOa,MAAMS,QACXC,KAAKC,IACG,CACLC,MAAOD,EAAMC,MAEbC,YAA0C,iBAAtBF,EAAME,YAA2BF,EAAME,YAAc,OAG/E,EACV"}