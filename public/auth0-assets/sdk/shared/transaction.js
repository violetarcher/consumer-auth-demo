function n(n){return!0===n?.connection?.options?.signup_enabled}function t(n){const t=n?.connection;return!0===t?.options?.forgot_password_enabled}function o(n){const t=n?.connection;return t?.options?.authentication_methods?.passkey?.enabled??!1}function e(n){const t=n?.connection;return t?.options?.username_required??!1}function i(n){const t=n?.connection,o=t?.options?.attributes?.username?.validation;return o?{maxLength:o.max_length,minLength:o.min_length,allowedFormats:{usernameInEmailFormat:o.allowed_types?.email??!1,usernameInPhoneFormat:o.allowed_types?.phone_number??!1}}:null}function s(n){const t=n?.connection,o=t?.options?.authentication_methods?.password;return o?{minLength:o.min_length,policy:o.policy,passwordSecurityInfo:o.password_security_info}:null}function u(n){const t=n?.connection;return t?.options?.attributes?l(t,["required","optional"]):null}function r(n){return l(n?.connection,["required"])}function c(n){return l(n?.connection,["optional"])}function a(n){const t=n.connection;return!!t?.options?.attributes}function l(n,t){return n?.options?.attributes&&Object.entries(n.options.attributes).filter((([,n])=>n.signup_status&&t.includes(n.signup_status))).map((([n])=>n)).length>0?Object.entries(n.options.attributes).filter((([,n])=>n.signup_status&&t.includes(n.signup_status))).map((([n])=>n)):null}export{u as getAllowedIdentifiers,c as getOptionalIdentifiers,s as getPasswordPolicy,r as getRequiredIdentifiers,i as getUsernamePolicy,a as hasFlexibleIdentifier,t as isForgotPasswordEnabled,o as isPasskeyEnabled,n as isSignupEnabled,e as isUsernameRequired};
//# sourceMappingURL=transaction.js.map
