{"version":3,"file":"transaction.js","sources":["../../../src/shared/transaction.ts"],"sourcesContent":["import type { DBConnection, UsernamePolicy, PasswordPolicy, TransactionContext } from '../../interfaces/models/transaction';\nimport type { TransactionMembersOnLoginId } from '../../interfaces/screens/login-id';\nimport type { TransactionMembersOnSignupId } from '../../interfaces/screens/signup-id';\nimport type { IdentifierType } from '../../src/constants';\n\n/**\n * Checks if signup is enabled for the current connection.\n *\n * @param transaction - The transaction context from Universal Login\n * @returns True if signup is enabled, false otherwise\n */\nexport function isSignupEnabled(transaction: TransactionContext): boolean {\n  return transaction?.connection?.options?.signup_enabled === true;\n}\n\n/**\n * Checks if forgot password is enabled for the current database connection.\n *\n * @param transaction - The transaction context from Universal Login\n * @returns True if forgot password is enabled, false otherwise\n */\nexport function isForgotPasswordEnabled(transaction: TransactionContext): boolean {\n  const connection = transaction?.connection as DBConnection;\n  return connection?.options?.forgot_password_enabled === true;\n}\n\n/**\n * Checks if passkeys are enabled in the current connection configuration.\n *\n * @param transaction - The transaction context from Universal Login\n * @returns True if passkeys are enabled, false otherwise\n */\nexport function isPasskeyEnabled(transaction: TransactionContext): boolean {\n  const connection = transaction?.connection as DBConnection;\n  return connection?.options?.authentication_methods?.passkey?.enabled ?? false;\n}\n\n/**\n * Determines if a username is required for authentication based on connection settings.\n *\n * @param transaction - The transaction context from Universal Login\n * @returns True if username is required, false otherwise\n */\nexport function isUsernameRequired(transaction: TransactionContext): boolean {\n  const connection = transaction?.connection as DBConnection;\n  return connection?.options?.username_required ?? false;\n}\n\n/**\n * Retrieves the username policy configuration from the transaction context.\n * This includes settings like minimum/maximum length and allowed formats.\n *\n * @param transaction - The transaction context from Universal Login\n * @returns The username policy object or null if not defined\n */\nexport function getUsernamePolicy(transaction: TransactionContext): UsernamePolicy | null {\n  const connection = transaction?.connection as DBConnection;\n  const validation = connection?.options?.attributes?.username?.validation;\n\n  if (!validation) return null;\n\n  return {\n    maxLength: validation.max_length,\n    minLength: validation.min_length,\n    allowedFormats: {\n      usernameInEmailFormat: validation.allowed_types?.email ?? false,\n      usernameInPhoneFormat: validation.allowed_types?.phone_number ?? false,\n    },\n  };\n}\n\n/**\n * Retrieves the password policy configuration from the transaction context.\n * This includes properties like minimum length and complexity requirements.\n *\n * @param transaction - The transaction context from Universal Login\n * @returns The password policy object or null if not defined\n */\nexport function getPasswordPolicy(transaction: TransactionContext): PasswordPolicy | null {\n  const connection = transaction?.connection as DBConnection;\n  const passwordPolicy = connection?.options?.authentication_methods?.password;\n\n  if (!passwordPolicy) return null;\n\n  return {\n    minLength: passwordPolicy.min_length,\n    policy: passwordPolicy.policy as PasswordPolicy['policy'],\n    passwordSecurityInfo: passwordPolicy.password_security_info,\n  };\n}\n\n/**\n * Returns the allowed identifiers (email, username, phone) based on the connection settings.\n * This includes both required and optional identifier types.\n *\n * @param transaction - The transaction context from Universal Login\n * @returns An array of allowed identifier types or null if none are defined\n */\nexport function getAllowedIdentifiers(transaction: TransactionContext): TransactionMembersOnLoginId['allowedIdentifiers'] {\n  const connection = transaction?.connection as DBConnection;\n  if (!connection?.options?.attributes) return null;\n\n  return extractIdentifiersByStatus(connection, ['required', 'optional']);\n}\n\n/**\n * Returns only the required identifiers for signup flow based on connection settings.\n *\n * @param transaction - The transaction context from Universal Login\n * @returns An array of required identifier types or null if none are defined\n */\nexport function getRequiredIdentifiers(transaction: TransactionContext): TransactionMembersOnSignupId['requiredIdentifiers'] {\n  return extractIdentifiersByStatus(transaction?.connection as DBConnection, ['required']);\n}\n\n/**\n * Returns only the optional identifiers for signup flow based on connection settings.\n *\n * @param transaction - The transaction context from Universal Login\n * @returns An array of optional identifier types or null if none are defined\n */\nexport function getOptionalIdentifiers(transaction: TransactionContext): TransactionMembersOnSignupId['optionalIdentifiers'] {\n  return extractIdentifiersByStatus(transaction?.connection as DBConnection, ['optional']);\n}\n\n/**\n * Checks if the connection supports flexible identifiers.\n * A connection supports flexible identifiers if it has attributes configured.\n *\n * @param transaction - The transaction context from Universal Login\n * @returns True if flexible identifiers are supported, false otherwise\n */\nexport function hasFlexibleIdentifier(transaction: TransactionContext): boolean {\n  const connection = transaction.connection as DBConnection;\n  return connection?.options?.attributes ? true : false;\n}\n\n/**\n * Helper function that extracts identifiers based on their signup status.\n * Used internally by getAllowedIdentifiers, getRequiredIdentifiers, and getOptionalIdentifiers.\n *\n * @param connection - The database connection object\n * @param statuses - Array of statuses to filter by ('required' or 'optional')\n * @returns Array of matching identifier types or null if none are found\n */\nfunction extractIdentifiersByStatus(connection: DBConnection | undefined, statuses: ('required' | 'optional')[]): IdentifierType[] | null {\n  if (!connection?.options?.attributes) return null;\n\n  return Object.entries(connection.options.attributes)\n    .filter(([, value]) => value.signup_status && statuses.includes(value.signup_status as 'required' | 'optional'))\n    .map(([key]) => key as IdentifierType).length > 0\n    ? Object.entries(connection.options.attributes)\n        .filter(([, value]) => value.signup_status && statuses.includes(value.signup_status as 'required' | 'optional'))\n        .map(([key]) => key as IdentifierType)\n    : null;\n}\n"],"names":["isSignupEnabled","transaction","connection","options","signup_enabled","isForgotPasswordEnabled","forgot_password_enabled","isPasskeyEnabled","authentication_methods","passkey","enabled","isUsernameRequired","username_required","getUsernamePolicy","validation","attributes","username","maxLength","max_length","minLength","min_length","allowedFormats","usernameInEmailFormat","allowed_types","email","usernameInPhoneFormat","phone_number","getPasswordPolicy","passwordPolicy","password","policy","passwordSecurityInfo","password_security_info","getAllowedIdentifiers","extractIdentifiersByStatus","getRequiredIdentifiers","getOptionalIdentifiers","hasFlexibleIdentifier","statuses","Object","entries","filter","value","signup_status","includes","map","key","length"],"mappings":"AAWM,SAAUA,EAAgBC,GAC9B,OAA4D,IAArDA,GAAaC,YAAYC,SAASC,cAC3C,CAQM,SAAUC,EAAwBJ,GACtC,MAAMC,EAAaD,GAAaC,WAChC,OAAwD,IAAjDA,GAAYC,SAASG,uBAC9B,CAQM,SAAUC,EAAiBN,GAC/B,MAAMC,EAAaD,GAAaC,WAChC,OAAOA,GAAYC,SAASK,wBAAwBC,SAASC,UAAW,CAC1E,CAQM,SAAUC,EAAmBV,GACjC,MAAMC,EAAaD,GAAaC,WAChC,OAAOA,GAAYC,SAASS,oBAAqB,CACnD,CASM,SAAUC,EAAkBZ,GAChC,MAAMC,EAAaD,GAAaC,WAC1BY,EAAaZ,GAAYC,SAASY,YAAYC,UAAUF,WAE9D,OAAKA,EAEE,CACLG,UAAWH,EAAWI,WACtBC,UAAWL,EAAWM,WACtBC,eAAgB,CACdC,sBAAuBR,EAAWS,eAAeC,QAAS,EAC1DC,sBAAuBX,EAAWS,eAAeG,eAAgB,IAP7C,IAU1B,CASM,SAAUC,EAAkB1B,GAChC,MAAMC,EAAaD,GAAaC,WAC1B0B,EAAiB1B,GAAYC,SAASK,wBAAwBqB,SAEpE,OAAKD,EAEE,CACLT,UAAWS,EAAeR,WAC1BU,OAAQF,EAAeE,OACvBC,qBAAsBH,EAAeI,wBALX,IAO9B,CASM,SAAUC,EAAsBhC,GACpC,MAAMC,EAAaD,GAAaC,WAChC,OAAKA,GAAYC,SAASY,WAEnBmB,EAA2BhC,EAAY,CAAC,WAAY,aAFd,IAG/C,CAQM,SAAUiC,EAAuBlC,GACrC,OAAOiC,EAA2BjC,GAAaC,WAA4B,CAAC,YAC9E,CAQM,SAAUkC,EAAuBnC,GACrC,OAAOiC,EAA2BjC,GAAaC,WAA4B,CAAC,YAC9E,CASM,SAAUmC,EAAsBpC,GACpC,MAAMC,EAAaD,EAAYC,WAC/B,QAAOA,GAAYC,SAASY,UAC9B,CAUA,SAASmB,EAA2BhC,EAAsCoC,GACxE,OAAKpC,GAAYC,SAASY,YAEnBwB,OAAOC,QAAQtC,EAAWC,QAAQY,YACtC0B,QAAO,GAAIC,KAAWA,EAAMC,eAAiBL,EAASM,SAASF,EAAMC,iBACrEE,KAAI,EAAEC,KAASA,IAAuBC,OAAS,EAC9CR,OAAOC,QAAQtC,EAAWC,QAAQY,YAC/B0B,QAAO,GAAIC,KAAWA,EAAMC,eAAiBL,EAASM,SAASF,EAAMC,iBACrEE,KAAI,EAAEC,KAASA,IAPuB,IAS/C"}