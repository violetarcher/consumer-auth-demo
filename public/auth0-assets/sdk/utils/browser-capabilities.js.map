{"version":3,"file":"browser-capabilities.js","sources":["../../../src/utils/browser-capabilities.ts"],"sourcesContent":["interface BraveNavigator extends Navigator {\n  brave?: {\n    isBrave?: () => Promise<boolean>;\n  };\n}\n\nexport async function isBrave(): Promise<boolean> {\n  if (typeof navigator === 'undefined') {\n    return false;\n  }\n\n  const navigatorBrave = navigator as BraveNavigator;\n\n  if (navigatorBrave.brave?.isBrave && typeof navigatorBrave.brave.isBrave === 'function') {\n    try {\n      return Boolean(await navigatorBrave.brave.isBrave());\n    } catch {\n      return false; // Gracefully handle any errors\n    }\n  }\n\n  return false;\n}\n\nexport function isWebAuthAvailable(): boolean {\n  return typeof window.PublicKeyCredential !== 'undefined';\n}\n\nexport function isJsAvailable(): boolean {\n  return true;\n}\n\nexport async function isWebAuthPlatformAvailable(): Promise<boolean> {\n  if (!window || !window.PublicKeyCredential) {\n    return false;\n  }\n\n  try {\n    return Boolean(await window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable());\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn('isUserVerifyingPlatformAuthenticatorAvailable failed', err);\n    return false;\n  }\n}\n\nexport async function isPasskeySupported(): Promise<boolean> {\n  if (!isWebAuthAvailable()) {\n    return false;\n  }\n\n  try {\n    const isPlatformAvailable = await isWebAuthPlatformAvailable();\n    return isPlatformAvailable && Boolean(await window.PublicKeyCredential.isConditionalMediationAvailable());\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn('isPasskeySupported failed', err);\n    return false;\n  }\n}\n\n\nexport async function getBrowserCapabilities(): Promise<object> {\n  return {\n    'js-available': isJsAvailable(),\n    'is-brave': await isBrave(),\n    'webauthn-available': isWebAuthAvailable(),\n    'webauthn-platform-available': await isWebAuthPlatformAvailable(),\n    'allow-passkeys': await isPasskeySupported()\n  }\n}"],"names":["async","isBrave","navigator","navigatorBrave","brave","Boolean","isWebAuthAvailable","window","PublicKeyCredential","isJsAvailable","isWebAuthPlatformAvailable","isUserVerifyingPlatformAuthenticatorAvailable","err","console","warn","isPasskeySupported","isConditionalMediationAvailable","getBrowserCapabilities"],"mappings":"AAMOA,eAAeC,IACpB,GAAyB,oBAAdC,UACT,OAAO,EAGT,MAAMC,EAAiBD,UAEvB,GAAIC,EAAeC,OAAOH,SAAmD,mBAAjCE,EAAeC,MAAMH,QAC/D,IACE,OAAOI,cAAcF,EAAeC,MAAMH,WAC1C,MACA,OAAO,EAIX,OAAO,CACT,UAEgBK,IACd,YAA6C,IAA/BC,OAAOC,mBACvB,UAEgBC,IACd,OAAO,CACT,CAEOT,eAAeU,IACpB,IAAKH,SAAWA,OAAOC,oBACrB,OAAO,EAGT,IACE,OAAOH,cAAcE,OAAOC,oBAAoBG,iDAChD,MAAOC,GAGP,OADAC,QAAQC,KAAK,uDAAwDF,IAC9D,EAEX,CAEOZ,eAAee,IACpB,IAAKT,IACH,OAAO,EAGT,IAEE,aADkCI,KACJL,cAAcE,OAAOC,oBAAoBQ,mCACvE,MAAOJ,GAGP,OADAC,QAAQC,KAAK,4BAA6BF,IACnC,EAEX,CAGOZ,eAAeiB,IACpB,MAAO,CACL,gBAnCK,EAoCL,iBAAkBhB,IAClB,qBAAsBK,IACtB,oCAAqCI,IACrC,uBAAwBK,IAE5B"}