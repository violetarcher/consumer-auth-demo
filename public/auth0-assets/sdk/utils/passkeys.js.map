{"version":3,"file":"passkeys.js","sources":["../../../src/utils/passkeys.ts"],"sourcesContent":["import { Errors } from '../constants';\n\nimport { isWebAuthPlatformAvailable } from './browser-capabilities';\nimport { base64UrlToUint8Array, uint8ArrayToBase64Url } from './codec';\n\nimport type { PasskeyRead, PasskeyCreate } from '../../interfaces/models/screen';\nimport type { PasskeyCreateResponse, PasskeyCredentialResponse } from '../../interfaces/utils/passkeys';\n\nfunction safeBase64Url(buffer: ArrayBuffer | null): string | null {\n  return buffer ? uint8ArrayToBase64Url(buffer) : null;\n}\n\nfunction decodePublicKey(publicKey: PasskeyCreate['public_key']): PublicKeyCredentialCreationOptions {\n  const { challenge, user, authenticatorSelection, pubKeyCredParams, rp } = publicKey;\n  const decodedUser: PublicKeyCredentialUserEntity = {\n    id: base64UrlToUint8Array(user.id),\n    name: user.name,\n    displayName: user.displayName,\n  };\n\n  return {\n    rp,\n    user: decodedUser,\n    challenge: base64UrlToUint8Array(challenge),\n    pubKeyCredParams: pubKeyCredParams.map(({ alg }) => ({\n      type: 'public-key',\n      alg,\n    })),\n    authenticatorSelection: {\n      ...authenticatorSelection,\n      residentKey: authenticatorSelection.residentKey as 'required' | 'preferred' | 'discouraged',\n      userVerification: authenticatorSelection.userVerification as 'required' | 'preferred' | 'discouraged' | undefined,\n    },\n    attestation: 'direct',\n  };\n}\n\nfunction isAuthenticatorAssertionResponse(response: AuthenticatorResponse): response is AuthenticatorAssertionResponse {\n  return (response as AuthenticatorAssertionResponse).authenticatorData !== undefined;\n}\n\nexport async function getPasskeyCredentials(publicKey: PasskeyRead['public_key']): Promise<PasskeyCredentialResponse> {\n  if (!publicKey?.challenge) throw new Error(Errors.PASSKEY_PUBLIC_KEY_UNAVAILABLE);\n\n  const hasWebAuthPlatform = await isWebAuthPlatformAvailable();\n  const challenge = base64UrlToUint8Array(publicKey.challenge);\n\n  const credential = (await navigator.credentials.get({\n    publicKey: { challenge },\n  })) as PublicKeyCredential | null;\n\n  if (!credential) throw new Error(Errors.PASSKEY_CREDENTIALS_UNAVAILABLE);\n  if (!isAuthenticatorAssertionResponse(credential.response)) throw new Error(Errors.PASSKEY_EXPECTED_ASSERTION_RESPONSE);\n\n  const response = credential.response;\n\n  return {\n    id: credential.id,\n    rawId: safeBase64Url(credential.rawId ?? null),\n    type: credential.type,\n    authenticatorAttachment: credential.authenticatorAttachment,\n    response: {\n      clientDataJSON: safeBase64Url(response.clientDataJSON ?? null),\n      authenticatorData: safeBase64Url(response.authenticatorData ?? null),\n      signature: safeBase64Url(response.signature ?? null),\n      userHandle: safeBase64Url(response.userHandle ?? null),\n    },\n    isUserVerifyingPlatformAuthenticatorAvailable: hasWebAuthPlatform,\n  };\n}\n\nexport async function createPasskeyCredentials(publicKey: PasskeyCreate['public_key']): Promise<PasskeyCreateResponse> {\n  if (!publicKey?.challenge) throw new Error(Errors.PASSKEY_PUBLIC_KEY_UNAVAILABLE);\n\n  const publicKeyDecoded = decodePublicKey(publicKey);\n  const credential = (await navigator.credentials.create({ publicKey: publicKeyDecoded })) as PublicKeyCredential | null;\n  if (!credential) throw new Error(Errors.PASSKEY_CREATE_FAILED);\n\n  const credentialResponse = credential.response as AuthenticatorAttestationResponse;\n  return {\n    id: credential.id,\n    rawId: uint8ArrayToBase64Url(credential.rawId),\n    type: credential.type,\n    authenticatorAttachment: credential.authenticatorAttachment,\n    response: {\n      clientDataJSON: uint8ArrayToBase64Url(credentialResponse.clientDataJSON),\n      attestationObject: uint8ArrayToBase64Url(credentialResponse.attestationObject),\n      transports: typeof credentialResponse?.getTransports === 'function' ? credentialResponse.getTransports() : undefined,\n    },\n  };\n}\n"],"names":["safeBase64Url","buffer","uint8ArrayToBase64Url","async","getPasskeyCredentials","publicKey","challenge","Error","Errors","PASSKEY_PUBLIC_KEY_UNAVAILABLE","hasWebAuthPlatform","isWebAuthPlatformAvailable","base64UrlToUint8Array","credential","navigator","credentials","get","PASSKEY_CREDENTIALS_UNAVAILABLE","response","undefined","authenticatorData","isAuthenticatorAssertionResponse","PASSKEY_EXPECTED_ASSERTION_RESPONSE","id","rawId","type","authenticatorAttachment","clientDataJSON","signature","userHandle","isUserVerifyingPlatformAuthenticatorAvailable","createPasskeyCredentials","publicKeyDecoded","user","authenticatorSelection","pubKeyCredParams","rp","name","displayName","map","alg","residentKey","userVerification","attestation","decodePublicKey","create","PASSKEY_CREATE_FAILED","credentialResponse","attestationObject","transports","getTransports"],"mappings":"qMAQA,SAASA,EAAcC,GACrB,OAAOA,EAASC,EAAsBD,GAAU,IAClD,CA+BOE,eAAeC,EAAsBC,GAC1C,IAAKA,GAAWC,UAAW,MAAM,IAAIC,MAAMC,EAAOC,gCAElD,MAAMC,QAA2BC,IAC3BL,EAAYM,EAAsBP,EAAUC,WAE5CO,QAAoBC,UAAUC,YAAYC,IAAI,CAClDX,UAAW,CAAEC,eAGf,IAAKO,EAAY,MAAM,IAAIN,MAAMC,EAAOS,iCACxC,IAfF,SAA0CC,GACxC,YAA0EC,IAAlED,EAA4CE,iBACtD,CAaOC,CAAiCR,EAAWK,UAAW,MAAM,IAAIX,MAAMC,EAAOc,qCAEnF,MAAMJ,EAAWL,EAAWK,SAE5B,MAAO,CACLK,GAAIV,EAAWU,GACfC,MAAOxB,EAAca,EAAWW,OAAS,MACzCC,KAAMZ,EAAWY,KACjBC,wBAAyBb,EAAWa,wBACpCR,SAAU,CACRS,eAAgB3B,EAAckB,EAASS,gBAAkB,MACzDP,kBAAmBpB,EAAckB,EAASE,mBAAqB,MAC/DQ,UAAW5B,EAAckB,EAASU,WAAa,MAC/CC,WAAY7B,EAAckB,EAASW,YAAc,OAEnDC,8CAA+CpB,EAEnD,CAEOP,eAAe4B,EAAyB1B,GAC7C,IAAKA,GAAWC,UAAW,MAAM,IAAIC,MAAMC,EAAOC,gCAElD,MAAMuB,EA9DR,SAAyB3B,GACvB,MAAMC,UAAEA,EAAS2B,KAAEA,EAAIC,uBAAEA,EAAsBC,iBAAEA,EAAgBC,GAAEA,GAAO/B,EAO1E,MAAO,CACL+B,KACAH,KARiD,CACjDV,GAAIX,EAAsBqB,EAAKV,IAC/Bc,KAAMJ,EAAKI,KACXC,YAAaL,EAAKK,aAMlBhC,UAAWM,EAAsBN,GACjC6B,iBAAkBA,EAAiBI,KAAI,EAAGC,UAAW,CACnDf,KAAM,aACNe,UAEFN,uBAAwB,IACnBA,EACHO,YAAaP,EAAuBO,YACpCC,iBAAkBR,EAAuBQ,kBAE3CC,YAAa,SAEjB,CAuC2BC,CAAgBvC,GACnCQ,QAAoBC,UAAUC,YAAY8B,OAAO,CAAExC,UAAW2B,IACpE,IAAKnB,EAAY,MAAM,IAAIN,MAAMC,EAAOsC,uBAExC,MAAMC,EAAqBlC,EAAWK,SACtC,MAAO,CACLK,GAAIV,EAAWU,GACfC,MAAOtB,EAAsBW,EAAWW,OACxCC,KAAMZ,EAAWY,KACjBC,wBAAyBb,EAAWa,wBACpCR,SAAU,CACRS,eAAgBzB,EAAsB6C,EAAmBpB,gBACzDqB,kBAAmB9C,EAAsB6C,EAAmBC,mBAC5DC,WAAyD,mBAAtCF,GAAoBG,cAA+BH,EAAmBG,qBAAkB/B,GAGjH"}