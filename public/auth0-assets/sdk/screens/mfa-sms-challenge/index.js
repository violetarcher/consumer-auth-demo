import{FormActions as t}from"../../constants/form-actions.js";import{ScreenIds as e}from"../../constants/enums.js";import{BaseContext as s}from"../../models/base-context.js";import{FormHandler as n}from"../../utils/form-handler.js";import{ScreenOverride as a}from"./screen-override.js";import{UntrustedDataOverride as r}from"./untrusted-data-overrider.js";class i extends s{static screenIdentifier=e.MFA_SMS_CHALLENGE;screen;untrustedData;constructor(){super();const t=this.getContext("screen"),e=this.getContext("untrusted_data");this.screen=new a(t),this.untrustedData=new r(e)}async continueMfaSmsChallenge(e){const s={state:this.transaction.state,telemetry:[i.screenIdentifier,"continueMfaSmsChallenge"]},{rememberDevice:a,...r}=e,o={...r,action:t.DEFAULT};a&&(o.rememberBrowser=!0),await new n(s).submitData(o)}async pickSms(e){const s={state:this.transaction.state,telemetry:[i.screenIdentifier,"pickSms"]};await new n(s).submitData({...e,action:t.PICK_SMS})}async resendCode(e){const s={state:this.transaction.state,telemetry:[i.screenIdentifier,"resendCode"]};await new n(s).submitData({...e,action:t.RESEND_CODE})}async tryAnotherMethod(e){const s={state:this.transaction.state,telemetry:[i.screenIdentifier,"tryAnotherMethod"]};await new n(s).submitData({...e,action:t.PICK_AUTHENTICATOR})}async getACall(e){const s={state:this.transaction.state,telemetry:[i.screenIdentifier,"getACall"]};await new n(s).submitData({...e,action:t.SWITCH_TO_VOICE})}}export{i as default};
//# sourceMappingURL=index.js.map
