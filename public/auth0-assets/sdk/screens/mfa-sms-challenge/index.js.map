{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-sms-challenge/index.ts"],"sourcesContent":["import { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\nimport { UntrustedDataOverride } from './untrusted-data-overrider';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type { UntrustedDataContext } from '../../../interfaces/models/untrusted-data';\nimport type {\n  MfaSmsChallengeMembers,\n  MfaSmsChallengeOptions,\n  ScreenMembersOnMfaSmsChallenge as ScreenOptions,\n  UntrustedDataMembersOnMfaSmsChallenge as UntrustedDataOptions,\n} from '../../../interfaces/screens/mfa-sms-challenge';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * This class provides methods to handle the mfa-sms-challenge screen.\n * @extends BaseContext\n */\nexport default class MfaSmsChallenge extends BaseContext implements MfaSmsChallengeMembers {\n  static screenIdentifier: string = ScreenIds.MFA_SMS_CHALLENGE;\n  screen: ScreenOptions;\n  untrustedData: UntrustedDataOptions;\n\n  /**\n   * Creates an instance of MfaSmsChallenge screen manager\n   */\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    const untrustedDataContext = this.getContext('untrusted_data') as UntrustedDataContext;\n    this.screen = new ScreenOverride(screenContext);\n    this.untrustedData = new UntrustedDataOverride(untrustedDataContext);\n  }\n\n  /**\n   * Submits the MFA SMS challenge with the provided code and rememberDevice option.\n   * @param {MfaSmsChallengeOptions} payload - The payload containing the code and rememberDevice option.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import MfaSmsChallenge from '@auth0/auth0-acul-js/mfa-sms-challenge';\n   *\n   * const mfaSmsChallenge = new MfaSmsChallenge();\n   * await mfaSmsChallenge.continueMfaSmsChallenge({\n   *   code: '123456',\n   *   rememberDevice: true,\n   * });\n   * ```\n   */\n  async continueMfaSmsChallenge(payload: MfaSmsChallengeOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaSmsChallenge.screenIdentifier, 'continueMfaSmsChallenge'],\n    };\n\n    const { rememberDevice, ...restPayload } = payload;\n    const submitPayload: Record<string, string | number | boolean> = { ...restPayload, action: FormActions.DEFAULT };\n\n    if (rememberDevice) {\n      submitPayload.rememberBrowser = true;\n    }\n\n    await new FormHandler(options).submitData(submitPayload);\n  }\n\n  /**\n   * Submits the action to pick a different SMS configuration, if available.\n   * @param {CustomOptions} [payload] - Optional payload.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import MfaSmsChallenge from '@auth0/auth0-acul-js/mfa-sms-challenge';\n   *\n   * const mfaSmsChallenge = new MfaSmsChallenge();\n   * await mfaSmsChallenge.pickSms();\n   * ```\n   */\n  async pickSms(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaSmsChallenge.screenIdentifier, 'pickSms'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({ ...payload, action: FormActions.PICK_SMS });\n  }\n\n  /**\n   * Submits the action to resend the SMS code.\n   * @param {CustomOptions} [payload] - Optional payload.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import MfaSmsChallenge from '@auth0/auth0-acul-js/mfa-sms-challenge';\n   *\n   * const mfaSmsChallenge = new MfaSmsChallenge();\n   * await mfaSmsChallenge.resendCode();\n   * ```\n   */\n  async resendCode(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaSmsChallenge.screenIdentifier, 'resendCode'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({ ...payload, action: FormActions.RESEND_CODE });\n  }\n\n  /**\n   * Submits the action to try another MFA method.\n   * @param {CustomOptions} [payload] - Optional payload.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import MfaSmsChallenge from '@auth0/auth0-acul-js/mfa-sms-challenge';\n   *\n   * const mfaSmsChallenge = new MfaSmsChallenge();\n   * await mfaSmsChallenge.tryAnotherMethod();\n   * ```\n   */\n  async tryAnotherMethod(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaSmsChallenge.screenIdentifier, 'tryAnotherMethod'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({ ...payload, action: FormActions.PICK_AUTHENTICATOR });\n  }\n\n  /**\n   * Submits the action to switch to voice call verification.\n   * @param {CustomOptions} [payload] - Optional payload.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import MfaSmsChallenge from '@auth0/auth0-acul-js/mfa-sms-challenge';\n   *\n   * const mfaSmsChallenge = new MfaSmsChallenge();\n   * await mfaSmsChallenge.getACall();\n   * ```\n   */\n  async getACall(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaSmsChallenge.screenIdentifier, 'getACall'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({ ...payload, action: FormActions.SWITCH_TO_VOICE });\n  }\n}\n\nexport {\n  MfaSmsChallengeMembers,\n  MfaSmsChallengeOptions,\n  ScreenOptions as ScreenMembersOnMfaSmsChallenge,\n  UntrustedDataOptions as UntrustedDataMembersOnMfaSmsChallenge,\n};\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["MfaSmsChallenge","BaseContext","static","ScreenIds","MFA_SMS_CHALLENGE","screen","untrustedData","constructor","super","screenContext","this","getContext","untrustedDataContext","ScreenOverride","UntrustedDataOverride","continueMfaSmsChallenge","payload","options","state","transaction","telemetry","screenIdentifier","rememberDevice","restPayload","submitPayload","action","FormActions","DEFAULT","rememberBrowser","FormHandler","submitData","pickSms","PICK_SMS","resendCode","RESEND_CODE","tryAnotherMethod","PICK_AUTHENTICATOR","getACall","SWITCH_TO_VOICE"],"mappings":"oWAsBqB,MAAAA,UAAwBC,EAC3CC,wBAAkCC,EAAUC,kBAC5CC,OACAC,cAKA,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UAChCC,EAAuBF,KAAKC,WAAW,kBAC7CD,KAAKL,OAAS,IAAIQ,EAAeJ,GACjCC,KAAKJ,cAAgB,IAAIQ,EAAsBF,GAkBjD,6BAAMG,CAAwBC,GAC5B,MAAMC,EAAuB,CAC3BC,MAAOR,KAAKS,YAAYD,MACxBE,UAAW,CAACpB,EAAgBqB,iBAAkB,6BAG1CC,eAAEA,KAAmBC,GAAgBP,EACrCQ,EAA2D,IAAKD,EAAaE,OAAQC,EAAYC,SAEnGL,IACFE,EAAcI,iBAAkB,SAG5B,IAAIC,EAAYZ,GAASa,WAAWN,GAe5C,aAAMO,CAAQf,GACZ,MAAMC,EAAuB,CAC3BC,MAAOR,KAAKS,YAAYD,MACxBE,UAAW,CAACpB,EAAgBqB,iBAAkB,kBAE1C,IAAIQ,EAAYZ,GAASa,WAA0B,IAAKd,EAASS,OAAQC,EAAYM,WAe7F,gBAAMC,CAAWjB,GACf,MAAMC,EAAuB,CAC3BC,MAAOR,KAAKS,YAAYD,MACxBE,UAAW,CAACpB,EAAgBqB,iBAAkB,qBAE1C,IAAIQ,EAAYZ,GAASa,WAA0B,IAAKd,EAASS,OAAQC,EAAYQ,cAe7F,sBAAMC,CAAiBnB,GACrB,MAAMC,EAAuB,CAC3BC,MAAOR,KAAKS,YAAYD,MACxBE,UAAW,CAACpB,EAAgBqB,iBAAkB,2BAE1C,IAAIQ,EAAYZ,GAASa,WAA0B,IAAKd,EAASS,OAAQC,EAAYU,qBAe7F,cAAMC,CAASrB,GACb,MAAMC,EAAuB,CAC3BC,MAAOR,KAAKS,YAAYD,MACxBE,UAAW,CAACpB,EAAgBqB,iBAAkB,mBAE1C,IAAIQ,EAAYZ,GAASa,WAA0B,IAAKd,EAASS,OAAQC,EAAYY"}