{"version":3,"file":"index.js","sources":["../../../../src/screens/login-id/index.ts"],"sourcesContent":["import { ScreenIds, FormActions, Errors } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { getBrowserCapabilities } from '../../utils/browser-capabilities';\nimport { FormHandler } from '../../utils/form-handler';\nimport { getPasskeyCredentials } from '../../utils/passkeys';\n\nimport { ScreenOverride } from './screen-override';\nimport { TransactionOverride } from './transaction-override';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type { TransactionContext } from '../../../interfaces/models/transaction';\nimport type {\n  ScreenMembersOnLoginId as ScreenOptions,\n  TransactionMembersOnLoginId as TransactionOptions,\n  LoginIdMembers,\n  LoginOptions,\n  FederatedLoginOptions,\n} from '../../../interfaces/screens/login-id';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\nexport default class LoginId extends BaseContext implements LoginIdMembers {\n  static screenIdentifier: string = ScreenIds.LOGIN_ID;\n  screen: ScreenOptions;\n  transaction: TransactionOptions;\n\n  /**\n   * Creates an instance of LoginIdManager.\n   */\n  constructor() {\n    super();\n\n    const screenContext = this.getContext('screen') as ScreenContext;\n    const transactionContext = this.getContext('transaction') as TransactionContext;\n\n    // Add the properties specific to the prompt.\n    this.screen = new ScreenOverride(screenContext);\n    this.transaction = new TransactionOverride(transactionContext);\n  }\n\n  /**\n   * @example\n   *\n   * import LoginId from \"@auth0/auth0-acul-js/login-id\";\n   *\n   * const loginIdManager = new LoginId();\n   *\n   * loginIdManager.login({\n   *   username: <usernameFieldValue>\n   * });\n   */\n  async login(payload: LoginOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [LoginId.screenIdentifier, 'login'],\n    };\n    const browserCapabilities = await getBrowserCapabilities()\n    await new FormHandler(options).submitData<LoginOptions>({\n      ...payload,\n      ...browserCapabilities\n    });\n  }\n\n  /**\n   * @example\n   * import LoginId from \"@auth0/auth0-acul-js/login-id\";\n   * const loginIdManager = new LoginId();\n   *\n   * // Check if alternateConnections is available and has at least one item\n   * if (!loginIdManager.transaction.alternateConnections) {\n   *   console.error('No alternate connections available.');\n   * }\n   *\n   * // Select the first available connection (users can select any available connection)\n   * const selectedConnection = alternateConnections[0];\n   *\n   * // Log the chosen connection for debugging or informational purposes\n   * console.log(`Selected connection: ${selectedConnection.name}`);\n   *\n   * // Proceed with federated login using the selected connection\n   * loginIdManager.federatedLogin({\n   *   connection: selectedConnection.name,\n   * });\n   */\n  async federatedLogin(payload: FederatedLoginOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [LoginId.screenIdentifier, 'federatedLogin'],\n    };\n\n    await new FormHandler(options).submitData<FederatedLoginOptions>(payload);\n  }\n\n  /**\n   * @example\n   * import LoginId from \"@auth0/auth0-acul-js/login-id\";\n   * const loginIdManager = new LoginId();\n   *\n   * // It internally maps users available passkey config provided from auth0 server\n   * loginIdManager.passkeyLogin();\n   */\n  async passkeyLogin(payload?: CustomOptions): Promise<void> {\n    const publicKey = this.screen.publicKey;\n    if (!publicKey) throw new Error(Errors.PASSKEY_DATA_UNAVAILABLE);\n\n    const passkey = await getPasskeyCredentials(publicKey);\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [LoginId.screenIdentifier, 'passkeyLogin'],\n    };\n\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      passkey: JSON.stringify(passkey),\n    });\n  }\n\n  /**\n   * @example\n   * import LoginId from \"@auth0/auth0-acul-js/login-id\";\n   * const loginIdManager = new LoginId();\n   *\n   * loginIdManager.pickCountryCode();\n   */\n  async pickCountryCode(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [LoginId.screenIdentifier, 'pickCountryCode'],\n    };\n\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.PICK_COUNTRY_CODE,\n    });\n  }\n}\n\nexport {\n  LoginIdMembers,\n  LoginOptions,\n  FederatedLoginOptions,\n  ScreenOptions as ScreenMembersOnLoginId,\n  TransactionOptions as TransactionMembersOnLoginId,\n};\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["LoginId","BaseContext","static","ScreenIds","LOGIN_ID","screen","transaction","constructor","super","screenContext","this","getContext","transactionContext","ScreenOverride","TransactionOverride","login","payload","options","state","telemetry","screenIdentifier","browserCapabilities","getBrowserCapabilities","FormHandler","submitData","federatedLogin","passkeyLogin","publicKey","Error","Errors","PASSKEY_DATA_UNAVAILABLE","passkey","getPasskeyCredentials","JSON","stringify","pickCountryCode","action","FormActions","PICK_COUNTRY_CODE"],"mappings":"8hBAqBqB,MAAAA,UAAgBC,EACnCC,wBAAkCC,EAAUC,SAC5CC,OACAC,YAKA,WAAAC,GACEC,QAEA,MAAMC,EAAgBC,KAAKC,WAAW,UAChCC,EAAqBF,KAAKC,WAAW,eAG3CD,KAAKL,OAAS,IAAIQ,EAAeJ,GACjCC,KAAKJ,YAAc,IAAIQ,EAAoBF,GAc7C,WAAMG,CAAMC,GACV,MAAMC,EAAuB,CAC3BC,MAAOR,KAAKJ,YAAYY,MACxBC,UAAW,CAACnB,EAAQoB,iBAAkB,UAElCC,QAA4BC,UAC5B,IAAIC,EAAYN,GAASO,WAAyB,IACnDR,KACAK,IAyBP,oBAAMI,CAAeT,GACnB,MAAMC,EAAuB,CAC3BC,MAAOR,KAAKJ,YAAYY,MACxBC,UAAW,CAACnB,EAAQoB,iBAAkB,yBAGlC,IAAIG,EAAYN,GAASO,WAAkCR,GAWnE,kBAAMU,CAAaV,GACjB,MAAMW,EAAYjB,KAAKL,OAAOsB,UAC9B,IAAKA,EAAW,MAAM,IAAIC,MAAMC,EAAOC,0BAEvC,MAAMC,QAAgBC,EAAsBL,GACtCV,EAAuB,CAC3BC,MAAOR,KAAKJ,YAAYY,MACxBC,UAAW,CAACnB,EAAQoB,iBAAkB,uBAGlC,IAAIG,EAAYN,GAASO,WAA0B,IACpDR,EACHe,QAASE,KAAKC,UAAUH,KAW5B,qBAAMI,CAAgBnB,GACpB,MAAMC,EAAuB,CAC3BC,MAAOR,KAAKJ,YAAYY,MACxBC,UAAW,CAACnB,EAAQoB,iBAAkB,0BAGlC,IAAIG,EAAYN,GAASO,WAA0B,IACpDR,EACHoB,OAAQC,EAAYC"}