import{FormActions as t}from"../../constants/form-actions.js";import{ScreenIds as e}from"../../constants/enums.js";import{Errors as s}from"../../constants/errors.js";import{BaseContext as n}from"../../models/base-context.js";import{getBrowserCapabilities as r}from"../../utils/browser-capabilities.js";import{FormHandler as i}from"../../utils/form-handler.js";import{getPasskeyCredentials as a}from"../../utils/passkeys.js";import{ScreenOverride as o}from"./screen-override.js";import{TransactionOverride as c}from"./transaction-override.js";class m extends n{static screenIdentifier=e.LOGIN_ID;screen;transaction;constructor(){super();const t=this.getContext("screen"),e=this.getContext("transaction");this.screen=new o(t),this.transaction=new c(e)}async login(t){const e={state:this.transaction.state,telemetry:[m.screenIdentifier,"login"]},s=await r();await new i(e).submitData({...t,...s})}async federatedLogin(t){const e={state:this.transaction.state,telemetry:[m.screenIdentifier,"federatedLogin"]};await new i(e).submitData(t)}async passkeyLogin(t){const e=this.screen.publicKey;if(!e)throw new Error(s.PASSKEY_DATA_UNAVAILABLE);const n=await a(e),r={state:this.transaction.state,telemetry:[m.screenIdentifier,"passkeyLogin"]};await new i(r).submitData({...t,passkey:JSON.stringify(n)})}async pickCountryCode(e){const s={state:this.transaction.state,telemetry:[m.screenIdentifier,"pickCountryCode"]};await new i(s).submitData({...e,action:t.PICK_COUNTRY_CODE})}}export{m as default};
//# sourceMappingURL=index.js.map
