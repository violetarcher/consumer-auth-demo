{"version":3,"file":"index.js","sources":["../../../../src/screens/login-email-verification/index.ts"],"sourcesContent":["import { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport type {\n  LoginEmailVerificationMembers,\n  ContinueWithCodeOptions,\n  ResendCodeOptions,\n} from '../../../interfaces/screens/login-email-verification';\nimport type { FormOptions as InternalFormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * @class LoginEmailVerification\n * classdesc Manages interactions for the \"login-email-verification\" screen.\n * This screen prompts the user to enter a one-time code sent to their email address\n * to verify their identity during the login process.\n *\n * It provides methods to submit the entered code (`continueWithCode`) or\n * to request a new code if the original one was not received or has expired (`resendCode`).\n *\n * Inherits from `BaseContext` to access shared authentication flow data like\n * transaction state, client information, and internationalization texts.\n *\n * @extends {BaseContext}\n * implements {LoginEmailVerificationMembers}\n *\n * @example\n * ```typescript\n * // How to use the LoginEmailVerification screen SDK:\n * import LoginEmailVerification from '@auth0/auth0-acul-js/login-email-verification';\n *\n * // Instantiate the manager for the login email verification screen\n * const loginEmailVerificationManager = new LoginEmailVerification();\n *\n * // Accessing screen-specific texts (e.g., for titles, labels, button texts)\n * const screenTexts = loginEmailVerificationManager.screen.texts;\n * const pageTitle = screenTexts?.title || 'Verify Your Email';\n * const codePlaceholder = screenTexts?.codePlaceholder || 'Enter code here';\n *\n * // Accessing transaction errors from a previous attempt\n * const transactionErrors = loginEmailVerificationManager.transaction.errors;\n * if (transactionErrors && transactionErrors.length > 0) {\n *   transactionErrors.forEach(error => {\n *     console.error(`Error Code: ${error.code}, Message: ${error.message}`);\n *     // Display these errors to the user appropriately.\n *   });\n * }\n *\n * // Example of handling code submission from a form\n * async function onCodeSubmit(enteredCode: string) {\n *   try {\n *     await loginEmailVerificationManager.continueWithCode({ code: enteredCode });\n *     // On successful verification, Auth0 will typically redirect the user.\n *     // If there's a validation error (e.g., invalid code), the page will\n *     // re-render, and `loginEmailVerificationManager.transaction.errors` will be updated.\n *   } catch (e) {\n *     // This catch block is for unexpected errors during submission (e.g., network issues).\n *     console.error('An unexpected error occurred while submitting the code:', e);\n *   }\n * }\n *\n * // Example of handling a resend code request\n * async function onResendCodeClick() {\n *   try {\n *     await loginEmailVerificationManager.resendCode();\n *     // Inform the user that a new code has been sent.\n *     // The page might re-render; check `loginEmailVerificationManager.transaction.errors`\n *     // for issues like \"too-many-emails\".\n *   } catch (e) {\n *     console.error('An unexpected error occurred while resending the code:', e);\n *   }\n * }\n * ```\n */\nexport default class LoginEmailVerification extends BaseContext implements LoginEmailVerificationMembers {\n  /**\n   * The unique identifier for the Login Email Verification screen.\n   * This static property is used by the SDK's `BaseContext` to ensure that the\n   * class is instantiated in the correct screen context.\n   * @type {string}\n   * static\n   * @readonly\n   */\n  static screenIdentifier: string = ScreenIds.LOGIN_EMAIL_VERIFICATION;\n\n  /**\n   * Creates an instance of the `LoginEmailVerification` screen manager.\n   * The constructor initializes the `BaseContext`, which involves parsing the\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Submits the email verification code entered by the user to Auth0.\n   * This method prepares and posts the form data, including the verification code\n   * and the required `action: \"default\"`, to the `/u/login-email-verification` endpoint.\n   *\n   * @param {ContinueWithCodeOptions} payload - An object containing the `code` (string)\n   *                                            entered by the user. May also contain\n   *                                            other custom parameters if needed.\n   * @returns {Promise<void>} A promise that resolves once the form submission is initiated.\n   *                          Typically, a successful submission leads to a server-side redirect.\n   *                          If the code is incorrect or an error occurs, the page will\n   *                          re-render, and `this.transaction.errors` will be populated.\n   * @throws {Error} If the `payload.code` is missing or not a string. It can also\n   *                 throw if `FormHandler` encounters an issue during submission (e.g. network error).\n   *                 Auth0 validation errors (e.g. \"invalid-code\") are not thrown as JS errors\n   *                 but are made available in `this.transaction.errors` post-operation.\n   *\n   * @example\n   * ```typescript\n   * const manager = new LoginEmailVerification();\n   * // Assuming 'userInputCode' is a string obtained from a form input\n   * manager.continueWithCode({ code: userInputCode })\n   *   .catch(err => {\n   *     // Handle unexpected submission errors\n   *     displayGlobalError(\"Could not submit your code. Please try again.\");\n   *   });\n   * // After the operation, check manager.transaction.errors for validation messages.\n   * ```\n   */\n  async continueWithCode(payload: ContinueWithCodeOptions): Promise<void> {\n    if (!payload || typeof payload.code !== 'string') {\n      throw new Error('The `code` property in the payload is required and must be a string.');\n    }\n\n    const formOptions: InternalFormOptions = {\n      state: this.transaction.state,\n      telemetry: [LoginEmailVerification.screenIdentifier, 'continueWithCode']\n    };\n\n    // Prepare the data to be submitted.\n    // The `action: \"default\"` signals the server to process the code.\n    const submitPayload = {\n      ...payload, // Includes the 'code' and any other custom options passed in.\n      action: FormActions.DEFAULT,\n    };\n\n    // Use FormHandler to submit the data.\n    await new FormHandler(formOptions).submitData<typeof submitPayload>(submitPayload);\n  }\n\n  /**\n   * Requests Auth0 to send a new verification code to the user's email address.\n   * This is typically used when the user didn't receive the original code, or it has expired.\n   * This method posts form data with `action: \"resend-code\"` to the\n   * `/u/login-email-verification` endpoint.\n   *\n   * @param {ResendCodeOptions} [payload] - Optional. An object for any custom parameters\n   *                                        to be sent with the resend request.\n   * @returns {Promise<void>} A promise that resolves once the resend request is initiated.\n   *                          A successful request usually means a new email is dispatched.\n   *                          The page might re-render, and `this.transaction.errors` could\n   *                          be updated if, for example, rate limits (`too-many-emails`) are hit.\n   * @throws {Error} If `FormHandler` encounters an issue (e.g. network error).\n   *                 Server-side validation errors (e.g. rate limits) are not thrown\n   *                 as JS errors but are made available in `this.transaction.errors`.\n   *\n   * @example\n   * ```typescript\n   * const manager = new LoginEmailVerification();\n   * manager.resendCode()\n   *   .then(() => {\n   *     // Inform the user that a new code has been sent.\n   *     showNotification(\"A new verification code is on its way!\");\n   *   })\n   *   .catch(err => {\n   *     // Handle unexpected submission errors\n   *     displayGlobalError(\"Could not request a new code. Please try again later.\");\n   *   });\n   * // After the operation, check manager.transaction.errors for specific issues.\n   * ```\n   */\n  async resendCode(payload?: ResendCodeOptions): Promise<void> {\n    const formOptions: InternalFormOptions = {\n      state: this.transaction.state,\n      telemetry: [LoginEmailVerification.screenIdentifier, 'resendCode']\n    };\n\n    // Prepare the data for resending the code.\n    // The `action: \"resend-code\"` signals the server to dispatch a new code.\n    const submitPayload = {\n      ...payload, // Includes any custom options passed in.\n      action: FormActions.RESEND_CODE,\n    };\n\n    // Use FormHandler to submit the data.\n    await new FormHandler(formOptions).submitData<typeof submitPayload>(submitPayload);\n  }\n}\n\n// Export all necessary types and members for this screen\nexport { LoginEmailVerificationMembers, ContinueWithCodeOptions, ResendCodeOptions };\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';"],"names":["LoginEmailVerification","BaseContext","static","ScreenIds","LOGIN_EMAIL_VERIFICATION","constructor","super","continueWithCode","payload","code","Error","formOptions","state","this","transaction","telemetry","screenIdentifier","submitPayload","action","FormActions","DEFAULT","FormHandler","submitData","resendCode","RESEND_CODE"],"mappings":"wOA0EqB,MAAAA,UAA+BC,EASlDC,wBAAkCC,EAAUC,yBAM5C,WAAAC,GACEC,QAgCF,sBAAMC,CAAiBC,GACrB,IAAKA,GAAmC,iBAAjBA,EAAQC,KAC7B,MAAM,IAAIC,MAAM,wEAGlB,MAAMC,EAAmC,CACvCC,MAAOC,KAAKC,YAAYF,MACxBG,UAAW,CAACf,EAAuBgB,iBAAkB,qBAKjDC,EAAgB,IACjBT,EACHU,OAAQC,EAAYC,eAIhB,IAAIC,EAAYV,GAAaW,WAAiCL,GAkCtE,gBAAMM,CAAWf,GACf,MAAMG,EAAmC,CACvCC,MAAOC,KAAKC,YAAYF,MACxBG,UAAW,CAACf,EAAuBgB,iBAAkB,eAKjDC,EAAgB,IACjBT,EACHU,OAAQC,EAAYK,mBAIhB,IAAIH,EAAYV,GAAaW,WAAiCL"}