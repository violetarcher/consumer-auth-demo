{"version":3,"file":"index.js","sources":["../../../../src/screens/reset-password-mfa-voice-challenge/index.ts"],"sourcesContent":["import { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  ResetPasswordMfaVoiceChallengeMembers,\n  ScreenMembersOnResetPasswordMfaVoiceChallenge as ScreenOptions,\n  ContinueOptions,\n} from '../../../interfaces/screens/reset-password-mfa-voice-challenge';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * @class ResetPasswordMfaVoiceChallenge\n * @description Class implementing the reset-password-mfa-voice-challenge screen functionality\n */\n/**\n * Class implementing the reset-password-mfa-voice-challenge screen functionality.\n */\nexport default class ResetPasswordMfaVoiceChallenge extends BaseContext implements ResetPasswordMfaVoiceChallengeMembers {\n  static screenIdentifier: string = ScreenIds.RESET_PASSWORD_MFA_VOICE_CHALLENGE;\n  screen: ScreenOptions;\n\n  /**\n   * Creates an instance of ResetPasswordMfaVoiceChallenge screen manager.\n   */\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * Continues with the voice challenge using the provided code.\n   *\n   * @param payload - The options containing the code.\n   * @returns A promise that resolves when the challenge is submitted.\n   *\n   * @example\n   * ```ts\n   * const reset = new ResetPasswordMfaVoiceChallenge();\n   * await reset.continue({ code: '123456' });\n   * ```\n   */\n  async continue(payload: ContinueOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaVoiceChallenge.screenIdentifier, 'continue'],\n    };\n\n    await new FormHandler(options).submitData({\n      ...payload,\n      action: FormActions.DEFAULT,\n    });\n  }\n\n  /**\n   * Switches to SMS verification.\n   *\n   * @param payload - Optional custom options to include with the request.\n   * @returns A promise that resolves when the action completes.\n   */\n  async switchToSms(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaVoiceChallenge.screenIdentifier, 'switchToSms'],\n    };\n\n    await new FormHandler(options).submitData({\n      ...payload,\n      action: FormActions.SWITCH_TO_SMS,\n    });\n  }\n\n  /**\n   * Resends the code via voice call.\n   *\n   * @param payload - Optional custom options to include with the request.\n   * @returns A promise that resolves when the code is resent.\n   */\n  async resendCode(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaVoiceChallenge.screenIdentifier, 'resendCode'],\n    };\n\n    await new FormHandler(options).submitData({\n      ...payload,\n      action: FormActions.RESEND_CODE,\n    });\n  }\n\n  /**\n   * Allows the user to try another MFA method.\n   *\n   * @param payload - Optional custom options to include with the request.\n   * @returns A promise that resolves when the request is submitted.\n   */\n  async tryAnotherMethod(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaVoiceChallenge.screenIdentifier, 'tryAnotherMethod'],\n    };\n\n    await new FormHandler(options).submitData({\n      ...payload,\n      action: FormActions.PICK_AUTHENTICATOR,\n    });\n  }\n}\n\nexport { ResetPasswordMfaVoiceChallengeMembers, ScreenOptions as ScreenMembersOnResetPasswordMfaVoiceChallenge, ContinueOptions };\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["ResetPasswordMfaVoiceChallenge","BaseContext","static","ScreenIds","RESET_PASSWORD_MFA_VOICE_CHALLENGE","screen","constructor","super","screenContext","this","getContext","ScreenOverride","payload","options","state","transaction","telemetry","screenIdentifier","FormHandler","submitData","action","FormActions","DEFAULT","switchToSms","SWITCH_TO_SMS","resendCode","RESEND_CODE","tryAnotherMethod","PICK_AUTHENTICATOR"],"mappings":"8RAsBqB,MAAAA,UAAuCC,EAC1DC,wBAAkCC,EAAUC,mCAC5CC,OAKA,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH,GAenC,cAAM,CAASI,GACb,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAA+BiB,iBAAkB,mBAGzD,IAAIC,EAAYL,GAASM,WAAW,IACrCP,EACHQ,OAAQC,EAAYC,UAUxB,iBAAMC,CAAYX,GAChB,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAA+BiB,iBAAkB,sBAGzD,IAAIC,EAAYL,GAASM,WAAW,IACrCP,EACHQ,OAAQC,EAAYG,gBAUxB,gBAAMC,CAAWb,GACf,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAA+BiB,iBAAkB,qBAGzD,IAAIC,EAAYL,GAASM,WAAW,IACrCP,EACHQ,OAAQC,EAAYK,cAUxB,sBAAMC,CAAiBf,GACrB,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAA+BiB,iBAAkB,2BAGzD,IAAIC,EAAYL,GAASM,WAAW,IACrCP,EACHQ,OAAQC,EAAYO"}