{"version":3,"file":"index.js","sources":["../../../../src/screens/reset-password-mfa-phone-challenge/index.ts"],"sourcesContent":["import { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  ResetPasswordMfaPhoneChallengeMembers,\n  ScreenMembersOnResetPasswordMfaPhoneChallenge as ScreenOptions,\n  ContinueOptions,\n  TryAnotherMethodOptions,\n} from '../../../interfaces/screens/reset-password-mfa-phone-challenge';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * @class ResetPasswordMfaPhoneChallenge\n * @extends {BaseContext}\n * Manages the interactions and state for the Reset Password MFA Phone Challenge screen.\n * It allows triggering the sending of verification codes via SMS or voice call and\n * provides functionality to switch to a different MFA method.\n */\nexport default class ResetPasswordMfaPhoneChallenge extends BaseContext implements ResetPasswordMfaPhoneChallengeMembers {\n  /**\n   * The unique identifier for this screen, used internally and for telemetry.\n   * @type {string}\n   */\n  static screenIdentifier: string = ScreenIds.RESET_PASSWORD_MFA_PHONE_CHALLENGE; // Use the exact screen name from context definition\n\n  /**\n   * Holds the specific screen data and properties, processed by ScreenOverride.\n   * @type {ScreenOptions}\n   */\n  screen: ScreenOptions;\n\n  /**\n   * Initializes a new instance of the `ResetPasswordMfaPhoneChallenge` class.\n   * It retrieves the screen context and sets up the screen-specific properties.\n   * @throws {Error} If the Universal Login Context is not available or if the screen name doesn't match.\n   */\n  constructor() {\n    super(); // Calls BaseContext constructor which handles context retrieval and validation\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * Sends the verification code to the user's phone via the selected method (SMS or Voice).\n   * Corresponds to the 'Continue' action in the OpenAPI definition (action: 'default').\n   *\n   * @param {ContinueOptions} payload - Contains the delivery type (`sms` or `voice`) and any optional custom data.\n   * @returns {Promise<void>} A promise resolving upon successful submission to the server.\n   * @throws {Error} If the form submission fails.\n   * @example\n   * ```typescript\n   * const screen = new ResetPasswordMfaPhoneChallenge();\n   * try {\n   *   await screen.continue({ type: 'sms' });\n   *   // Redirects to code entry screen on success\n   * } catch (error) {\n   *   console.error(\"Failed to send SMS code:\", error);\n   * }\n   * ```\n   */\n  async continue(payload: ContinueOptions): Promise<void> {\n    // Prepare options for the FormHandler\n    const formHandlerOptions: FormOptions = {\n      // The state token identifying the current transaction\n      state: this.transaction.state,\n      // Telemetry data identifying the screen and method for monitoring\n      telemetry: [ResetPasswordMfaPhoneChallenge.screenIdentifier, 'continue'],\n      // The route endpoint for this action (typically inferred if not provided)\n      // As per OpenAPI, the endpoint is /u/mfa-phone-challenge\n      route: '/u/mfa-phone-challenge',\n    };\n\n    // Construct the data payload to be sent in the form submission\n    const submitPayload = {\n      // Include any other custom options passed in the payload\n      ...payload,\n      // Set the action to 'default' as specified by the OpenAPI definition for this operation\n      action: FormActions.DEFAULT,\n    };\n\n    // Use FormHandler to submit the data via a POST request\n    await new FormHandler(formHandlerOptions).submitData(submitPayload);\n  }\n\n  /**\n   * Initiates the process for the user to select a different MFA authenticator.\n   * Corresponds to the 'Try Another Method' action in the OpenAPI definition (action: 'pick-authenticator').\n   *\n   * @param {TryAnotherMethodOptions} payload - Contains the *current* challenge type (`sms` or `voice`) as required by the API, and any optional custom data.\n   * @returns {Promise<void>} A promise resolving upon successful submission to the server.\n   * @throws {Error} If the form submission fails.\n   * @example\n   * ```typescript\n   * const screen = new ResetPasswordMfaPhoneChallenge();\n   * try {\n   *   // Assuming the current screen was for SMS\n   *   await screen.tryAnotherMethod({ type: 'sms' });\n   *   // Redirects to authenticator selection screen on success\n   * } catch (error) {\n   *   console.error(\"Failed to switch MFA method:\", error);\n   * }\n   * ```\n   */\n  async tryAnotherMethod(payload: TryAnotherMethodOptions): Promise<void> {\n    // Prepare options for the FormHandler\n    const formHandlerOptions: FormOptions = {\n      // The state token identifying the current transaction\n      state: this.transaction.state,\n      // Telemetry data identifying the screen and method\n      telemetry: [ResetPasswordMfaPhoneChallenge.screenIdentifier, 'tryAnotherMethod'],\n      // The route endpoint for this action\n      route: '/u/mfa-phone-challenge',\n    };\n\n    // Construct the data payload for the form submission\n    const submitPayload = {\n      // Include any other custom options passed in the payload\n      ...payload,\n      // Set the action to 'pick-authenticator' as specified by the OpenAPI definition\n      action: FormActions.PICK_AUTHENTICATOR,\n    };\n\n    // Use FormHandler to submit the data\n    await new FormHandler(formHandlerOptions).submitData(submitPayload);\n  }\n}\n\n// Export the members and options interfaces for external use\nexport {\n  ResetPasswordMfaPhoneChallengeMembers,\n  ScreenOptions as ScreenMembersOnResetPasswordMfaPhoneChallenge,\n  ContinueOptions,\n  TryAnotherMethodOptions,\n};\n\n// Re-export common interfaces and base properties for convenience\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["ResetPasswordMfaPhoneChallenge","BaseContext","static","ScreenIds","RESET_PASSWORD_MFA_PHONE_CHALLENGE","screen","constructor","super","screenContext","this","getContext","ScreenOverride","payload","formHandlerOptions","state","transaction","telemetry","screenIdentifier","route","submitPayload","action","FormActions","DEFAULT","FormHandler","submitData","tryAnotherMethod","PICK_AUTHENTICATOR"],"mappings":"8RAsBqB,MAAAA,UAAuCC,EAK1DC,wBAAkCC,EAAUC,mCAM5CC,OAOA,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH,GAqBnC,cAAM,CAASI,GAEb,MAAMC,EAAkC,CAEtCC,MAAOL,KAAKM,YAAYD,MAExBE,UAAW,CAAChB,EAA+BiB,iBAAkB,YAG7DC,MAAO,0BAIHC,EAAgB,IAEjBP,EAEHQ,OAAQC,EAAYC,eAIhB,IAAIC,EAAYV,GAAoBW,WAAWL,GAsBvD,sBAAMM,CAAiBb,GAErB,MAAMC,EAAkC,CAEtCC,MAAOL,KAAKM,YAAYD,MAExBE,UAAW,CAAChB,EAA+BiB,iBAAkB,oBAE7DC,MAAO,0BAIHC,EAAgB,IAEjBP,EAEHQ,OAAQC,EAAYK,0BAIhB,IAAIH,EAAYV,GAAoBW,WAAWL"}