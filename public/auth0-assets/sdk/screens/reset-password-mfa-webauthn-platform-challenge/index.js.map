{"version":3,"file":"index.js","sources":["../../../../src/screens/reset-password-mfa-webauthn-platform-challenge/index.ts"],"sourcesContent":["// packages/auth0-acul-js/src/screens/reset-password-mfa-webauthn-platform-challenge/index.ts\nimport { ScreenIds, FormActions, Errors } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\nimport { getPasskeyCredentials } from '../../utils/passkeys'; // Import the utility\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { WebAuthnErrorDetails } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  ResetPasswordMfaWebAuthnPlatformChallengeMembers,\n  ScreenMembersOnResetPasswordMfaWebAuthnPlatformChallenge as ScreenOptions,\n  ContinueWithPasskeyOptions,\n  ReportBrowserErrorOptions,\n  TryAnotherMethodOptions,\n} from '../../../interfaces/screens/reset-password-mfa-webauthn-platform-challenge';\nimport type { FormOptions as SDKFormOptions } from '../../../interfaces/utils/form-handler';\nimport type { PasskeyCredentialResponse } from '../../../interfaces/utils/passkeys';\n\n/**\n * @class ResetPasswordMfaWebAuthnPlatformChallenge\n * @extends BaseContext\n * implements ResetPasswordMfaWebAuthnPlatformChallengeMembers\n * description Manages interactions for the 'reset-password-mfa-webauthn-platform-challenge' screen.\n * This screen is part of the password reset flow and requires the user to verify their identity\n * using a WebAuthn platform authenticator (e.g., Touch ID, Windows Hello) as a second factor.\n *\n * It provides methods to:\n * - Initiate the platform authenticator verification using `navigator.credentials.get()` and submit the result (`continueWithPasskey`).\n * - Report browser-side errors encountered during the WebAuthn API interaction (`reportBrowserError`).\n * - Allow the user to choose a different MFA method (`tryAnotherMethod`).\n *\n * The SDK expects `window.universal_login_context` to be populated with the necessary data for this screen,\n * including `screen.publicKey` for the WebAuthn challenge.\n */\nexport default class ResetPasswordMfaWebAuthnPlatformChallenge\n  extends BaseContext\n  implements ResetPasswordMfaWebAuthnPlatformChallengeMembers\n{\n  /**\n   * static\n   * @property {string} screenIdentifier - The unique identifier for the 'reset-password-mfa-webauthn-platform-challenge' screen.\n   * This is used by the `BaseContext` to ensure the correct screen class is instantiated based on the\n   * `window.universal_login_context.screen.name`.\n   */\n  static screenIdentifier: string = ScreenIds.RESET_PASSWORD_MFA_WEBAUTHN_PLATFORM_CHALLENGE;\n\n  /**\n   * @property {ScreenOptions} screen - Holds the specific screen data and properties for this screen,\n   * processed by `ScreenOverride`. This includes `publicKey` (for the WebAuthn challenge)\n   * and `showRememberDevice`.\n   * @public\n   */\n  public screen: ScreenOptions;\n\n  /**\n   * Initializes a new instance of the `ResetPasswordMfaWebAuthnPlatformChallenge` class.\n   * It retrieves the necessary context (screen, transaction, etc.) from the global `universal_login_context`\n   * and sets up screen-specific properties via `ScreenOverride`.\n   * @throws {Error} If the Universal Login Context is not available or if the screen name\n   * in the context does not match `ResetPasswordMfaWebAuthnPlatformChallenge.screenIdentifier`.\n   */\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * Initiates the WebAuthn platform authenticator challenge by calling `navigator.credentials.get()`\n   * using the challenge options provided in `screen.publicKey`.\n   * If successful, it submits the resulting credential assertion to Auth0 with `action: \"default\"`.\n   *\n   * @param {ContinueWithPasskeyOptions} [options] - Optional parameters for the verification process,\n   * such as `rememberDevice` (if `screen.showRememberDevice` is true) and other custom options.\n   * @returns {Promise<void>} A promise that resolves when the verification attempt is submitted.\n   *                          A successful operation typically results in a redirect.\n   * @throws {Error} Throws an error if `screen.publicKey` is missing,\n   *                 if `navigator.credentials.get()` fails (e.g., user cancellation `NotAllowedError`),\n   *                 or if the form submission to Auth0 fails. If `navigator.credentials.get()` fails\n   *                 with a `DOMException`, it's recommended to catch that error and call `reportBrowserError`.\n   *\n   * @example\n   * ```typescript\n   * // Assuming 'sdk' is an instance of ResetPasswordMfaWebAuthnPlatformChallenge\n   * try {\n   *   await sdk.continueWithPasskey({\n   *     rememberDevice: true // if user checked the box and sdk.screen.showRememberDevice is true\n   *   });\n   *   // On success, Auth0 handles redirection.\n   * } catch (error) {\n   *   console.error(\"Platform authenticator verification failed:\", error);\n   *   // If it's a WebAuthn API error (DOMException), report it\n   *   if (error instanceof DOMException && error.name && error.message) { // DOMException check\n   *     await sdk.reportBrowserError({ error: { name: error.name, message: error.message } });\n   *   }\n   *   // Check sdk.transaction.errors for server-side validation messages if the page reloads.\n   * }\n   * ```\n   */\n  async continueWithPasskey(options?: ContinueWithPasskeyOptions): Promise<void> {\n    const publicKeyOpts = this.screen.publicKey;\n    if (!publicKeyOpts) {\n      throw new Error(Errors.PASSKEY_PUBLIC_KEY_UNAVAILABLE);\n    }\n\n    // Call navigator.credentials.get() via the utility\n    // This will throw if the API call fails or returns null.\n    const credential = await getPasskeyCredentials(publicKeyOpts);\n\n    // If credential is null (though getPasskeyCredentials should throw if it fails to get one),\n    // this is an unexpected state for this flow.\n    if (!credential) {\n      // This specific error constant might be more suited for cases where no credentials *exist*,\n      // but here it means the `get` operation didn't yield a result.\n      throw new Error(Errors.PASSKEY_CREDENTIALS_UNAVAILABLE);\n    }\n\n    const formHandlerOptions: SDKFormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaWebAuthnPlatformChallenge.screenIdentifier, 'continueWithPasskey'],\n      route: '/u/mfa-webauthn-platform-challenge', // Endpoint for this screen\n    };\n\n    const { rememberDevice, ...customSubmissionOptions } = options || {};\n\n    const payloadToSubmit: Record<string, string | number | boolean | undefined> = {\n      ...customSubmissionOptions,\n      action: FormActions.DEFAULT,\n      response: JSON.stringify(credential), // The PublicKeyCredential response as a JSON string\n    };\n\n    if (this.screen.showRememberDevice && rememberDevice) {\n      payloadToSubmit.rememberBrowser = 'true'; // Server expects 'true' as a string or boolean\n    }\n\n    await new FormHandler(formHandlerOptions).submitData(payloadToSubmit);\n  }\n\n  /**\n   * Reports a browser-side error that occurred during the `navigator.credentials.get()` API call.\n   * This is used to inform Auth0 about issues like user cancellation (`NotAllowedError`),\n   * timeout, or other WebAuthn API specific errors.\n   * It submits the error details with `action: \"showError::{errorDetailsJsonString}\"`.\n   *\n   * @param {ReportBrowserErrorOptions} options - An object containing:\n   *   - `error`: A `WebAuthnErrorDetails` object with at least `name` and `message` properties\n   *              from the `DOMException` thrown by `navigator.credentials.get()`.\n   *   - Any other `CustomOptions` to be included in the form submission.\n   * @returns {Promise<void>} A promise that resolves when the error report is successfully submitted.\n   * @throws {Error} If the form submission fails (e.g., network error, invalid state).\n   *\n   * @example\n   * ```typescript\n   * // In your UI component, in the catch block of navigator.credentials.get():\n   * // } catch (webAuthnError) {\n   * //   if (webAuthnError instanceof DOMException) {\n   * //     await sdk.reportBrowserError({\n   * //       error: { name: webAuthnError.name, message: webAuthnError.message }\n   * //     });\n   * //   } else {\n   * //     // Handle other types of errors\n   * //   }\n   * // }\n   * ```\n   */\n  async reportBrowserError(options: ReportBrowserErrorOptions): Promise<void> {\n    if (!options || !options.error || typeof options.error.name !== 'string' || typeof options.error.message !== 'string') {\n      throw new Error('The `error` property in options, with `name` and `message` strings, is required.');\n    }\n\n    const { error: errorDetails, ...customPayload } = options;\n    const formHandlerOptions: SDKFormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaWebAuthnPlatformChallenge.screenIdentifier, 'reportBrowserError'],\n      route: '/u/mfa-webauthn-platform-challenge',\n    };\n\n    const errorDetailsString = JSON.stringify(errorDetails);\n    const payloadToSubmit: Record<string, string | number | boolean | undefined> = {\n      ...customPayload,\n      action: `${FormActions.SHOW_ERROR_ACTION_PREFIX}${errorDetailsString}`,\n      response: '', // As per OpenAPI examples for showError actions\n    };\n\n    await new FormHandler(formHandlerOptions).submitData(payloadToSubmit);\n  }\n\n  /**\n   * Allows the user to opt-out of the WebAuthn platform authenticator challenge and select\n   * a different MFA method for verifying their identity during password reset.\n   * This action submits `action: \"pick-authenticator\"` to Auth0, which should navigate\n   * the user to an MFA factor selection screen.\n   *\n   * @param {TryAnotherMethodOptions} [options] - Optional. Any custom parameters to be sent with the request.\n   *                                             These will be included in the form data.\n   * @returns {Promise<void>} A promise that resolves when the 'pick-authenticator' action is submitted.\n   * @throws {Error} If the form submission fails (e.g., network error, invalid state).\n   *\n   * @example\n   * ```typescript\n   * // In your UI component, when a \"Try Another Method\" button is clicked:\n   * try {\n   *   await sdk.tryAnotherMethod();\n   *   // On success, Auth0 handles redirection to the MFA factor selection screen.\n   * } catch (error) {\n   *   console.error(\"Failed to switch MFA method:\", error);\n   * }\n   * ```\n   */\n  async tryAnotherMethod(options?: TryAnotherMethodOptions): Promise<void> {\n    const formHandlerOptions: SDKFormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaWebAuthnPlatformChallenge.screenIdentifier, 'tryAnotherMethod'],\n      route: '/u/mfa-webauthn-platform-challenge',\n    };\n\n    const payloadToSubmit: Record<string, string | number | boolean | undefined> = {\n      ...(options || {}),\n      action: FormActions.PICK_AUTHENTICATOR,\n    };\n\n    await new FormHandler(formHandlerOptions).submitData(payloadToSubmit);\n  }\n}\n\n// Export the primary class and its relevant member and options interfaces.\nexport {\n  ResetPasswordMfaWebAuthnPlatformChallengeMembers,\n  ScreenOptions as ScreenMembersOnResetPasswordMfaWebAuthnPlatformChallenge,\n  ContinueWithPasskeyOptions,\n  ReportBrowserErrorOptions,\n  TryAnotherMethodOptions,\n  WebAuthnErrorDetails,\n  PasskeyCredentialResponse,\n};\n\n// Re-export common interfaces and base properties for convenience.\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';"],"names":["ResetPasswordMfaWebAuthnPlatformChallenge","BaseContext","static","ScreenIds","RESET_PASSWORD_MFA_WEBAUTHN_PLATFORM_CHALLENGE","screen","constructor","super","screenContext","this","getContext","ScreenOverride","continueWithPasskey","options","publicKeyOpts","publicKey","Error","Errors","PASSKEY_PUBLIC_KEY_UNAVAILABLE","credential","getPasskeyCredentials","PASSKEY_CREDENTIALS_UNAVAILABLE","formHandlerOptions","state","transaction","telemetry","screenIdentifier","route","rememberDevice","customSubmissionOptions","payloadToSubmit","action","FormActions","DEFAULT","response","JSON","stringify","showRememberDevice","rememberBrowser","FormHandler","submitData","reportBrowserError","error","name","message","errorDetails","customPayload","errorDetailsString","SHOW_ERROR_ACTION_PREFIX","tryAnotherMethod","PICK_AUTHENTICATOR"],"mappings":"iZAoCqB,MAAAA,UACXC,EASRC,wBAAkCC,EAAUC,+CAQrCC,OASP,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH,GAmCnC,yBAAMI,CAAoBC,GACxB,MAAMC,EAAgBL,KAAKJ,OAAOU,UAClC,IAAKD,EACH,MAAM,IAAIE,MAAMC,EAAOC,gCAKzB,MAAMC,QAAmBC,EAAsBN,GAI/C,IAAKK,EAGH,MAAM,IAAIH,MAAMC,EAAOI,iCAGzB,MAAMC,EAAqC,CACzCC,MAAOd,KAAKe,YAAYD,MACxBE,UAAW,CAACzB,EAA0C0B,iBAAkB,uBACxEC,MAAO,uCAGHC,eAAEA,KAAmBC,GAA4BhB,GAAW,CAAE,EAE9DiB,EAAyE,IAC1ED,EACHE,OAAQC,EAAYC,QACpBC,SAAUC,KAAKC,UAAUjB,IAGvBV,KAAKJ,OAAOgC,oBAAsBT,IACpCE,EAAgBQ,gBAAkB,cAG9B,IAAIC,EAAYjB,GAAoBkB,WAAWV,GA8BvD,wBAAMW,CAAmB5B,GACvB,IAAKA,IAAYA,EAAQ6B,OAAuC,iBAAvB7B,EAAQ6B,MAAMC,MAAsD,iBAA1B9B,EAAQ6B,MAAME,QAC/F,MAAM,IAAI5B,MAAM,oFAGlB,MAAQ0B,MAAOG,KAAiBC,GAAkBjC,EAC5CS,EAAqC,CACzCC,MAAOd,KAAKe,YAAYD,MACxBE,UAAW,CAACzB,EAA0C0B,iBAAkB,sBACxEC,MAAO,sCAGHoB,EAAqBZ,KAAKC,UAAUS,GACpCf,EAAyE,IAC1EgB,EACHf,OAAQ,GAAGC,EAAYgB,2BAA2BD,IAClDb,SAAU,UAGN,IAAIK,EAAYjB,GAAoBkB,WAAWV,GAyBvD,sBAAMmB,CAAiBpC,GACrB,MAAMS,EAAqC,CACzCC,MAAOd,KAAKe,YAAYD,MACxBE,UAAW,CAACzB,EAA0C0B,iBAAkB,oBACxEC,MAAO,sCAGHG,EAAyE,IACzEjB,GAAW,CAAA,EACfkB,OAAQC,EAAYkB,0BAGhB,IAAIX,EAAYjB,GAAoBkB,WAAWV"}