{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-webauthn-roaming-enrollment/index.ts"],"sourcesContent":["import { FormActions } from '../../constants';\nimport { ScreenIds } from '../../constants/enums';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\nimport { createPasskeyCredentials } from '../../utils/passkeys';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { CustomOptions, WebAuthnErrorDetails } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  MfaWebAuthnRoamingEnrollmentMembers,\n  ShowErrorOptions,\n  TryAnotherMethodOptions,\n  ScreenMembersOnMfaWebAuthnRoamingEnrollment as ScreenOptions\n} from '../../../interfaces/screens/mfa-webauthn-roaming-enrollment';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n/**\n * Class implementing the mfa-webauthn-roaming-enrollment screen functionality.\n * This screen is displayed when a user needs to enroll a WebAuthn roaming authenticator (like a security key).\n */\nexport default class MfaWebAuthnRoamingEnrollment extends BaseContext implements MfaWebAuthnRoamingEnrollmentMembers {\n  static screenIdentifier: string = ScreenIds.MFA_WEBAUTHN_ROAMING_ENROLLMENT;\n  screen: ScreenOptions;\n  /**\n   * Creates an instance of MfaWebAuthnRoamingEnrollment screen manager.\n   */\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n  /**\n   * Initiates the WebAuthn credential creation and submits the result to the server.\n   * This corresponds to the user interacting with the FIDO Security Keys prompt.\n   * @param payload Optional custom options to include with the request.\n   * @example\n   * ```typescript\n   * import MfaWebAuthnRoamingEnrollment from '@auth0/auth0-acul-js/mfa-webauthn-roaming-enrollment';\n   *\n   * const webauthnEnrollment = new MfaWebAuthnRoamingEnrollment();\n   * // Assuming you have obtained the WebAuthn credential response (e.g., from navigator.credentials.create)\n   * const credentialResponse = { /* ... serialized credential ... *&#x2F; };\n   * await webauthnEnrollment.enroll({ response: JSON.stringify(credentialResponse) });\n   * ```\n   */\n  async enroll(payload: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaWebAuthnRoamingEnrollment.screenIdentifier, 'enroll'],\n    };\n    const publicKey = this.screen.publicKey;\n    const encoded = publicKey && (await createPasskeyCredentials(publicKey));\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      response: JSON.stringify(encoded),\n      action: FormActions.DEFAULT,\n    });\n  }\n  /**\n   * Submits details about a WebAuthn browser error to the server.\n   * This is used when the browser's WebAuthn API encounters an error.\n   * @param payload The options containing the error details.\n   * @example\n   * ```typescript\n   * import MfaWebAuthnRoamingEnrollment from '@auth0/auth0-acul-js/mfa-webauthn-roaming-enrollment';\n   *\n   * const webauthnEnrollment = new MfaWebAuthnRoamingEnrollment();\n   * await webauthnEnrollment.showError({\n   *   error: {\n   *     name: 'NotAllowedError',\n   *     message: 'The operation either timed out or was not allowed.',\n   *   },\n   * });\n   * ```\n   */\n  async showError(payload: ShowErrorOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaWebAuthnRoamingEnrollment.screenIdentifier, 'showError'],\n    };\n    const actionValue = `showError::${JSON.stringify(payload.error)}`;\n    await new FormHandler(options).submitData<Omit<ShowErrorOptions, 'error'>>({\n      ...payload,\n      action: actionValue,\n      response: '', // As per OpenAPI example\n    });\n  }\n  /**\n   * Allows the user to try another MFA method.\n   * This corresponds to the \"Try Another Method\" button.\n   * @param payload Optional custom options to include with the request.\n   * @example\n   * ```typescript\n   * import MfaWebAuthnRoamingEnrollment from '@auth0/auth0-acul-js/mfa-webauthn-roaming-enrollment';\n   *\n   * const webauthnEnrollment = new MfaWebAuthnRoamingEnrollment();\n   * await webauthnEnrollment.tryAnotherMethod();\n   * ```\n   */\n  async tryAnotherMethod(payload?: TryAnotherMethodOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaWebAuthnRoamingEnrollment.screenIdentifier, 'tryAnotherMethod'],\n    };\n    await new FormHandler(options).submitData<TryAnotherMethodOptions>({\n      ...payload,\n      action: FormActions.PICK_AUTHENTICATOR,\n    });\n  }\n}\nexport {\n  MfaWebAuthnRoamingEnrollmentMembers,\n  ShowErrorOptions,\n  TryAnotherMethodOptions,\n  ScreenOptions as ScreenMembersOnMfaWebAuthnRoamingEnrollment,\n  WebAuthnErrorDetails,\n};\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["MfaWebAuthnRoamingEnrollment","BaseContext","static","ScreenIds","MFA_WEBAUTHN_ROAMING_ENROLLMENT","screen","constructor","super","screenContext","this","getContext","ScreenOverride","enroll","payload","options","state","transaction","telemetry","screenIdentifier","publicKey","encoded","createPasskeyCredentials","FormHandler","submitData","response","JSON","stringify","action","FormActions","DEFAULT","showError","actionValue","error","tryAnotherMethod","PICK_AUTHENTICATOR"],"mappings":"iWAqBqB,MAAAA,UAAqCC,EACxDC,wBAAkCC,EAAUC,gCAC5CC,OAIA,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH,GAgBnC,YAAMI,CAAOC,GACX,MAAMC,EAAuB,CAC3BC,MAAON,KAAKO,YAAYD,MACxBE,UAAW,CAACjB,EAA6BkB,iBAAkB,WAEvDC,EAAYV,KAAKJ,OAAOc,UACxBC,EAAUD,SAAoBE,EAAyBF,SACvD,IAAIG,EAAYR,GAASS,WAA0B,IACpDV,EACHW,SAAUC,KAAKC,UAAUN,GACzBO,OAAQC,EAAYC,UAoBxB,eAAMC,CAAUjB,GACd,MAAMC,EAAuB,CAC3BC,MAAON,KAAKO,YAAYD,MACxBE,UAAW,CAACjB,EAA6BkB,iBAAkB,cAEvDa,EAAc,cAAcN,KAAKC,UAAUb,EAAQmB,eACnD,IAAIV,EAAYR,GAASS,WAA4C,IACtEV,EACHc,OAAQI,EACRP,SAAU,KAed,sBAAMS,CAAiBpB,GACrB,MAAMC,EAAuB,CAC3BC,MAAON,KAAKO,YAAYD,MACxBE,UAAW,CAACjB,EAA6BkB,iBAAkB,2BAEvD,IAAII,EAAYR,GAASS,WAAoC,IAC9DV,EACHc,OAAQC,EAAYM"}