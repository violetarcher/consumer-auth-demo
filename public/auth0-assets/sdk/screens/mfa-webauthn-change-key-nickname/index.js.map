{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-webauthn-change-key-nickname/index.ts"],"sourcesContent":["import { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  MfaWebAuthnChangeKeyNicknameMembers,\n  ScreenMembersOnMfaWebAuthnChangeKeyNickname as ScreenOptions,\n  ContinueOptions,\n} from '../../../interfaces/screens/mfa-webauthn-change-key-nickname';\nimport type { FormOptions as SDKFormOptions } from '../../../interfaces/utils/form-handler';\n\nexport default class MfaWebAuthnChangeKeyNickname extends BaseContext implements MfaWebAuthnChangeKeyNicknameMembers {\n \n  static screenIdentifier: string = ScreenIds.MFA_WEBAUTHN_CHANGE_KEY_NICKNAME;\n\n  /**\n   * Holds the specific screen data and properties for this screen,\n   * processed by `ScreenOverride`. This includes the current `nickname` of the key.\n   * @type {ScreenOptions}\n   * @public\n   */\n  public screen: ScreenOptions;\n\n  /**\n   * Initializes a new instance of the `MfaWebAuthnChangeKeyNickname` class.\n   * It retrieves the necessary context (screen, transaction, etc.) from the global\n   * `universal_login_context` and sets up screen-specific properties via `ScreenOverride`.\n   * @throws {Error} If the Universal Login Context is not available or if the screen name\n   * in the context does not match `MfaWebAuthnChangeKeyNickname.screenIdentifier`.\n   */\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * Submits the new nickname provided by the user for their WebAuthn security key.\n   * This method prepares and posts the form data, including the new `nickname` and the\n   * required `action: \"default\"`, to the `/u/mfa-webauthn-change-key-nickname` endpoint.\n   *\n   * @param {ContinueOptions} payload - An object containing the `nickname` (string)\n   *                                    entered by the user. May also contain other custom\n   *                                    parameters if needed for extensibility.\n   * @returns {Promise<void>} A promise that resolves once the form submission is initiated.\n   *                          Typically, a successful submission leads to a server-side redirect.\n   *                          If the nickname is invalid or another error occurs, the page will\n   *                          re-render, and `this.transaction.errors` will be populated with details.\n   * @throws {Error} If `payload.nickname` is missing or not a string. It can also\n   *                 throw if `FormHandler` encounters an unrecoverable issue during submission\n   *                 (e.g., network error). Auth0 validation errors (e.g., \"nickname-too-long\")\n   *                 are not thrown as JS errors but are made available in `this.transaction.errors`\n   *                 post-operation.\n   */\n  async continueWithNewNickname(payload: ContinueOptions): Promise<void> {\n    if (!payload || typeof payload.nickname !== 'string') {\n      throw new Error('The `nickname` property in the payload is required and must be a string.');\n    }\n\n    const formOptions: SDKFormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaWebAuthnChangeKeyNickname.screenIdentifier, 'continueWithNewNickname']\n    };\n\n    // Prepare the data to be submitted.\n    // The `action: \"default\"` signals the server to process the nickname change.\n    const submitPayload = {\n      ...payload, // Includes the 'nickname' and any other custom options passed in.\n      action: FormActions.DEFAULT,\n    };\n\n    // Use FormHandler to submit the data.\n    await new FormHandler(formOptions).submitData<typeof submitPayload>(submitPayload);\n  }\n}\n\n// Export all necessary types and members for this screen\nexport {\n  MfaWebAuthnChangeKeyNicknameMembers,\n  ScreenOptions as ScreenMembersOnMfaWebAuthnChangeKeyNickname,\n  ContinueOptions,\n};\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';"],"names":["MfaWebAuthnChangeKeyNickname","BaseContext","static","ScreenIds","MFA_WEBAUTHN_CHANGE_KEY_NICKNAME","screen","constructor","super","screenContext","this","getContext","ScreenOverride","continueWithNewNickname","payload","nickname","Error","formOptions","state","transaction","telemetry","screenIdentifier","submitPayload","action","FormActions","DEFAULT","FormHandler","submitData"],"mappings":"8RAcqB,MAAAA,UAAqCC,EAExDC,wBAAkCC,EAAUC,iCAQrCC,OASP,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH,GAqBnC,6BAAMI,CAAwBC,GAC5B,IAAKA,GAAuC,iBAArBA,EAAQC,SAC7B,MAAM,IAAIC,MAAM,4EAGlB,MAAMC,EAA8B,CAClCC,MAAOR,KAAKS,YAAYD,MACxBE,UAAW,CAACnB,EAA6BoB,iBAAkB,4BAKvDC,EAAgB,IACjBR,EACHS,OAAQC,EAAYC,eAIhB,IAAIC,EAAYT,GAAaU,WAAiCL"}