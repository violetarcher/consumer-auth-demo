{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-voice-challenge/index.ts"],"sourcesContent":["import { FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\nimport { UntrustedDataOverride } from './untrusted-data-overrider';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type { UntrustedDataContext } from '../../../interfaces/models/untrusted-data';\nimport type {\n  MfaVoiceChallengeMembers,\n  ScreenMembersOnMfaVoiceChallenge as ScreenOptions,\n  MfaVoiceChallengeContinueOptions,\n  UntrustedDataMembersOnMfaVoiceChallenge as UntrustedDataOptions,\n} from '../../../interfaces/screens/mfa-voice-challenge';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * MFA Voice Challenge screen implementation.\n *\n * This screen is displayed when a user needs to verify their identity using a voice call\n * as part of a multi-factor authentication flow.\n */\nexport default class MfaVoiceChallenge extends BaseContext implements MfaVoiceChallengeMembers {\n  /**\n   * Screen-specific properties and data.\n   */\n  screen: ScreenOptions;\n  untrustedData: UntrustedDataOptions;\n  /**\n   * Creates an instance of MfaVoiceChallenge.\n   */\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    const untrustedDataContext = this.getContext('untrusted_data') as UntrustedDataContext;\n    this.screen = new ScreenOverride(screenContext);\n    this.untrustedData = new UntrustedDataOverride(untrustedDataContext);\n  }\n\n  /**\n   * Submits the voice verification code to validate the MFA challenge.\n   *\n   * @param payload - Object containing the verification code and optional parameters\n   * @returns Promise that resolves when the code is successfully validated\n   *\n   * @example\n   * ```typescript\n   * const mfaVoiceChallenge = new MfaVoiceChallenge();\n   * mfaVoiceChallenge.continue({\n   *   code: '123456',\n   *   rememberDevice: true\n   * });\n   * ```\n   */\n  async continue(payload: MfaVoiceChallengeContinueOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaVoiceChallenge.screenIdentifier, 'default'],\n    };\n\n    const { rememberDevice, ...restPayload } = payload || {};\n    const submitPayload: Record<string, string | number | boolean> = { ...restPayload, action: FormActions.DEFAULT };\n\n    if (rememberDevice) {\n      submitPayload.rememberBrowser = true;\n    }\n    await new FormHandler(options).submitData(submitPayload);\n  }\n\n  /**\n   * Navigates to the screen for selecting a different phone number.\n   *\n   * @param payload - Optional custom parameters\n   * @returns Promise that resolves when navigation is complete\n   *\n   * @example\n   * ```typescript\n   * const mfaVoiceChallenge = new MfaVoiceChallenge();\n   * mfaVoiceChallenge.pickPhone();\n   * ```\n   */\n  async pickPhone(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaVoiceChallenge.screenIdentifier, 'pickPhone'],\n    };\n\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.PICK_PHONE,\n    });\n  }\n\n  /**\n   * Switches to SMS verification method instead of voice call.\n   *\n   * @param payload - Optional custom parameters\n   * @returns Promise that resolves when switching is complete\n   *\n   * @example\n   * ```typescript\n   * const mfaVoiceChallenge = new MfaVoiceChallenge();\n   * mfaVoiceChallenge.switchToSms();\n   * ```\n   */\n  async switchToSms(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaVoiceChallenge.screenIdentifier, 'switchToSms'],\n    };\n\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.SWITCH_TO_SMS,\n    });\n  }\n\n  /**\n   * Requests a new voice call with a verification code.\n   *\n   * @param payload - Optional custom parameters\n   * @returns Promise that resolves when the new code is sent\n   *\n   * @example\n   * ```typescript\n   * const mfaVoiceChallenge = new MfaVoiceChallenge();\n   * mfaVoiceChallenge.resendCode();\n   * ```\n   */\n  async resendCode(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaVoiceChallenge.screenIdentifier, 'resendCode'],\n    };\n\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.RESEND_CODE,\n    });\n  }\n\n  /**\n   * Navigates to the screen for selecting an alternative MFA method.\n   *\n   * @param payload - Optional custom parameters\n   * @returns Promise that resolves when navigation is complete\n   *\n   * @example\n   * ```typescript\n   * const mfaVoiceChallenge = new MfaVoiceChallenge();\n   * mfaVoiceChallenge.tryAnotherMethod();\n   * ```\n   */\n  async tryAnotherMethod(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaVoiceChallenge.screenIdentifier, 'pickAuthenticator'],\n    };\n\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.PICK_AUTHENTICATOR,\n    });\n  }\n}\n\nexport {\n  MfaVoiceChallengeMembers,\n  ScreenOptions as ScreenMembersOnMfaVoiceChallenge,\n  MfaVoiceChallengeContinueOptions,\n  UntrustedDataOptions as UntrustedDataMembersOnMfaVoiceChallenge,\n};\n\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["MfaVoiceChallenge","BaseContext","screen","untrustedData","constructor","super","screenContext","this","getContext","untrustedDataContext","ScreenOverride","UntrustedDataOverride","payload","options","state","transaction","telemetry","screenIdentifier","rememberDevice","restPayload","submitPayload","action","FormActions","DEFAULT","rememberBrowser","FormHandler","submitData","pickPhone","PICK_PHONE","switchToSms","SWITCH_TO_SMS","resendCode","RESEND_CODE","tryAnotherMethod","PICK_AUTHENTICATOR"],"mappings":"+SAwBqB,MAAAA,UAA0BC,EAI7CC,OACAC,cAIA,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UAChCC,EAAuBF,KAAKC,WAAW,kBAC7CD,KAAKL,OAAS,IAAIQ,EAAeJ,GACjCC,KAAKJ,cAAgB,IAAIQ,EAAsBF,GAkBjD,cAAM,CAASG,GACb,MAAMC,EAAuB,CAC3BC,MAAOP,KAAKQ,YAAYD,MACxBE,UAAW,CAAChB,EAAkBiB,iBAAkB,aAG5CC,eAAEA,KAAmBC,GAAgBP,GAAW,CAAE,EAClDQ,EAA2D,IAAKD,EAAaE,OAAQC,EAAYC,SAEnGL,IACFE,EAAcI,iBAAkB,SAE5B,IAAIC,EAAYZ,GAASa,WAAWN,GAe5C,eAAMO,CAAUf,GACd,MAAMC,EAAuB,CAC3BC,MAAOP,KAAKQ,YAAYD,MACxBE,UAAW,CAAChB,EAAkBiB,iBAAkB,oBAG5C,IAAIQ,EAAYZ,GAASa,WAA0B,IACpDd,EACHS,OAAQC,EAAYM,aAgBxB,iBAAMC,CAAYjB,GAChB,MAAMC,EAAuB,CAC3BC,MAAOP,KAAKQ,YAAYD,MACxBE,UAAW,CAAChB,EAAkBiB,iBAAkB,sBAG5C,IAAIQ,EAAYZ,GAASa,WAA0B,IACpDd,EACHS,OAAQC,EAAYQ,gBAgBxB,gBAAMC,CAAWnB,GACf,MAAMC,EAAuB,CAC3BC,MAAOP,KAAKQ,YAAYD,MACxBE,UAAW,CAAChB,EAAkBiB,iBAAkB,qBAG5C,IAAIQ,EAAYZ,GAASa,WAA0B,IACpDd,EACHS,OAAQC,EAAYU,cAgBxB,sBAAMC,CAAiBrB,GACrB,MAAMC,EAAuB,CAC3BC,MAAOP,KAAKQ,YAAYD,MACxBE,UAAW,CAAChB,EAAkBiB,iBAAkB,4BAG5C,IAAIQ,EAAYZ,GAASa,WAA0B,IACpDd,EACHS,OAAQC,EAAYY"}