{"version":3,"file":"index.js","sources":["../../../../src/screens/passkey-enrollment-local/index.ts"],"sourcesContent":["import { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\nimport { createPasskeyCredentials } from '../../utils/passkeys';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  PasskeyEnrollmentLocalMembers,\n  ScreenMembersOnPasskeyEnrollmentLocal as ScreenOptions,\n  AbortEnrollmentOptions,\n} from '../../../interfaces/screens/passkey-enrollment-local';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\nexport default class PasskeyEnrollmentLocal extends BaseContext implements PasskeyEnrollmentLocalMembers {\n  static screenIdentifier: string = ScreenIds.PASSKEY_ENROLLMENT_LOCAL;\n  screen: ScreenOptions;\n\n  constructor() {\n    super();\n\n    const screenContext = this.getContext('screen') as ScreenContext;\n\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * @example\n   * import PasskeyEnrollmentLocal from '@auth0/auth0-acul-js/passkey-enrollment-local';\n   *\n   * const passkeyEnrollment = new PasskeyEnrollmentLocal();\n   * passkeyEnrollment.continuePasskeyEnrollment();\n   */\n  async continuePasskeyEnrollment(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [PasskeyEnrollmentLocal.screenIdentifier, 'continuePasskeyEnrollment'],\n    };\n\n    const publicKey = this.screen.publicKey;\n    const encoded = publicKey && (await createPasskeyCredentials(publicKey));\n\n    await new FormHandler(options).submitData<CustomOptions>({ ...payload, passkey: JSON.stringify(encoded) });\n  }\n\n  /**\n   * @example\n   * import PasskeyEnrollmentLocal from '@auth0/auth0-acul-js/passkey-enrollment-local';\n   *\n   * const passkeyEnrollment = new PasskeyEnrollmentLocal();\n   * passkeyEnrollment.abortPasskeyEnrollment({\n   *     doNotShowAgain: <boolean>\n   * });\n   */\n  async abortPasskeyEnrollment(payload: AbortEnrollmentOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [PasskeyEnrollmentLocal.screenIdentifier, 'abortPasskeyEnrollment'],\n    };\n\n    const userActions: { [key: string]: string } = {};\n    if (payload['doNotShowAgain'] === true) {\n      userActions['dontShowAgain'] = 'on';\n    }\n    await new FormHandler(options).submitData<AbortEnrollmentOptions>({ ...payload, action: FormActions.ABORT_PASSKEY_ENROLLMENT, ...userActions });\n  }\n}\n\nexport { PasskeyEnrollmentLocalMembers, AbortEnrollmentOptions, ScreenOptions as ScreenMembersOnPasskeyEnrollmentLocal };\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["PasskeyEnrollmentLocal","BaseContext","static","ScreenIds","PASSKEY_ENROLLMENT_LOCAL","screen","constructor","super","screenContext","this","getContext","ScreenOverride","continuePasskeyEnrollment","payload","options","state","transaction","telemetry","screenIdentifier","publicKey","encoded","createPasskeyCredentials","FormHandler","submitData","passkey","JSON","stringify","abortPasskeyEnrollment","userActions","action","FormActions","ABORT_PASSKEY_ENROLLMENT"],"mappings":"iWAgBqB,MAAAA,UAA+BC,EAClDC,wBAAkCC,EAAUC,yBAC5CC,OAEA,WAAAC,GACEC,QAEA,MAAMC,EAAgBC,KAAKC,WAAW,UAEtCD,KAAKJ,OAAS,IAAIM,EAAeH,GAUnC,+BAAMI,CAA0BC,GAC9B,MAAMC,EAAuB,CAC3BC,MAAON,KAAKO,YAAYD,MACxBE,UAAW,CAACjB,EAAuBkB,iBAAkB,8BAGjDC,EAAYV,KAAKJ,OAAOc,UACxBC,EAAUD,SAAoBE,EAAyBF,SAEvD,IAAIG,EAAYR,GAASS,WAA0B,IAAKV,EAASW,QAASC,KAAKC,UAAUN,KAYjG,4BAAMO,CAAuBd,GAC3B,MAAMC,EAAuB,CAC3BC,MAAON,KAAKO,YAAYD,MACxBE,UAAW,CAACjB,EAAuBkB,iBAAkB,2BAGjDU,EAAyC,CAAE,GACf,IAA9Bf,EAAwB,iBAC1Be,EAA2B,cAAI,YAE3B,IAAIN,EAAYR,GAASS,WAAmC,IAAKV,EAASgB,OAAQC,EAAYC,4BAA6BH"}