import{FormActions as t}from"../../constants/form-actions.js";import{ScreenIds as s}from"../../constants/enums.js";import{BaseContext as e}from"../../models/base-context.js";import{FormHandler as n}from"../../utils/form-handler.js";import{createPasskeyCredentials as o}from"../../utils/passkeys.js";import{ScreenOverride as r}from"./screen-override.js";class a extends e{static screenIdentifier=s.PASSKEY_ENROLLMENT_LOCAL;screen;constructor(){super();const t=this.getContext("screen");this.screen=new r(t)}async continuePasskeyEnrollment(t){const s={state:this.transaction.state,telemetry:[a.screenIdentifier,"continuePasskeyEnrollment"]},e=this.screen.publicKey,r=e&&await o(e);await new n(s).submitData({...t,passkey:JSON.stringify(r)})}async abortPasskeyEnrollment(s){const e={state:this.transaction.state,telemetry:[a.screenIdentifier,"abortPasskeyEnrollment"]},o={};!0===s.doNotShowAgain&&(o.dontShowAgain="on"),await new n(e).submitData({...s,action:t.ABORT_PASSKEY_ENROLLMENT,...o})}}export{a as default};
//# sourceMappingURL=index.js.map
