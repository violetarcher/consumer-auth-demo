{"version":3,"file":"screen-override.js","sources":["../../../../src/screens/customized-consent/screen-override.ts"],"sourcesContent":["import { Screen } from '../../models/screen';\nimport { getScopes } from '../../shared/screen'; // Assuming getScopes is a shared utility\n\nimport type { AuthorizationDetail, Scope, ScreenContext } from '../../../interfaces/models/screen';\nimport type { ScreenMembersOnCustomizedConsent } from '../../../interfaces/screens/customized-consent';\n\n/**\n * @class ScreenOverride\n * @extends Screen\n * @implements ScreenMembersOnCustomizedConsent\n * @description Screen-specific override for the Customized Consent screen ('customized-consent').\n * This class ensures that the `screen.data` object, particularly `scopes` and `authorizationDetails`,\n * are correctly parsed and typed according to the {@link ScreenMembersOnCustomizedConsent} interface.\n */\nexport class ScreenOverride extends Screen implements ScreenMembersOnCustomizedConsent {\n  /**\n   * An array of {@link Scope} objects detailing each permission (scope) being requested.\n   * Parsed from `screenContext.data.scopes`.\n   * @type {Scope[]}\n   * @public\n   */\n  public scopes: Scope[];\n\n  /**\n   * An array of {@link AuthorizationDetail} objects detailing specific authorization requests.\n   * Parsed from `screenContext.data.authorization_details`.\n   * @type {AuthorizationDetail[]}\n   * @public\n   */\n  public authorizationDetails: AuthorizationDetail[];\n\n  /**\n   * Creates an instance of ScreenOverride for the Customized Consent screen.\n   * It initializes the `scopes` and `authorizationDetails` properties by parsing the provided `screenContext`.\n   *\n   * @param {ScreenContext} screenContext - The screen context object from the Universal Login global context,\n   * specific to the 'customized-consent' screen.\n   */\n  constructor(screenContext: ScreenContext) {\n    super(screenContext); // Call the base Screen constructor\n    this.scopes = ScreenOverride.getScopes(screenContext);\n    this.authorizationDetails = ScreenOverride.getAuthorizationDetails(screenContext);\n  }\n\n  /**\n   * @static\n   * @method getScopes\n   * @description Extracts and transforms the `scopes` array from the provided screen context.\n   * Uses a shared utility `getScopes` if available, or implements similar logic.\n   *\n   * @param {ScreenContext} screenContext - The screen context containing the raw data for the screen.\n   * @returns {Scope[]} The structured array of {@link Scope} objects.\n   * Returns an empty array if `screenContext.data.scopes` is not a valid array.\n   */\n  static getScopes = (screenContext: ScreenContext): Scope[] => {\n    // Utilize the shared getScopes function or implement specific parsing if needed\n    return getScopes(screenContext);\n  };\n\n  /**\n   * @static\n   * @method getAuthorizationDetails\n   * @description Extracts and transforms the `authorization_details` array from the provided screen context.\n   * Ensures each item in the array conforms to the {@link AuthorizationDetail} interface.\n   *\n   * @param {ScreenContext} screenContext - The screen context containing the raw data for the screen.\n   * @returns {AuthorizationDetail[]} The structured array of {@link AuthorizationDetail} objects.\n   * Returns an empty array if `screenContext.data.authorization_details` is not a valid array or if items are malformed.\n   */\n  static getAuthorizationDetails = (screenContext: ScreenContext): AuthorizationDetail[] => {\n    const rawDetails = screenContext.data?.authorization_details;\n    if (!Array.isArray(rawDetails)) {\n      return [];\n    }\n    // Filter and map to ensure each item conforms to AuthorizationDetail\n    return rawDetails\n      .filter((detail): detail is AuthorizationDetail => {\n        return (\n          typeof detail === 'object' &&\n          detail !== null &&\n          'type' in detail &&\n          typeof detail.type === 'string'\n        );\n      })\n  };\n}"],"names":["ScreenOverride","Screen","scopes","authorizationDetails","constructor","screenContext","super","this","getScopes","getAuthorizationDetails","static","rawDetails","data","authorization_details","Array","isArray","filter","detail","type"],"mappings":"mGAcM,MAAOA,UAAuBC,EAO3BC,OAQAC,qBASP,WAAAC,CAAYC,GACVC,MAAMD,GACNE,KAAKL,OAASF,EAAeQ,UAAUH,GACvCE,KAAKJ,qBAAuBH,EAAeS,wBAAwBJ,GAarEK,iBAAoBL,GAEXG,EAAUH,GAanBK,+BAAkCL,IAChC,MAAMM,EAAaN,EAAcO,MAAMC,sBACvC,OAAKC,MAAMC,QAAQJ,GAIZA,EACJK,QAAQC,GAEa,iBAAXA,GACI,OAAXA,GACA,SAAUA,GACa,iBAAhBA,EAAOC,OATX,EAWL"}