{"version":3,"file":"index.js","sources":["../../../../src/screens/customized-consent/index.ts"],"sourcesContent":["import { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { Scope, AuthorizationDetail, ScreenContext } from '../../../interfaces/models/screen';\nimport type { CustomizedConsentMembers, ScreenMembersOnCustomizedConsent } from '../../../interfaces/screens/customized-consent';\nimport type { FormOptions as SDKFormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * @class CustomizedConsent\n * @extends BaseContext\n * implements CustomizedConsentMembers\n * description Manages interactions for the \"customized-consent\" screen.\n * This screen allows users to review and consent to an application's request for\n * specific OAuth scopes and potentially more detailed authorization details (e.g., RAR).\n *\n * It provides methods to `accept` or `deny` the consent request.\n *\n * @example\n * ```typescript\n * // How to use the CustomizedConsent screen SDK:\n * import CustomizedConsent from '@auth0/auth0-acul-js/customized-consent';\n *\n * // Instantiate the manager for the customized consent screen\n * const consentManager = new CustomizedConsent();\n *\n * // Accessing screen data\n * const clientName = consentManager.client.name;\n * const userEmail = consentManager.user.email;\n * const requestedScopes = consentManager.screen.scopes;\n * const authorizationDetails = consentManager.screen.authorizationDetails;\n *\n * console.log(`${clientName} is requesting consent from ${userEmail}.`);\n * console.log(\"Requested Scopes:\", requestedScopes);\n * console.log(\"Authorization Details:\", authorizationDetails);\n *\n * // Accessing transaction errors from a previous attempt\n * const transactionErrors = consentManager.transaction.errors;\n * if (transactionErrors && transactionErrors.length > 0) {\n *   transactionErrors.forEach(error => {\n *     console.error(`Error: ${error.message}`);\n *     // Display these errors to the user.\n *   });\n * }\n *\n * // Example of handling consent acceptance\n * async function onAcceptConsent() {\n *   try {\n *     await consentManager.accept();\n *     // On success, Auth0 will typically redirect.\n *   } catch (e) {\n *     console.error('Failed to accept consent:', e);\n *   }\n * }\n *\n * // Example of handling consent denial\n * async function onDenyConsent() {\n *   try {\n *     await consentManager.deny({ denial_reason: \"user_declined\" });\n *     // On success, Auth0 will typically redirect.\n *   } catch (e) {\n *     console.error('Failed to deny consent:', e);\n *   }\n * }\n * ```\n */\nexport default class CustomizedConsent extends BaseContext implements CustomizedConsentMembers {\n  /**\n   * The unique identifier for the Customized Consent screen.\n   * This static property is used by the SDK's `BaseContext` to ensure that the\n   * class is instantiated in the correct screen context.\n   * @type {string}\n   * static\n   * @readonly\n   */\n  static screenIdentifier: string = ScreenIds.CUSTOMIZED_CONSENT;\n\n  /**\n   * Holds the specific screen data and properties for the Customized Consent screen,\n   * processed by `ScreenOverride`. This includes `scopes` and `authorizationDetails`.\n   * @type {ScreenMembersOnCustomizedConsent}\n   * @public\n   */\n  public screen: ScreenMembersOnCustomizedConsent;\n\n  /**\n   * Creates an instance of the `CustomizedConsent` screen manager.\n   * The constructor initializes the `BaseContext` and sets up the `screen` property\n   * with an instance of `ScreenOverride` tailored for the customized consent screen.\n   * @throws {Error} If the Universal Login Context is not available or if the\n   * current screen name in the context does not match `CustomizedConsent.screenIdentifier`.\n   */\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * Submits the user's decision to accept (grant) the requested permissions and authorization details.\n   * This method prepares and posts form data to the `/u/customized-consent?state=<transaction_state>` endpoint\n   * with `action: \"accept\"`. The transaction state is automatically included in both the\n   * URL query parameter and the form body.\n   *\n   * @param {CustomOptions} [payload] - Optional. An object for any custom key-value pairs\n   *                                    to be sent with the request. These parameters will be\n   *                                    included in the form data submitted to the server.\n   * @returns {Promise<void>} A promise that resolves once the form submission is initiated.\n   *                          Typically, a successful submission leads to a server-side redirect.\n   * @throws {Error} Throws an error if `FormHandler` encounters an unrecoverable issue\n   *                 during submission (e.g., network error). Server-side validation errors\n   *                 from Auth0 (like \"invalid_request\") are not thrown as JavaScript errors\n   *                 but are made available in `this.transaction.errors` after the operation.\n   */\n  async accept(payload?: CustomOptions): Promise<void> {\n    const formOptions: SDKFormOptions = {\n      state: this.transaction.state, // For form body\n      telemetry: [CustomizedConsent.screenIdentifier, 'accept'],\n    };\n    const submitPayload = {\n      ...payload,\n      action: FormActions.ACCEPT,\n    };\n    await new FormHandler(formOptions).submitData<typeof submitPayload>(submitPayload);\n  }\n\n  /**\n   * Submits the user's decision to deny (reject) the requested permissions and authorization details.\n   * This method prepares and posts form data to the `/u/customized-consent?state=<transaction_state>` endpoint\n   * with `action: \"deny\"`. The transaction state is automatically included in both the\n   * URL query parameter and the form body.\n   *\n   * @param {CustomOptions} [payload] - Optional. An object for any custom key-value pairs\n   *                                    to be sent with the request. These parameters will be\n   *                                    included in the form data submitted to the server.\n   * @returns {Promise<void>} A promise that resolves once the form submission is initiated.\n   *                          A successful submission usually results in a server-side redirect.\n   * @throws {Error} Throws an error if `FormHandler` encounters an issue (e.g., network error).\n   *                 Server-side validation errors are reflected in `this.transaction.errors`.\n   */\n  async deny(payload?: CustomOptions): Promise<void> {\n    const formOptions: SDKFormOptions = {\n      state: this.transaction.state, // For form body\n      telemetry: [CustomizedConsent.screenIdentifier, 'deny'],\n    };\n    const submitPayload = {\n      ...payload,\n      action: FormActions.DENY,\n    };\n    await new FormHandler(formOptions).submitData<typeof submitPayload>(submitPayload);\n  }\n}\n\n// Export all necessary types and members for this screen\nexport { CustomizedConsentMembers, ScreenMembersOnCustomizedConsent, Scope, AuthorizationDetail };\nexport * from '../../../interfaces/export/common'; // Re-export common types\nexport * from '../../../interfaces/export/base-properties'; // Re-export base model members"],"names":["CustomizedConsent","BaseContext","static","ScreenIds","CUSTOMIZED_CONSENT","screen","constructor","super","screenContext","this","getContext","ScreenOverride","accept","payload","formOptions","state","transaction","telemetry","screenIdentifier","submitPayload","action","FormActions","ACCEPT","FormHandler","submitData","deny","DENY"],"mappings":"8RAqEqB,MAAAA,UAA0BC,EAS7CC,wBAAkCC,EAAUC,mBAQrCC,OASP,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH,GAmBnC,YAAMI,CAAOC,GACX,MAAMC,EAA8B,CAClCC,MAAON,KAAKO,YAAYD,MACxBE,UAAW,CAACjB,EAAkBkB,iBAAkB,WAE5CC,EAAgB,IACjBN,EACHO,OAAQC,EAAYC,cAEhB,IAAIC,EAAYT,GAAaU,WAAiCL,GAiBtE,UAAMM,CAAKZ,GACT,MAAMC,EAA8B,CAClCC,MAAON,KAAKO,YAAYD,MACxBE,UAAW,CAACjB,EAAkBkB,iBAAkB,SAE5CC,EAAgB,IACjBN,EACHO,OAAQC,EAAYK,YAEhB,IAAIH,EAAYT,GAAaU,WAAiCL"}