{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-recovery-code-enrollment/index.ts"],"sourcesContent":["import { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  MfaRecoveryCodeEnrollmentContinueOptions,\n  MfaRecoveryCodeEnrollmentMembers,\n  ScreenMembersOnMfaRecoveryCodeEnrollment,\n} from '../../../interfaces/screens/mfa-recovery-code-enrollment';\n\n/**\n * Class implementing the Mfa Recovery Code Enrollment screen functionality.\n * This screen is displayed when the user needs to enroll with a recovery code for MFA.\n */\nexport default class MfaRecoveryCodeEnrollment extends BaseContext implements MfaRecoveryCodeEnrollmentMembers {\n  static screenIdentifier: string = ScreenIds.MFA_RECOVERY_CODE_ENROLLMENT;\n  screen: ScreenMembersOnMfaRecoveryCodeEnrollment;\n\n  /**\n   * Creates an instance of the MfaRecoveryCodeEnrollment screen.\n   */\n  constructor() {\n    super();\n    const screenContext: ScreenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * Declares that the user saved the recovery code.\n   * This action is triggered when the user declares that they have saved the recovery code.\n   * It redirects to the next screen in the authentication flow.\n   *\n   * @param {object} payload - An object containing any custom options.\n   *\n   * @returns {Promise<void>} A promise that resolves when the action is successfully submitted.\n   * @example\n   * ```typescript\n   * import MfaRecoveryCodeEnrollment from '@auth0/auth0-acul-js/mfa-recovery-code-enrollment';\n   * const mfaRecoveryCodeEnrollmentManager = new MfaRecoveryCodeEnrollment();\n   * const continueEnrollment = async (payload) => {\n   *  try {\n   *    await mfaRecoveryCodeEnrollmentManager.continue(payload);\n   *    console.log('Enrollment continued successfully.');\n   *  } catch (error) {\n   *    console.error('Error continuing enrollment:', error);\n   *  }\n   * };\n   * ```\n   * Rejects with an error if the submission fails.\n   */\n  async continue(payload: MfaRecoveryCodeEnrollmentContinueOptions): Promise<void> {\n    const formOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaRecoveryCodeEnrollment.screenIdentifier, FormActions.CONTINUE],\n    };\n\n    const { isCodeCopied, ...rest } = payload;\n\n    const options: Omit<MfaRecoveryCodeEnrollmentContinueOptions, 'isCodeCopied'> = {\n      ...rest,\n      ...(isCodeCopied === true ? { saved: 'on' as unknown as boolean } : {}),\n    };\n\n    await new FormHandler(formOptions).submitData<Omit<MfaRecoveryCodeEnrollmentContinueOptions, 'isCodeCopied'> & { saved?: 'string' }>(options);\n  }\n}\n\nexport { MfaRecoveryCodeEnrollmentMembers, ScreenMembersOnMfaRecoveryCodeEnrollment, MfaRecoveryCodeEnrollmentContinueOptions };\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["MfaRecoveryCodeEnrollment","BaseContext","static","ScreenIds","MFA_RECOVERY_CODE_ENROLLMENT","screen","constructor","super","screenContext","this","getContext","ScreenOverride","payload","formOptions","state","transaction","telemetry","screenIdentifier","FormActions","CONTINUE","isCodeCopied","rest","options","saved","FormHandler","submitData"],"mappings":"8RAiBqB,MAAAA,UAAkCC,EACrDC,wBAAkCC,EAAUC,6BAC5CC,OAKA,WAAAC,GACEC,QACA,MAAMC,EAA+BC,KAAKC,WAAW,UACrDD,KAAKJ,OAAS,IAAIM,EAAeH,GA0BnC,cAAM,CAASI,GACb,MAAMC,EAAc,CAClBC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAA0BiB,iBAAkBC,EAAYC,YAGhEC,aAAEA,KAAiBC,GAAST,EAE5BU,EAA0E,IAC3ED,MACkB,IAAjBD,EAAwB,CAAEG,MAAO,MAA+B,CAAA,SAGhE,IAAIC,EAAYX,GAAaY,WAAkGH"}