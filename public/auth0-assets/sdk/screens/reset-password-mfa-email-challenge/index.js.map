{"version":3,"file":"index.js","sources":["../../../../src/screens/reset-password-mfa-email-challenge/index.ts"],"sourcesContent":["import { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  ResetPasswordMfaEmailChallengeMembers,\n  ScreenMembersOnResetPasswordMfaEmailChallenge as ScreenOptions,\n  ContinueOptions,\n  ResendCodeOptions,\n  TryAnotherMethodOptions,\n} from '../../../interfaces/screens/reset-password-mfa-email-challenge';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * Class implementing the reset-password-mfa-email-challenge screen functionality\n */\nexport default class ResetPasswordMfaEmailChallenge extends BaseContext implements ResetPasswordMfaEmailChallengeMembers {\n  static screenIdentifier: string = ScreenIds.RESET_PASSWORD_MFA_EMAIL_CHALLENGE;\n  screen: ScreenOptions;\n\n  /**\n   * Creates an instance of ResetPasswordMfaEmailChallenge screen manager\n   */\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * Continues with the email challenge using the provided code.\n   * @param payload The options containing the code and rememberDevice flag.\n   * @example\n   * ```typescript\n   * import ResetPasswordMfaEmailChallenge from '@auth0/auth0-acul-js/reset-password-mfa-email-challenge';\n   *\n   * const resetPasswordMfaEmailChallenge = new ResetPasswordMfaEmailChallenge();\n   * await resetPasswordMfaEmailChallenge.continue({\n   *   code: '123456',\n   * });\n   * ```\n   */\n  async continue(payload: ContinueOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaEmailChallenge.screenIdentifier, 'continue'],\n    };\n    const submitPayload: Record<string, string | number | boolean> = { ...payload, action: 'default' };\n\n    await new FormHandler(options).submitData(submitPayload);\n  }\n\n  /**\n   * Resends the email code.\n   * @param payload Optional custom options to include with the request.\n   * @example\n   * ```typescript\n   * import ResetPasswordMfaEmailChallenge from '@auth0/auth0-acul-js/reset-password-mfa-email-challenge';\n   *\n   * const resetPasswordMfaEmailChallenge = new ResetPasswordMfaEmailChallenge();\n   * await resetPasswordMfaEmailChallenge.resendCode();\n   * ```\n   */\n  async resendCode(payload?: ResendCodeOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaEmailChallenge.screenIdentifier, 'resendCode'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({ ...payload, action: FormActions.RESEND_CODE });\n  }\n\n  /**\n   * Allows the user to try another MFA method.\n   * @param payload Optional custom options to include with the request.\n   * @example\n   * ```typescript\n   * import ResetPasswordMfaEmailChallenge from '@auth0/auth0-acul-js/reset-password-mfa-email-challenge';\n   *\n   * const resetPasswordMfaEmailChallenge = new ResetPasswordMfaEmailChallenge();\n   * await resetPasswordMfaEmailChallenge.tryAnotherMethod();\n   * ```\n   */\n  async tryAnotherMethod(payload?: TryAnotherMethodOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaEmailChallenge.screenIdentifier, 'tryAnotherMethod'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({ ...payload, action: FormActions.PICK_AUTHENTICATOR });\n  }\n}\n\nexport {\n  ResetPasswordMfaEmailChallengeMembers,\n  ContinueOptions,\n  ResendCodeOptions,\n  TryAnotherMethodOptions,\n  ScreenOptions as ScreenMembersOnResetPasswordMfaEmailChallenge,\n};\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["ResetPasswordMfaEmailChallenge","BaseContext","static","ScreenIds","RESET_PASSWORD_MFA_EMAIL_CHALLENGE","screen","constructor","super","screenContext","this","getContext","ScreenOverride","payload","options","state","transaction","telemetry","screenIdentifier","submitPayload","action","FormHandler","submitData","resendCode","FormActions","RESEND_CODE","tryAnotherMethod","PICK_AUTHENTICATOR"],"mappings":"8RAoBqB,MAAAA,UAAuCC,EAC1DC,wBAAkCC,EAAUC,mCAC5CC,OAKA,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH,GAgBnC,cAAM,CAASI,GACb,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAA+BiB,iBAAkB,aAEzDC,EAA2D,IAAKN,EAASO,OAAQ,iBAEjF,IAAIC,EAAYP,GAASQ,WAAWH,GAc5C,gBAAMI,CAAWV,GACf,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAA+BiB,iBAAkB,qBAEzD,IAAIG,EAAYP,GAASQ,WAA0B,IAAKT,EAASO,OAAQI,EAAYC,cAc7F,sBAAMC,CAAiBb,GACrB,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAA+BiB,iBAAkB,2BAEzD,IAAIG,EAAYP,GAASQ,WAA0B,IAAKT,EAASO,OAAQI,EAAYG"}