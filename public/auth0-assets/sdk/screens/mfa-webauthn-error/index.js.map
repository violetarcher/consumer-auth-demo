{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-webauthn-error/index.ts"],"sourcesContent":["import { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  MfaWebAuthnErrorMembers,\n  ScreenMembersOnMfaWebAuthnError as ScreenOptions,\n} from '../../../interfaces/screens/mfa-webauthn-error';\nimport type { FormOptions as SDKFormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * @class MfaWebAuthnError\n * @extends BaseContext\n * implements MfaWebAuthnErrorMembers\n * description Manages interactions for the MFA WebAuthn Error screen ('mfa-webauthn-error').\n * This screen is presented to the user when a WebAuthn operation (either for a platform or roaming authenticator)\n * fails during an MFA flow. It provides several recovery or alternative actions.\n */\nexport default class MfaWebAuthnError extends BaseContext implements MfaWebAuthnErrorMembers {\n  /**\n   * static\n   * @property {string} screenIdentifier - The unique identifier for the 'mfa-webauthn-error' screen.\n   */\n  static screenIdentifier: string = ScreenIds.MFA_WEBAUTHN_ERROR;\n\n  /**\n   * @property {ScreenOptions} screen - Holds the specific screen data and properties,\n   * processed by `ScreenOverride` for the MFA WebAuthn Error screen. This includes details\n   * like `errorType` and `webauthnType`.\n   */\n  public screen: ScreenOptions;\n\n  /**\n   * Initializes a new instance of the `MfaWebAuthnError` class.\n   * It retrieves the necessary context (screen, transaction, etc.) from the global `universal_login_context`.\n   * @throws {Error} If the Universal Login Context is not available or if the screen name in the context\n   * does not match `MfaWebAuthnError.screenIdentifier`.\n   */\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * Allows the user to retry the previous WebAuthn operation.\n   * This action typically redirects the user to the screen where the WebAuthn process was\n   * initially attempted (e.g., back to the MFA challenge or enrollment screen for WebAuthn).\n   *\n   * @param {CustomOptions} [payload] - Optional custom parameters to be sent with the request.\n   * @returns {Promise<void>} A promise that resolves upon successful submission of the 'tryagain' action.\n   * @throws {Error} Throws an error if the form submission fails.\n   * @example\n   * ```typescript\n   * // Assuming 'sdk' is an instance of MfaWebAuthnError\n   * await sdk.tryAgain();\n   * ```\n   */\n  async tryAgain(payload?: CustomOptions): Promise<void> {\n    const formOptions: SDKFormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaWebAuthnError.screenIdentifier, 'tryAgain'],\n    };\n    await new FormHandler(formOptions).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.TRY_AGAIN,\n    });\n  }\n\n  /**\n   * Allows the user to attempt authentication using their password, if this alternative is configured\n   * and appropriate for the current flow (e.g., if password was a prior authentication step or is a valid MFA bypass).\n   *\n   * @param {CustomOptions} [payload] - Optional custom parameters to be sent with the request.\n   * @returns {Promise<void>} A promise that resolves upon successful submission of the 'use-password' action.\n   * @throws {Error} Throws an error if the form submission fails.\n   * @example\n   * ```typescript\n   * // Assuming 'sdk' is an instance of MfaWebAuthnError\n   * await sdk.usePassword();\n   * ```\n   */\n  async usePassword(payload?: CustomOptions): Promise<void> {\n    const formOptions: SDKFormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaWebAuthnError.screenIdentifier, 'usePassword'],\n    };\n    await new FormHandler(formOptions).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.USE_PASSWORD,\n    });\n  }\n\n  /**\n   * Allows the user to choose a different Multi-Factor Authentication method.\n   * This action navigates the user to a screen where they can select from other available/enrolled MFA factors.\n   *\n   * @param {CustomOptions} [payload] - Optional custom parameters to be sent with the request.\n   * @returns {Promise<void>} A promise that resolves upon successful submission of the 'pick-authenticator' action.\n   * @throws {Error} Throws an error if the form submission fails.\n   * @example\n   * ```typescript\n   * // Assuming 'sdk' is an instance of MfaWebAuthnError\n   * await sdk.tryAnotherMethod();\n   * ```\n   */\n  async tryAnotherMethod(payload?: CustomOptions): Promise<void> {\n    const formOptions: SDKFormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaWebAuthnError.screenIdentifier, 'tryAnotherMethod'],\n    };\n    await new FormHandler(formOptions).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.PICK_AUTHENTICATOR,\n    });\n  }\n\n  /**\n   * Allows the user to decline the current WebAuthn operation (e.g., refuse to add a device during enrollment).\n   * This action signifies the user's choice not to proceed with the WebAuthn step at this time.\n   *\n   * @param {CustomOptions} [payload] - Optional custom parameters to be sent with the request.\n   * @returns {Promise<void>} A promise that resolves upon successful submission of the 'refuse-add-device' action.\n   * @throws {Error} Throws an error if the form submission fails.\n   * @example\n   * ```typescript\n   * // Assuming 'sdk' is an instance of MfaWebAuthnError\n   * await sdk.noThanks();\n   * ```\n   */\n  async noThanks(payload?: CustomOptions): Promise<void> {\n    const formOptions: SDKFormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaWebAuthnError.screenIdentifier, 'noThanks'],\n    };\n    await new FormHandler(formOptions).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.REFUSE_ADD_DEVICE,\n    });\n  }\n}\n\n// Export members and options for external use\nexport { MfaWebAuthnErrorMembers, ScreenOptions as ScreenMembersOnMfaWebAuthnError };\n// Re-export common interfaces and base properties\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';"],"names":["MfaWebAuthnError","BaseContext","static","ScreenIds","MFA_WEBAUTHN_ERROR","screen","constructor","super","screenContext","this","getContext","ScreenOverride","tryAgain","payload","formOptions","state","transaction","telemetry","screenIdentifier","FormHandler","submitData","action","FormActions","TRY_AGAIN","usePassword","USE_PASSWORD","tryAnotherMethod","PICK_AUTHENTICATOR","noThanks","REFUSE_ADD_DEVICE"],"mappings":"8RAsBqB,MAAAA,UAAyBC,EAK5CC,wBAAkCC,EAAUC,mBAOrCC,OAQP,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH,GAiBnC,cAAMI,CAASC,GACb,MAAMC,EAA8B,CAClCC,MAAON,KAAKO,YAAYD,MACxBE,UAAW,CAACjB,EAAiBkB,iBAAkB,mBAE3C,IAAIC,EAAYL,GAAaM,WAA0B,IACxDP,EACHQ,OAAQC,EAAYC,YAiBxB,iBAAMC,CAAYX,GAChB,MAAMC,EAA8B,CAClCC,MAAON,KAAKO,YAAYD,MACxBE,UAAW,CAACjB,EAAiBkB,iBAAkB,sBAE3C,IAAIC,EAAYL,GAAaM,WAA0B,IACxDP,EACHQ,OAAQC,EAAYG,eAiBxB,sBAAMC,CAAiBb,GACrB,MAAMC,EAA8B,CAClCC,MAAON,KAAKO,YAAYD,MACxBE,UAAW,CAACjB,EAAiBkB,iBAAkB,2BAE3C,IAAIC,EAAYL,GAAaM,WAA0B,IACxDP,EACHQ,OAAQC,EAAYK,qBAiBxB,cAAMC,CAASf,GACb,MAAMC,EAA8B,CAClCC,MAAON,KAAKO,YAAYD,MACxBE,UAAW,CAACjB,EAAiBkB,iBAAkB,mBAE3C,IAAIC,EAAYL,GAAaM,WAA0B,IACxDP,EACHQ,OAAQC,EAAYO"}