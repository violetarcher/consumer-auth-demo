{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-recovery-code-challenge-new-code/index.ts"],"sourcesContent":["import { FormActions, ScreenIds } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  ContinueOptions,\n  MfaRecoveryCodeChallengeNewCodeMembers,\n  ScreenMembersOnMfaRecoveryCodeChallengeNewCode,\n} from '../../../interfaces/screens/mfa-recovery-code-challenge-new-code';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * @class MfaRecoveryCodeChallengeNewCode\n * @extends BaseContext\n * implements MfaRecoveryCodeChallengeNewCodeMembers\n * description Manages the interactions and state for the 'mfa-recovery-code-challenge-new-code' screen.\n * This screen is crucial for ensuring the user securely stores their new recovery code after MFA enrollment.\n */\nexport default class MfaRecoveryCodeChallengeNewCode extends BaseContext implements MfaRecoveryCodeChallengeNewCodeMembers {\n  /**\n   * The unique identifier for this screen, used internally and for telemetry.\n   * @type {string}\n   */\n  static screenIdentifier: string = ScreenIds.MFA_RECOVERY_CODE_CHALLENGE_NEW_CODE\n\n  /**\n   * Holds the specific screen data and properties, processed by ScreenOverride.\n   * @type {ScreenMembersOnMfaRecoveryCodeChallengeNewCode}\n   */\n  screen: ScreenMembersOnMfaRecoveryCodeChallengeNewCode;\n\n  /**\n   * Initializes a new instance of the `MfaRecoveryCodeChallengeNewCode` class.\n   * It retrieves the necessary context (screen, transaction, etc.) and sets up screen-specific properties.\n   * @throws {Error} If the Universal Login Context is not available or if the screen name doesn't match.\n   */\n  constructor() {\n    super(); // Calls BaseContext constructor\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * Confirms that the user has saved the new recovery code and continues the authentication flow.\n   * This method sends a POST request to the `/u/mfa-recovery-code-challenge-new-code` endpoint\n   * with the required `state`, `action`, and `saved` parameters.\n   *\n   * @param {ContinueOptions} [payload] - Optional custom data to include with the request form body.\n   * @returns {Promise<void>} A promise that resolves when the confirmation is successfully submitted.\n   *                          On success, the browser will typically be redirected to the next step.\n   * @throws {Error} Throws an error if the form submission fails (e.g., network issue, invalid state,\n   *                 or if the server responds with a 400 error like 'no-confirmation').\n   * @example\n   * ```typescript\n   * const screenManager = new MfaRecoveryCodeChallengeNewCode();\n   * // Assuming a checkbox 'confirmSaved' is checked by the user\n   * if (confirmSaved) {\n   *   try {\n   *     await screenManager.continue({ customData: 'optionalValue' });\n   *   } catch (err) {\n   *     // Handle errors, potentially check screenManager.transaction.errors\n   *     console.error(\"Confirmation failed:\", err);\n   *   }\n   * } else {\n   *   // Prompt user to confirm saving the code\n   * }\n   * ```\n   */\n  async continue(payload?: ContinueOptions): Promise<void> {\n    // Prepare options for the FormHandler, including state and telemetry\n    const formHandlerOptions: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaRecoveryCodeChallengeNewCode.screenIdentifier, 'continue']\n    };\n\n    // Construct the data payload for the form submission\n    // 'saved' is set to 'on' as calling this method implies user confirmation.\n    // Include any custom payload properties.\n    const submitPayload = {\n      ...payload, // Spread custom options first\n      action: FormActions.DEFAULT,\n      saved: 'on', // Indicate confirmation\n    };\n\n    // Use FormHandler to submit the data via a POST request\n    await new FormHandler(formHandlerOptions).submitData<typeof submitPayload>(submitPayload);\n  }\n}\n\n// Export the members and options interfaces for external use\nexport {\n  MfaRecoveryCodeChallengeNewCodeMembers,\n  ContinueOptions,\n  ScreenMembersOnMfaRecoveryCodeChallengeNewCode,\n};\n\n// Re-export common interfaces and base properties for convenience\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';"],"names":["MfaRecoveryCodeChallengeNewCode","BaseContext","static","ScreenIds","MFA_RECOVERY_CODE_CHALLENGE_NEW_CODE","screen","constructor","super","screenContext","this","getContext","ScreenOverride","payload","formHandlerOptions","state","transaction","telemetry","screenIdentifier","submitPayload","action","FormActions","DEFAULT","saved","FormHandler","submitData"],"mappings":"8RAqBqB,MAAAA,UAAwCC,EAK3DC,wBAAkCC,EAAUC,qCAM5CC,OAOA,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH,GA6BnC,cAAM,CAASI,GAEb,MAAMC,EAAkC,CACtCC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAAgCiB,iBAAkB,aAM1DC,EAAgB,IACjBN,EACHO,OAAQC,EAAYC,QACpBC,MAAO,YAIH,IAAIC,EAAYV,GAAoBW,WAAiCN"}