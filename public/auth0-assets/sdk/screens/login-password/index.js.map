{"version":3,"file":"index.js","sources":["../../../../src/screens/login-password/index.ts"],"sourcesContent":["import { ScreenIds } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\nimport { TransactionOverride } from './transaction-override';\n\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type { TransactionContext } from '../../../interfaces/models/transaction';\nimport type {\n  ScreenMembersOnLoginPassword as ScreenOptions,\n  LoginPasswordOptions,\n  LoginPasswordMembers,\n  FederatedLoginOptions,\n  TransactionMembersOnLoginPassword as TransactionOptions,\n} from '../../../interfaces/screens/login-password';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\nexport default class LoginPassword extends BaseContext implements LoginPasswordMembers {\n  static screenIdentifier: string = ScreenIds.LOGIN_PASSWORD;\n  screen: ScreenOptions;\n  transaction: TransactionOptions;\n\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    const transactionContext = this.getContext('transaction') as TransactionContext;\n\n    this.screen = new ScreenOverride(screenContext);\n    this.transaction = new TransactionOverride(transactionContext);\n  }\n  /**\n   * @remarks\n   * This methods handles login-password related configuration.\n   *\n   * @example\n   * import LoginPassword from \"@auth0/auth0-acul-js/login-password\";\n   *\n   * const loginPasswordManager = new LoginPassword();\n   * loginPasswordManager.login({\n   *  username: \"testUser\",\n   *  password: \"******\"\n   * });\n   */\n  async login(payload: LoginPasswordOptions): Promise<void> {\n    const options: FormOptions = { state: this.transaction.state, telemetry: [LoginPassword.screenIdentifier, 'login'] };\n    await new FormHandler(options).submitData<LoginPasswordOptions>(payload);\n  }\n\n  /**\n     * @example\n     * import LoginPassword from \"@auth0/auth0-acul-js/login-id\";\n     * const loginIdManager = new LoginPassword();\n     *\n     * // Check if alternateConnections is available and has at least one item\n     * if (!loginIdManager.transaction.alternateConnections) {\n     *   console.error('No alternate connections available.');\n     * }\n     *\n     * // Select the first available connection (users can select any available connection)\n     * const selectedConnection = alternateConnections[0];\n     *\n     * // Log the chosen connection for debugging or informational purposes\n     * console.log(`Selected connection: ${selectedConnection.name}`);\n     *\n     * // Proceed with federated login using the selected connection\n     * loginIdManager.federatedLogin({\n     *   connection: selectedConnection.name,\n     * });\n     */\n  async federatedLogin(payload: FederatedLoginOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [LoginPassword.screenIdentifier, 'federatedLogin'],\n    };\n\n    await new FormHandler(options).submitData<FederatedLoginOptions>(payload);\n  }\n}\n\nexport {\n  LoginPasswordMembers,\n  LoginPasswordOptions,\n  FederatedLoginOptions,\n  ScreenOptions as ScreenMembersOnLoginPassword,\n  TransactionOptions as TransactionMembersOnLoginPassword,\n};\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["LoginPassword","BaseContext","static","ScreenIds","LOGIN_PASSWORD","screen","transaction","constructor","super","screenContext","this","getContext","transactionContext","ScreenOverride","TransactionOverride","login","payload","options","state","telemetry","screenIdentifier","FormHandler","submitData","federatedLogin"],"mappings":"gSAkBqB,MAAAA,UAAsBC,EACzCC,wBAAkCC,EAAUC,eAC5CC,OACAC,YAEA,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UAChCC,EAAqBF,KAAKC,WAAW,eAE3CD,KAAKL,OAAS,IAAIQ,EAAeJ,GACjCC,KAAKJ,YAAc,IAAIQ,EAAoBF,GAe7C,WAAMG,CAAMC,GACV,MAAMC,EAAuB,CAAEC,MAAOR,KAAKJ,YAAYY,MAAOC,UAAW,CAACnB,EAAcoB,iBAAkB,gBACpG,IAAIC,EAAYJ,GAASK,WAAiCN,GAwBlE,oBAAMO,CAAeP,GACnB,MAAMC,EAAuB,CAC3BC,MAAOR,KAAKJ,YAAYY,MACxBC,UAAW,CAACnB,EAAcoB,iBAAkB,yBAGxC,IAAIC,EAAYJ,GAASK,WAAkCN"}