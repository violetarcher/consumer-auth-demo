{"version":3,"file":"index.js","sources":["../../../../src/screens/login/index.ts"],"sourcesContent":["import { ScreenIds } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\nimport { TransactionOverride } from './transaction-override';\n\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type { TransactionContext } from '../../../interfaces/models/transaction';\nimport type {\n  ScreenMembersOnLogin as ScreenOptions,\n  LoginOptions,\n  LoginMembers,\n  TransactionMembersOnLogin as TransactionOptions,\n  FederatedLoginOptions,\n} from '../../../interfaces/screens/login';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * Login screen implementation class\n */\nexport default class Login extends BaseContext implements LoginMembers {\n  static screenIdentifier: string = ScreenIds.LOGIN;\n  screen: ScreenOptions;\n  transaction: TransactionOptions;\n\n  /**\n   * Creates an instance of Login screen manager\n   */\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    const transactionContext = this.getContext('transaction') as TransactionContext;\n    this.screen = new ScreenOverride(screenContext);\n    this.transaction = new TransactionOverride(transactionContext);\n  }\n\n  /**\n   * Performs login with username/password\n   * @param payload The login options containing username and password\n   * @example\n   * ```typescript\n   * import Login from \"@auth0/auth0-acul-js/login\";\n   * const loginManager = new Login();\n   * loginManager.login({\n   *   username: \"testUser\",\n   *   password: \"testPassword\"\n   * });\n   * ```\n   */\n  async login(payload: LoginOptions): Promise<void> {\n    const options: FormOptions = { state: this.transaction.state, telemetry: [Login.screenIdentifier, 'login'] };\n    await new FormHandler(options).submitData<LoginOptions>(payload);\n  }\n\n  /**\n   * Performs login with social provider\n   * @param payload The social login options containing connection name\n   * @example\n   * ```typescript\n   * import Login from \"@auth0/auth0-acul-js/login\";\n   * const loginManager = new Login();\n   * loginManager.federatedLogin({\n   *   connection: \"google-oauth2\"\n   * });\n   * ```\n   */\n  async federatedLogin(payload: FederatedLoginOptions): Promise<void> {\n    const options: FormOptions = { state: this.transaction.state, telemetry: [Login.screenIdentifier, 'federatedLogin'] };\n    await new FormHandler(options).submitData<FederatedLoginOptions>(payload);\n  }\n}\n\nexport { LoginMembers, LoginOptions, FederatedLoginOptions, ScreenOptions as ScreenMembersOnLogin, TransactionOptions as TransactionMembersOnLogin };\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["Login","BaseContext","static","ScreenIds","LOGIN","screen","transaction","constructor","super","screenContext","this","getContext","transactionContext","ScreenOverride","TransactionOverride","login","payload","options","state","telemetry","screenIdentifier","FormHandler","submitData","federatedLogin"],"mappings":"gSAqBqB,MAAAA,UAAcC,EACjCC,wBAAkCC,EAAUC,MAC5CC,OACAC,YAKA,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UAChCC,EAAqBF,KAAKC,WAAW,eAC3CD,KAAKL,OAAS,IAAIQ,EAAeJ,GACjCC,KAAKJ,YAAc,IAAIQ,EAAoBF,GAgB7C,WAAMG,CAAMC,GACV,MAAMC,EAAuB,CAAEC,MAAOR,KAAKJ,YAAYY,MAAOC,UAAW,CAACnB,EAAMoB,iBAAkB,gBAC5F,IAAIC,EAAYJ,GAASK,WAAyBN,GAe1D,oBAAMO,CAAeP,GACnB,MAAMC,EAAuB,CAAEC,MAAOR,KAAKJ,YAAYY,MAAOC,UAAW,CAACnB,EAAMoB,iBAAkB,yBAC5F,IAAIC,EAAYJ,GAASK,WAAkCN"}