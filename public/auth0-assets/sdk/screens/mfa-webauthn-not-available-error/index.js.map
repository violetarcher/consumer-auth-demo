{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-webauthn-not-available-error/index.ts"],"sourcesContent":["import { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\n// No ScreenOverride is needed as this screen uses the base ScreenMembers\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { MfaWebAuthnNotAvailableErrorMembers } from '../../../interfaces/screens/mfa-webauthn-not-available-error';\nimport type { FormOptions as SDKFormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * @class MfaWebAuthnNotAvailableError\n * @extends BaseContext\n * implements MfaWebAuthnNotAvailableErrorMembers\n * description Manages interactions for the 'mfa-webauthn-not-available-error' screen.\n * This screen is displayed if a user attempts to use WebAuthn for MFA but their browser/device\n * does not support it or no compatible authenticator is found. The primary action is to allow\n * the user to select an alternative MFA method.\n */\nexport default class MfaWebAuthnNotAvailableError extends BaseContext implements MfaWebAuthnNotAvailableErrorMembers {\n  /**\n   * static\n   * @property {string} screenIdentifier - The unique identifier for the 'mfa-webauthn-not-available-error' screen.\n   */\n  static screenIdentifier: string = ScreenIds.MFA_WEBAUTHN_NOT_AVAILABLE_ERROR;\n\n  /**\n   * Initializes a new instance of the `MfaWebAuthnNotAvailableError` class.\n   * It retrieves the necessary context (screen, transaction, etc.) from the global `universal_login_context`.\n   * @throws {Error} If the Universal Login Context is not available or if the screen name in the context\n   * does not match `MfaWebAuthnNotAvailableError.screenIdentifier`.\n   */\n  constructor() {\n    super();\n    // The base BaseContext constructor handles screen property initialization using the base Screen model,\n    // as MfaWebAuthnNotAvailableErrorMembers.screen is of type ScreenMembers (not a specialized one).\n  }\n\n  /**\n   * Allows the user to select a different Multi-Factor Authentication method because WebAuthn\n   * is not available or supported on their current device/browser.\n   * This action navigates the user to a screen where they can choose from other available/enrolled MFA factors.\n   *\n   * @param {CustomOptions} [payload] - Optional custom parameters to be sent with the request.\n   * @returns {Promise<void>} A promise that resolves upon successful submission of the 'pick-authenticator' action.\n   * @throws {Error} Throws an error if the form submission fails (e.g., network issues, server-side validation errors).\n   * @example\n   * ```typescript\n   * // Assuming 'sdk' is an instance of MfaWebAuthnNotAvailableError\n   * try {\n   *   await sdk.tryAnotherMethod();\n   *   // On success, Auth0 typically handles redirection to the MFA factor selection screen.\n   * } catch (error) {\n   *   console.error('Failed to initiate \"try another method\":', error);\n   *   // Update UI to inform the user about the failure to switch methods.\n   * }\n   * ```\n   */\n  async tryAnotherMethod(payload?: CustomOptions): Promise<void> {\n    const formOptions: SDKFormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaWebAuthnNotAvailableError.screenIdentifier, 'tryAnotherMethod'],\n      route: '/u/mfa-webauthn-enrollment', // As per provided OpenAPI spec\n    };\n    await new FormHandler(formOptions).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.PICK_AUTHENTICATOR,\n    });\n  }\n}\n\n// Export members for external use\nexport { MfaWebAuthnNotAvailableErrorMembers };\n// Re-export common interfaces and base properties\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';"],"names":["MfaWebAuthnNotAvailableError","BaseContext","static","ScreenIds","MFA_WEBAUTHN_NOT_AVAILABLE_ERROR","constructor","super","tryAnotherMethod","payload","formOptions","state","this","transaction","telemetry","screenIdentifier","route","FormHandler","submitData","action","FormActions","PICK_AUTHENTICATOR"],"mappings":"wOAkBqB,MAAAA,UAAqCC,EAKxDC,wBAAkCC,EAAUC,iCAQ5C,WAAAC,GACEC,QAyBF,sBAAMC,CAAiBC,GACrB,MAAMC,EAA8B,CAClCC,MAAOC,KAAKC,YAAYF,MACxBG,UAAW,CAACb,EAA6Bc,iBAAkB,oBAC3DC,MAAO,oCAEH,IAAIC,EAAYP,GAAaQ,WAA0B,IACxDT,EACHU,OAAQC,EAAYC"}