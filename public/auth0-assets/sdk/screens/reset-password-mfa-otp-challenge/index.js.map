{"version":3,"file":"index.js","sources":["../../../../src/screens/reset-password-mfa-otp-challenge/index.ts"],"sourcesContent":["import { FormActions } from '../../../src/constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type {\n  ResetPasswordMfaOtpChallengeMembers,\n  ContinueOptions,\n  TryAnotherMethodOptions,\n} from '../../../interfaces/screens/reset-password-mfa-otp-challenge';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * Class implementing the reset-password-mfa-otp-challenge screen functionality\n */\nexport default class ResetPasswordMfaOtpChallenge extends BaseContext implements ResetPasswordMfaOtpChallengeMembers {\n  /**\n   * Creates an instance of ResetPasswordMfaOtpChallenge screen manager\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Continues with the OTP challenge using the provided code.\n   * @param payload The options containing the code.\n   * @example\n   * ```typescript\n   * import ResetPasswordMfaOtpChallenge from '@auth0/auth0-acul-js/reset-password-mfa-otp-challenge';\n   *\n   * const resetPasswordMfaOtpChallenge = new ResetPasswordMfaOtpChallenge();\n   * await resetPasswordMfaOtpChallenge.continue({\n   *   code: '123456',\n   * });\n   * ```\n   */\n  async continue(payload: ContinueOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaOtpChallenge.screenIdentifier, 'continue'],\n    };\n    await new FormHandler(options).submitData<ContinueOptions>({\n      ...payload,\n      action: FormActions.DEFAULT,\n    });\n  }\n\n  /**\n   * Allows the user to try another MFA method.\n   * @param payload Optional custom options to include with the request.\n   * @example\n   * ```typescript\n   * import ResetPasswordMfaOtpChallenge from '@auth0/auth0-acul-js/reset-password-mfa-otp-challenge';\n   *\n   * const resetPasswordMfaOtpChallenge = new ResetPasswordMfaOtpChallenge();\n   * await resetPasswordMfaOtpChallenge.tryAnotherMethod();\n   * ```\n   */\n  async tryAnotherMethod(payload?: TryAnotherMethodOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaOtpChallenge.screenIdentifier, 'continue'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.PICK_AUTHENTICATOR,\n    });\n  }\n}\n\nexport { ResetPasswordMfaOtpChallengeMembers, ContinueOptions, TryAnotherMethodOptions };\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["ResetPasswordMfaOtpChallenge","BaseContext","constructor","super","payload","options","state","this","transaction","telemetry","screenIdentifier","FormHandler","submitData","action","FormActions","DEFAULT","tryAnotherMethod","PICK_AUTHENTICATOR"],"mappings":"mLAeqB,MAAAA,UAAqCC,EAIxD,WAAAC,GACEC,QAgBF,cAAM,CAASC,GACb,MAAMC,EAAuB,CAC3BC,MAAOC,KAAKC,YAAYF,MACxBG,UAAW,CAACT,EAA6BU,iBAAkB,mBAEvD,IAAIC,EAAYN,GAASO,WAA4B,IACtDR,EACHS,OAAQC,EAAYC,UAexB,sBAAMC,CAAiBZ,GACrB,MAAMC,EAAuB,CAC3BC,MAAOC,KAAKC,YAAYF,MACxBG,UAAW,CAACT,EAA6BU,iBAAkB,mBAEvD,IAAIC,EAAYN,GAASO,WAA0B,IACpDR,EACHS,OAAQC,EAAYG"}