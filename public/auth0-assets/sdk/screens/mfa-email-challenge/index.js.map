{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-email-challenge/index.ts"],"sourcesContent":["import { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\nimport { UntrustedDataOverride } from './untrusted-data-overrider';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type { UntrustedDataContext } from '../../../interfaces/models/untrusted-data';\nimport type {\n  MfaEmailChallengeMembers,\n  ContinueOptions,\n  ResendCodeOptions,\n  TryAnotherMethodOptions,\n  ScreenMembersOnMfaEmailChallenge as ScreenOptions,\n  UntrustedDataMembersOnMfaEmailChallenge as UntrustedDataOptions,\n} from '../../../interfaces/screens/mfa-email-challenge';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * Class implementing the mfa-email-challenge screen functionality\n * This screen is shown when a user needs to verify their email during MFA\n */\nexport default class MfaEmailChallenge extends BaseContext implements MfaEmailChallengeMembers {\n  static screenIdentifier: string = ScreenIds.MFA_EMAIL_CHALLENGE;\n  screen: ScreenOptions;\n  untrustedData: UntrustedDataOptions;\n\n  /**\n   * Creates an instance of MfaEmailChallenge screen manager\n   */\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    const untrustedDataContext = this.getContext('untrusted_data') as UntrustedDataContext;\n    this.screen = new ScreenOverride(screenContext);\n    this.untrustedData = new UntrustedDataOverride(untrustedDataContext);\n  }\n\n  /**\n   * Continues with the email challenge using the provided code\n   * @param payload The options containing the code and rememberDevice flag\n   * @example\n   * ```typescript\n   * import MfaEmailChallenge from '@auth0/auth0-acul-js/mfa-email-challenge';\n   *\n   * const mfaEmailChallenge = new MfaEmailChallenge();\n   * await mfaEmailChallenge.continue({\n   *   code: '123456',\n   *   rememberDevice: true\n   * });\n   * ```\n   */\n  async continue(payload: ContinueOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaEmailChallenge.screenIdentifier, 'continue'],\n    };\n    const { rememberDevice = false, ...restPayload } = payload || {};\n    const submitPayload: Record<string, string | number | boolean> = { ...restPayload, action: FormActions.DEFAULT };\n    if (rememberDevice) {\n      submitPayload.rememberBrowser = true;\n    }\n    await new FormHandler(options).submitData(submitPayload);\n  }\n\n  /**\n   * Resends the email code\n   * @param payload Optional custom options to include with the request\n   * @example\n   * ```typescript\n   * import MfaEmailChallenge from '@auth0/auth0-acul-js/mfa-email-challenge';\n   *\n   * const mfaEmailChallenge = new MfaEmailChallenge();\n   * await mfaEmailChallenge.resendCode();\n   * ```\n   */\n  async resendCode(payload?: ResendCodeOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaEmailChallenge.screenIdentifier, 'resendCode'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.RESEND_CODE,\n    });\n  }\n\n  /**\n   * Allows the user to try another MFA method\n   * @param payload Optional custom options to include with the request\n   * @example\n   * ```typescript\n   * import MfaEmailChallenge from '@auth0/auth0-acul-js/mfa-email-challenge';\n   *\n   * const mfaEmailChallenge = new MfaEmailChallenge();\n   * await mfaEmailChallenge.tryAnotherMethod();\n   * ```\n   */\n  async tryAnotherMethod(payload?: TryAnotherMethodOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaEmailChallenge.screenIdentifier, 'tryAnotherMethod'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.PICK_AUTHENTICATOR,\n    });\n  }\n\n  /**\n   * Submits the action to pick a different Email configuration, if available.\n   * @param {CustomOptions} [payload] - Optional payload.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import MfaEmailChallenge from '@auth0/auth0-acul-js/mfa-email-challenge';\n   *\n   * const mfaEmailChallenge = new MfaEmailChallenge();\n   * await mfaEmailChallenge.pickEmail();\n   * ```\n   */\n  async pickEmail(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaEmailChallenge.screenIdentifier, 'pickEmail'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({ ...payload, action: FormActions.PICK_EMAIL });\n  }\n}\n\nexport {\n  MfaEmailChallengeMembers,\n  ContinueOptions,\n  ResendCodeOptions,\n  TryAnotherMethodOptions,\n  ScreenOptions as ScreenMembersOnMfaEmailChallenge,\n  UntrustedDataOptions as UntrustedDataMembersOnMfaEmailChallenge,\n};\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["MfaEmailChallenge","BaseContext","static","ScreenIds","MFA_EMAIL_CHALLENGE","screen","untrustedData","constructor","super","screenContext","this","getContext","untrustedDataContext","ScreenOverride","UntrustedDataOverride","payload","options","state","transaction","telemetry","screenIdentifier","rememberDevice","restPayload","submitPayload","action","FormActions","DEFAULT","rememberBrowser","FormHandler","submitData","resendCode","RESEND_CODE","tryAnotherMethod","PICK_AUTHENTICATOR","pickEmail","PICK_EMAIL"],"mappings":"oWAwBqB,MAAAA,UAA0BC,EAC7CC,wBAAkCC,EAAUC,oBAC5CC,OACAC,cAKA,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UAChCC,EAAuBF,KAAKC,WAAW,kBAC7CD,KAAKL,OAAS,IAAIQ,EAAeJ,GACjCC,KAAKJ,cAAgB,IAAIQ,EAAsBF,GAiBjD,cAAM,CAASG,GACb,MAAMC,EAAuB,CAC3BC,MAAOP,KAAKQ,YAAYD,MACxBE,UAAW,CAACnB,EAAkBoB,iBAAkB,cAE5CC,eAAEA,GAAiB,KAAUC,GAAgBP,GAAW,CAAE,EAC1DQ,EAA2D,IAAKD,EAAaE,OAAQC,EAAYC,SACnGL,IACFE,EAAcI,iBAAkB,SAE5B,IAAIC,EAAYZ,GAASa,WAAWN,GAc5C,gBAAMO,CAAWf,GACf,MAAMC,EAAuB,CAC3BC,MAAOP,KAAKQ,YAAYD,MACxBE,UAAW,CAACnB,EAAkBoB,iBAAkB,qBAE5C,IAAIQ,EAAYZ,GAASa,WAA0B,IACpDd,EACHS,OAAQC,EAAYM,cAexB,sBAAMC,CAAiBjB,GACrB,MAAMC,EAAuB,CAC3BC,MAAOP,KAAKQ,YAAYD,MACxBE,UAAW,CAACnB,EAAkBoB,iBAAkB,2BAE5C,IAAIQ,EAAYZ,GAASa,WAA0B,IACpDd,EACHS,OAAQC,EAAYQ,qBAgBxB,eAAMC,CAAUnB,GACd,MAAMC,EAAuB,CAC3BC,MAAOP,KAAKQ,YAAYD,MACxBE,UAAW,CAACnB,EAAkBoB,iBAAkB,oBAE5C,IAAIQ,EAAYZ,GAASa,WAA0B,IAAKd,EAASS,OAAQC,EAAYU"}