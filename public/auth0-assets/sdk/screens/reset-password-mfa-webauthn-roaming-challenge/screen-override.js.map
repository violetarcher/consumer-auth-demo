{"version":3,"file":"screen-override.js","sources":["../../../../src/screens/reset-password-mfa-webauthn-roaming-challenge/screen-override.ts"],"sourcesContent":["import { Screen } from '../../models/screen';\nimport { getPublicKey, getShowRememberDevice } from '../../shared/screen';\n\nimport type { PasskeyRead, ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  ScreenMembersOnResetPasswordMfaWebAuthnRoamingChallenge as OverrideOptions,\n} from '../../../interfaces/screens/reset-password-mfa-webauthn-roaming-challenge';\n\n/**\n * @class ScreenOverride\n * @extends Screen\n * @implements OverrideOptions\n * @description Provides specific data accessors for the 'reset-password-mfa-webauthn-roaming-challenge' screen context.\n * It ensures that `passkey` (containing WebAuthn challenge options) and `show_remember_device`\n * are correctly typed and easily accessible.\n */\nexport class ScreenOverride extends Screen implements OverrideOptions {\n\n  /**\n   * A convenience accessor for `this.data.passkey.public_key`.\n   * Provides the challenge and related options for `navigator.credentials.get()`.\n   * It is `null` if the `passkey.public_key` data is not available in the screen context.\n   * @type {PasskeyRead['public_key'] | null}\n   * @public\n   */\n  public publicKey: PasskeyRead['public_key'] | null;\n\n  /**\n   * A convenience accessor for `this.data.show_remember_device`.\n   * Indicates if the \"Remember this device\" option should be displayed to the user.\n   * Defaults to `false` if not present in the screen context data.\n   * @type {boolean}\n   * @public\n   */\n  public showRememberDevice: boolean;\n\n  /**\n   * Initializes a new instance of the `ScreenOverride` class for the 'reset-password-mfa-webauthn-roaming-challenge' screen.\n   * Parses the screen context to extract `passkey` data and the `show_remember_device` flag.\n   *\n   * @param {ScreenContext} screenContext - The screen context object provided by Universal Login\n   * for the 'reset-password-mfa-webauthn-roaming-challenge' screen.\n   */\n  constructor(screenContext: ScreenContext) {\n    super(screenContext); // Initialize the base Screen class\n    this.publicKey = ScreenOverride.getPublicKey(screenContext);\n    this.showRememberDevice = ScreenOverride.getShowRememberDevice(screenContext)\n  }\n\n  static getPublicKey = (screenContext: ScreenContext): OverrideOptions['publicKey'] => {\n    return getPublicKey(screenContext) as OverrideOptions['publicKey'];\n  };\n\n  static getShowRememberDevice = (screenContext: ScreenContext): boolean => {\n    return getShowRememberDevice(screenContext)\n  }\n}"],"names":["ScreenOverride","Screen","publicKey","showRememberDevice","constructor","screenContext","super","this","getPublicKey","getShowRememberDevice","static"],"mappings":"iIAgBM,MAAOA,UAAuBC,EAS3BC,UASAC,mBASP,WAAAC,CAAYC,GACVC,MAAMD,GACNE,KAAKL,UAAYF,EAAeQ,aAAaH,GAC7CE,KAAKJ,mBAAqBH,EAAeS,sBAAsBJ,GAGjEK,oBAAuBL,GACdG,EAAaH,GAGtBK,6BAAgCL,GACvBI,EAAsBJ"}