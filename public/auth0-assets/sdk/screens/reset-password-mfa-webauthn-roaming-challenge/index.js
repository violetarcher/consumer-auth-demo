import{FormActions as e}from"../../constants/form-actions.js";import{ScreenIds as t}from"../../constants/enums.js";import{Errors as r}from"../../constants/errors.js";import{BaseContext as s}from"../../models/base-context.js";import{FormHandler as o}from"../../utils/form-handler.js";import{getPasskeyCredentials as n}from"../../utils/passkeys.js";import{ScreenOverride as i}from"./screen-override.js";class a extends s{static screenIdentifier=t.RESET_PASSWORD_MFA_WEBAUTHN_ROAMING_CHALLENGE;screen;constructor(){super();const e=this.getContext("screen");this.screen=new i(e)}async useSecurityKey(t){const s=this.screen.publicKey;if(!s)throw new Error(r.PASSKEY_PUBLIC_KEY_UNAVAILABLE);const i=await n(s);if(!i)throw new Error(r.PASSKEY_CREDENTIALS_UNAVAILABLE);const c={state:this.transaction.state,telemetry:[a.screenIdentifier,"useSecurityKey"],route:"/u/mfa-webauthn-challenge"},{rememberDevice:m,...h}=t||{},u={...h,action:e.DEFAULT,response:JSON.stringify(i)};this.screen.showRememberDevice&&m&&(u.rememberBrowser=!0),await new o(c).submitData(u)}async showError(t){const{error:r,rememberDevice:s,...n}=t,i={state:this.transaction.state,telemetry:[a.screenIdentifier,"showError"],route:"/u/mfa-webauthn-challenge"},c={name:r.name,message:r.message};void 0!==r.code&&(c.code=r.code);const m=JSON.stringify(c),h={...n,action:`${e.SHOW_ERROR_ACTION_PREFIX}${m}`,response:""};this.screen.showRememberDevice&&s&&(h.rememberBrowser=!0),await new o(i).submitData(h)}async tryAnotherMethod(t){const r={state:this.transaction.state,telemetry:[a.screenIdentifier,"tryAnotherMethod"],route:"/u/mfa-webauthn-challenge"},{rememberDevice:s,...n}=t||{},i={...n,action:e.PICK_AUTHENTICATOR};this.screen.showRememberDevice&&s&&(i.rememberBrowser=!0),await new o(r).submitData(i)}}export{a as default};
//# sourceMappingURL=index.js.map
