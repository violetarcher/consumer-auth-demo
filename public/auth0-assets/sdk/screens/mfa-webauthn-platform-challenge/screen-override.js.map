{"version":3,"file":"screen-override.js","sources":["../../../../src/screens/mfa-webauthn-platform-challenge/screen-override.ts"],"sourcesContent":["import { Screen } from '../../models/screen';\nimport { getPublicKey, getShowRememberDevice } from '../../shared/screen';\n\n\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type { ScreenMembersOnMfaWebAuthnPlatformChallenge as OverrideOptions } from '../../../interfaces/screens/mfa-webauthn-platform-challenge';\n\n/**\n * @class ScreenOverride\n * @extends Screen\n * @implements OverrideOptions\n * @description Provides specific data accessors for the 'mfa-webauthn-platform-challenge' screen context.\n * It ensures that `publicKey` (for `navigator.credentials.get()`) and `showRememberDevice`\n * are correctly typed and accessible from the screen's data.\n */\nexport class ScreenOverride extends Screen implements OverrideOptions {\n  /**\n   * @property {PasskeyRead['public_key'] | null} publicKey - The challenge options required for\n   * `navigator.credentials.get()`. Extracted from `screenContext.data.passkey.public_key`.\n   */\n  public publicKey: OverrideOptions['publicKey'];\n\n  /**\n   * @property {boolean} showRememberDevice - Flag indicating whether the \"Remember this device\"\n   * option should be shown to the user. Extracted from `screenContext.data.show_remember_device`.\n   * Defaults to `false` if not present.\n   */\n  public showRememberDevice: OverrideOptions['showRememberDevice'];\n\n  /**\n   * Initializes a new instance of the `ScreenOverride` class for the 'mfa-webauthn-platform-challenge' screen.\n   * Parses the screen context to extract `publicKey` and `showRememberDevice`.\n   * @param {ScreenContext} screenContext - The screen context provided by Universal Login.\n   */\n  constructor(screenContext: ScreenContext) {\n    super(screenContext); // Initialize the base Screen class\n    this.publicKey = ScreenOverride.getPublicKey(screenContext);\n    this.showRememberDevice = ScreenOverride.getShowRememberDevice(screenContext);\n  }\n\n  /**\n   * @static\n   * @method getPublicKey\n   * @description Extracts the `public_key` (specifically the challenge and related options for `navigator.credentials.get()`)\n   * from the screen context's `data.passkey` object.\n   * @param {ScreenContext} screenContext - The screen context containing the raw data.\n   * @returns {PasskeyRead['public_key'] | null} The `public_key` object or `null` if not found or invalid.\n   */\n  static getPublicKey = (screenContext: ScreenContext): OverrideOptions['publicKey'] => {\n    return getPublicKey(screenContext) as OverrideOptions['publicKey'];\n  };\n\n  /**\n   * @static\n   * @method getShowRememberDevice\n   * @description Extracts the `show_remember_device` flag from the screen context's `data` object.\n   * @param {ScreenContext} screenContext - The screen context containing the raw data.\n   * @returns {boolean} The value of `show_remember_device`, or `false` if not present or not a boolean.\n   */\n  static getShowRememberDevice = (screenContext: ScreenContext): OverrideOptions['showRememberDevice'] => {\n    return getShowRememberDevice(screenContext)\n  };\n}"],"names":["ScreenOverride","Screen","publicKey","showRememberDevice","constructor","screenContext","super","this","getPublicKey","getShowRememberDevice","static"],"mappings":"iIAeM,MAAOA,UAAuBC,EAK3BC,UAOAC,mBAOP,WAAAC,CAAYC,GACVC,MAAMD,GACNE,KAAKL,UAAYF,EAAeQ,aAAaH,GAC7CE,KAAKJ,mBAAqBH,EAAeS,sBAAsBJ,GAWjEK,oBAAuBL,GACdG,EAAaH,GAUtBK,6BAAgCL,GACvBI,EAAsBJ"}