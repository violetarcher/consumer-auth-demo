import{FormActions as e}from"../../constants/form-actions.js";import{ScreenIds as t}from"../../constants/enums.js";import{Errors as r}from"../../constants/errors.js";import{BaseContext as s}from"../../models/base-context.js";import{FormHandler as o}from"../../utils/form-handler.js";import{getPasskeyCredentials as n}from"../../utils/passkeys.js";import{ScreenOverride as i}from"./screen-override.js";class a extends s{static screenIdentifier=t.MFA_WEBAUTHN_PLATFORM_CHALLENGE;screen;constructor(){super();const e=this.getContext("screen");this.screen=new i(e)}async verify(t){const s=this.screen.publicKey;if(!s)throw new Error(r.PASSKEY_PUBLIC_KEY_UNAVAILABLE);const i=await n(s);if(!i)throw new Error(r.PASSKEY_CREDENTIALS_UNAVAILABLE);const c={state:this.transaction.state,telemetry:[a.screenIdentifier,"verify"]},{rememberDevice:m,...f}=t||{},A={...f,action:e.DEFAULT,response:JSON.stringify(i)};this.screen.showRememberDevice&&m&&(A.rememberBrowser=!0),await new o(c).submitData(A)}async reportBrowserError(t){const{error:r,...s}=t,n={state:this.transaction.state,telemetry:[a.screenIdentifier,"reportBrowserError"]},i=JSON.stringify(r);await new o(n).submitData({...s,action:`${e.SHOW_ERROR_ACTION_PREFIX}${i}`,response:""})}async tryAnotherMethod(t){const r={state:this.transaction.state,telemetry:[a.screenIdentifier,"tryAnotherMethod"]};await new o(r).submitData({...t||{},action:e.PICK_AUTHENTICATOR})}}export{a as default};
//# sourceMappingURL=index.js.map
