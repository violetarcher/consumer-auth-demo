{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-webauthn-platform-challenge/index.ts"],"sourcesContent":["import { ScreenIds, FormActions, Errors } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\nimport { getPasskeyCredentials } from '../../utils/passkeys'; // This utility can be used for `navigator.credentials.get()`\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { CustomOptions, WebAuthnErrorDetails } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  MfaWebAuthnPlatformChallengeMembers,\n  ScreenMembersOnMfaWebAuthnPlatformChallenge as ScreenOptions,\n  VerifyPlatformAuthenticatorOptions,\n  ReportBrowserErrorOptions,\n  TryAnotherMethodOptions,\n} from '../../../interfaces/screens/mfa-webauthn-platform-challenge';\nimport type { FormOptions as SDKFormOptions } from '../../../interfaces/utils/form-handler';\nimport type { PasskeyCredentialResponse } from '../../../interfaces/utils/passkeys';\n\n/**\n * @class MfaWebAuthnPlatformChallenge\n * @extends BaseContext\n * implements MfaWebAuthnPlatformChallengeMembers\n * description Manages interactions for the MFA WebAuthn Platform Challenge screen.\n * This screen prompts the user to use their device's platform authenticator.\n * It handles the WebAuthn `navigator.credentials.get()` API call, submission of the\n * resulting credential, reporting browser-side WebAuthn errors, and an option\n * to try a different MFA method.\n */\nexport default class MfaWebAuthnPlatformChallenge extends BaseContext implements MfaWebAuthnPlatformChallengeMembers {\n  /**\n   * static\n   * @property {string} screenIdentifier - The unique identifier for the 'mfa-webauthn-platform-challenge' screen.\n   * Used by `BaseContext` to ensure the correct screen class is instantiated.\n   */\n  static screenIdentifier: string = ScreenIds.MFA_WEBAUTHN_PLATFORM_CHALLENGE;\n\n  /**\n   * @property {ScreenOptions} screen - Holds the specific screen data and properties for this screen,\n   * processed by `ScreenOverride`. This includes `publicKey` for the WebAuthn API call\n   * and `showRememberDevice`.\n   */\n  public screen: ScreenOptions;\n\n  /**\n   * Initializes a new instance of the `MfaWebAuthnPlatformChallenge` class.\n   * It retrieves the necessary context (screen, transaction, etc.) from the global `universal_login_context`.\n   * @throws {Error} If the Universal Login Context is not available or if the screen name\n   * in the context does not match `MfaWebAuthnPlatformChallenge.screenIdentifier`.\n   */\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * Initiates the WebAuthn platform authenticator challenge.\n   * Internally, this method retrieves the challenge options from `this.screen.publicKey`,\n   * calls `navigator.credentials.get()` (via the `getPasskeyCredentials` utility),\n   * and then submits the resulting credential assertion to the Auth0 server.\n   *\n   * @param {VerifyPlatformAuthenticatorOptions} [options] - Optional parameters for the verification.\n   * This can include `rememberDevice` if `this.screen.showRememberDevice` is true,\n   * and any other custom key-value pairs to be sent in the form submission.\n   * @returns {Promise<void>} A promise that resolves when the credential submission is initiated.\n   * A successful operation typically results in a server-side redirect.\n   * @throws {Error} Throws an error if `this.screen.publicKey` is not available (indicating missing challenge options),\n   * if `getPasskeyCredentials` (and thus `navigator.credentials.get()`) fails (e.g., user cancellation,\n   * no authenticator found, hardware error), or if the final form submission to Auth0 fails.\n   * It's crucial to catch errors from this method. WebAuthn API errors (like `NotAllowedError`)\n   * should ideally be reported using `this.reportBrowserError()`.\n   */\n  async verify(options?: VerifyPlatformAuthenticatorOptions): Promise<void> {\n    const publicKeyOpts = this.screen.publicKey;\n    if (!publicKeyOpts) {\n      throw new Error(Errors.PASSKEY_PUBLIC_KEY_UNAVAILABLE);\n    }\n\n    // `getPasskeyCredentials` calls `navigator.credentials.get()` and processes the response.\n    // It will throw if `navigator.credentials.get()` fails or returns null.\n    const credential = await getPasskeyCredentials(publicKeyOpts);\n\n    // If credential is null (though getPasskeyCredentials should throw if it fails to get one),\n    // this is an unexpected state.\n    if (!credential) {\n      throw new Error(Errors.PASSKEY_CREDENTIALS_UNAVAILABLE); // Or a more specific error\n    }\n\n    const formOptions: SDKFormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaWebAuthnPlatformChallenge.screenIdentifier, 'verify']\n    };\n\n    const { rememberDevice, ...customSubmissionOptions } = options || {};\n    const payloadToSubmit: CustomOptions & { action: string; response: string; rememberBrowser?: boolean } = {\n      ...customSubmissionOptions,\n      action: FormActions.DEFAULT,\n      response: JSON.stringify(credential), // The PublicKeyCredential response as a JSON string\n    };\n\n    if (this.screen.showRememberDevice && rememberDevice) {\n      payloadToSubmit.rememberBrowser = true;\n    }\n\n    await new FormHandler(formOptions).submitData(payloadToSubmit);\n  }\n\n  /**\n   * Reports a browser-side error encountered during the WebAuthn `navigator.credentials.get()` operation.\n   * This method should be called when `verify()` fails due to a WebAuthn API error (e.g., user cancellation).\n   * It sends the error details to the server with a specific action format.\n   *\n   * @param {ReportBrowserErrorOptions} options - Contains the `error` object (with `name` and `message`\n   * properties from the browser's WebAuthn API DOMException) and any other custom options.\n   * The `error` object will be JSON stringified and embedded in the `action` parameter.\n   * @returns {Promise<void>} A promise that resolves when the error report is successfully submitted.\n   * @throws {Error} Throws an error if the form submission fails (e.g., network issue, invalid state).\n   */\n  async reportBrowserError(options: ReportBrowserErrorOptions): Promise<void> {\n    const { error: errorDetails, ...customPayload } = options;\n\n    const formOptions: SDKFormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaWebAuthnPlatformChallenge.screenIdentifier, 'reportBrowserError']\n    };\n\n    // Sanitize errorDetails to include only known and safe properties if necessary,\n    // though WebAuthnErrorDetails interface already limits it to name, message, and custom string/number/boolean.\n    const errorDetailsString = JSON.stringify(errorDetails);\n\n    await new FormHandler(formOptions).submitData({\n      ...customPayload, // Spread any other custom key-value pairs from the 'options' object\n      action: `${FormActions.SHOW_ERROR_ACTION_PREFIX}${errorDetailsString}`,\n      response: '', // As per OpenAPI examples for showError actions\n    });\n  }\n\n  /**\n   * Allows the user to opt-out of the WebAuthn platform challenge and select a different MFA method.\n   * This action submits `action: \"pick-authenticator\"` to Auth0, which should navigate\n   * the user to an MFA factor selection screen.\n   *\n   * @param {TryAnotherMethodOptions} [options] - Optional. Any custom parameters to be sent with the request.\n   * @returns {Promise<void>} A promise that resolves when the 'pick-authenticator' action is submitted.\n   * @throws {Error} Throws an error if the form submission fails (e.g., network error, invalid state).\n   */\n  async tryAnotherMethod(options?: TryAnotherMethodOptions): Promise<void> {\n    const formOptions: SDKFormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaWebAuthnPlatformChallenge.screenIdentifier, 'tryAnotherMethod']\n    };\n\n    await new FormHandler(formOptions).submitData({\n      ...(options || {}), // Spread all properties from the options object\n      action: FormActions.PICK_AUTHENTICATOR,\n    });\n  }\n}\n\n// Export the primary class and its relevant member and options interfaces.\nexport {\n  MfaWebAuthnPlatformChallengeMembers,\n  ScreenOptions as ScreenMembersOnMfaWebAuthnPlatformChallenge,\n  VerifyPlatformAuthenticatorOptions,\n  ReportBrowserErrorOptions,\n  TryAnotherMethodOptions,\n  WebAuthnErrorDetails, // Re-export for convenience\n  PasskeyCredentialResponse, // Re-export for understanding the structure of `verify`'s internal result\n};\n\n// Re-export common interfaces and base properties for convenience with this screen.\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';"],"names":["MfaWebAuthnPlatformChallenge","BaseContext","static","ScreenIds","MFA_WEBAUTHN_PLATFORM_CHALLENGE","screen","constructor","super","screenContext","this","getContext","ScreenOverride","verify","options","publicKeyOpts","publicKey","Error","Errors","PASSKEY_PUBLIC_KEY_UNAVAILABLE","credential","getPasskeyCredentials","PASSKEY_CREDENTIALS_UNAVAILABLE","formOptions","state","transaction","telemetry","screenIdentifier","rememberDevice","customSubmissionOptions","payloadToSubmit","action","FormActions","DEFAULT","response","JSON","stringify","showRememberDevice","rememberBrowser","FormHandler","submitData","reportBrowserError","error","errorDetails","customPayload","errorDetailsString","SHOW_ERROR_ACTION_PREFIX","tryAnotherMethod","PICK_AUTHENTICATOR"],"mappings":"iZA6BqB,MAAAA,UAAqCC,EAMxDC,wBAAkCC,EAAUC,gCAOrCC,OAQP,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH,GAoBnC,YAAMI,CAAOC,GACX,MAAMC,EAAgBL,KAAKJ,OAAOU,UAClC,IAAKD,EACH,MAAM,IAAIE,MAAMC,EAAOC,gCAKzB,MAAMC,QAAmBC,EAAsBN,GAI/C,IAAKK,EACH,MAAM,IAAIH,MAAMC,EAAOI,iCAGzB,MAAMC,EAA8B,CAClCC,MAAOd,KAAKe,YAAYD,MACxBE,UAAW,CAACzB,EAA6B0B,iBAAkB,YAGvDC,eAAEA,KAAmBC,GAA4Bf,GAAW,CAAE,EAC9DgB,EAAmG,IACpGD,EACHE,OAAQC,EAAYC,QACpBC,SAAUC,KAAKC,UAAUhB,IAGvBV,KAAKJ,OAAO+B,oBAAsBT,IACpCE,EAAgBQ,iBAAkB,SAG9B,IAAIC,EAAYhB,GAAaiB,WAAWV,GAchD,wBAAMW,CAAmB3B,GACvB,MAAQ4B,MAAOC,KAAiBC,GAAkB9B,EAE5CS,EAA8B,CAClCC,MAAOd,KAAKe,YAAYD,MACxBE,UAAW,CAACzB,EAA6B0B,iBAAkB,uBAKvDkB,EAAqBV,KAAKC,UAAUO,SAEpC,IAAIJ,EAAYhB,GAAaiB,WAAW,IACzCI,EACHb,OAAQ,GAAGC,EAAYc,2BAA2BD,IAClDX,SAAU,KAad,sBAAMa,CAAiBjC,GACrB,MAAMS,EAA8B,CAClCC,MAAOd,KAAKe,YAAYD,MACxBE,UAAW,CAACzB,EAA6B0B,iBAAkB,2BAGvD,IAAIY,EAAYhB,GAAaiB,WAAW,IACxC1B,GAAW,CAAA,EACfiB,OAAQC,EAAYgB"}