{"version":3,"file":"index.js","sources":["../../../../src/screens/reset-password-mfa-sms-challenge/index.ts"],"sourcesContent":["import { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  ResetPasswordMfaSmsChallengeMembers,\n  MfaSmsChallengeOptions,\n  ScreenMembersOnResetPasswordMfaSmsChallenge as ScreenOptions,\n} from '../../../interfaces/screens/reset-password-mfa-sms-challenge';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * This class provides methods to handle the reset-password-mfa-sms-challenge screen.\n * @extends BaseContext\n */\nexport default class ResetPasswordMfaSmsChallenge extends BaseContext implements ResetPasswordMfaSmsChallengeMembers {\n  static screenIdentifier: string = ScreenIds.RESET_PASSWORD_MFA_SMS_CHALLENGE;\n  screen: ScreenOptions;\n\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * Submits the MFA SMS challenge with the provided code.\n   * @param {MfaSmsChallengeOptions} payload - The payload containing the code.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import ResetPasswordMfaSmsChallenge from '@auth0/auth0-acul-js/reset-password-mfa-sms-challenge';\n   *\n   * const resetPasswordMfaSmsChallenge = new ResetPasswordMfaSmsChallenge();\n   * await resetPasswordMfaSmsChallenge.continueMfaSmsChallenge({\n   *   code: '123456',\n   * });\n   * ```\n   */\n  async continueMfaSmsChallenge(payload: MfaSmsChallengeOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaSmsChallenge.screenIdentifier, 'continueMfaSmsChallenge'],\n    };\n    const submitPayload: Record<string, string | number | boolean> = { ...payload, action: 'default' };\n    await new FormHandler(options).submitData(submitPayload);\n  }\n\n  /**\n   * Submits the action to resend the SMS code.\n   * @param {CustomOptions} [payload] - Optional payload.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import ResetPasswordMfaSmsChallenge from '@auth0/auth0-acul-js/reset-password-mfa-sms-challenge';\n   *\n   * const resetPasswordMfaSmsChallenge = new ResetPasswordMfaSmsChallenge();\n   * await resetPasswordMfaSmsChallenge.resendCode();\n   * ```\n   */\n  async resendCode(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaSmsChallenge.screenIdentifier, 'resendCode'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({ ...payload, action: FormActions.RESEND_CODE });\n  }\n\n  /**\n   * Submits the action to try another MFA method.\n   * @param {CustomOptions} [payload] - Optional payload.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import ResetPasswordMfaSmsChallenge from '@auth0/auth0-acul-js/reset-password-mfa-sms-challenge';\n   *\n   * const resetPasswordMfaSmsChallenge = new ResetPasswordMfaSmsChallenge();\n   * await resetPasswordMfaSmsChallenge.tryAnotherMethod();\n   * ```\n   */\n  async tryAnotherMethod(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaSmsChallenge.screenIdentifier, 'tryAnotherMethod'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({ ...payload, action: FormActions.PICK_AUTHENTICATOR });\n  }\n\n  /**\n   * Submits the action to switch to voice call verification.\n   * @param {CustomOptions} [payload] - Optional payload.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import ResetPasswordMfaSmsChallenge from '@auth0/auth0-acul-js/reset-password-mfa-sms-challenge';\n   *\n   * const resetPasswordMfaSmsChallenge = new ResetPasswordMfaSmsChallenge();\n   * await resetPasswordMfaSmsChallenge.getACall();\n   * ```\n   */\n  async getACall(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaSmsChallenge.screenIdentifier, 'getACall'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({ ...payload, action: FormActions.SWITCH_TO_VOICE });\n  }\n}\n\nexport { ResetPasswordMfaSmsChallengeMembers, MfaSmsChallengeOptions, ScreenOptions as ScreenMembersOnResetPasswordMfaSmsChallenge };\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["ResetPasswordMfaSmsChallenge","BaseContext","static","ScreenIds","RESET_PASSWORD_MFA_SMS_CHALLENGE","screen","constructor","super","screenContext","this","getContext","ScreenOverride","continueMfaSmsChallenge","payload","options","state","transaction","telemetry","screenIdentifier","submitPayload","action","FormHandler","submitData","resendCode","FormActions","RESEND_CODE","tryAnotherMethod","PICK_AUTHENTICATOR","getACall","SWITCH_TO_VOICE"],"mappings":"8RAmBqB,MAAAA,UAAqCC,EACxDC,wBAAkCC,EAAUC,iCAC5CC,OAEA,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH,GAiBnC,6BAAMI,CAAwBC,GAC5B,MAAMC,EAAuB,CAC3BC,MAAON,KAAKO,YAAYD,MACxBE,UAAW,CAACjB,EAA6BkB,iBAAkB,4BAEvDC,EAA2D,IAAKN,EAASO,OAAQ,iBACjF,IAAIC,EAAYP,GAASQ,WAAWH,GAe5C,gBAAMI,CAAWV,GACf,MAAMC,EAAuB,CAC3BC,MAAON,KAAKO,YAAYD,MACxBE,UAAW,CAACjB,EAA6BkB,iBAAkB,qBAEvD,IAAIG,EAAYP,GAASQ,WAA0B,IAAKT,EAASO,OAAQI,EAAYC,cAe7F,sBAAMC,CAAiBb,GACrB,MAAMC,EAAuB,CAC3BC,MAAON,KAAKO,YAAYD,MACxBE,UAAW,CAACjB,EAA6BkB,iBAAkB,2BAEvD,IAAIG,EAAYP,GAASQ,WAA0B,IAAKT,EAASO,OAAQI,EAAYG,qBAe7F,cAAMC,CAASf,GACb,MAAMC,EAAuB,CAC3BC,MAAON,KAAKO,YAAYD,MACxBE,UAAW,CAACjB,EAA6BkB,iBAAkB,mBAEvD,IAAIG,EAAYP,GAASQ,WAA0B,IAAKT,EAASO,OAAQI,EAAYK"}