{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-otp-enrollment-code/index.ts"],"sourcesContent":["import { FormActions } from '../../../src/constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  MfaOtpEnrollmentCodeMembers,\n  ContinueOptions,\n  TryAnotherMethodOptions,\n  ScreenMembersOnMfaOtpEnrollmentCode as ScreenOptions,\n} from '../../../interfaces/screens/mfa-otp-enrollment-code';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * Class implementing the mfa-otp-enrollment-code screen functionality.\n * This screen is displayed when the user needs to enter the OTP code received during MFA enrollment.\n */\nexport default class MfaOtpEnrollmentCode extends BaseContext implements MfaOtpEnrollmentCodeMembers {\n  /**\n   * The screen properties for the mfa-otp-enrollment-code screen.\n   */\n  screen: ScreenOptions;\n\n  /**\n   * Creates an instance of MfaOtpEnrollmentCode.\n   */\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * Continues the MFA OTP enrollment process by submitting the OTP code.\n   *\n   * @param {ContinueOptions} payload - The options containing the OTP code.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import MfaOtpEnrollmentCode from '@auth0/auth0-acul-js/mfa-otp-enrollment-code';\n   *\n   * const mfaOtpEnrollmentCode = new MfaOtpEnrollmentCode();\n   * await mfaOtpEnrollmentCode.continue({\n   *   code: '123456',\n   * });\n   * ```\n   */\n  async continue(payload: ContinueOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaOtpEnrollmentCode.screenIdentifier, 'continue'],\n    };\n    await new FormHandler(options).submitData<ContinueOptions>({\n      ...payload,\n      action: FormActions.DEFAULT,\n    });\n  }\n\n  /**\n   * Allows the user to try another MFA method.\n   *\n   * @param {TryAnotherMethodOptions} [payload] - Optional payload.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import MfaOtpEnrollmentCode from '@auth0/auth0-acul-js/mfa-otp-enrollment-code';\n   *\n   * const mfaOtpEnrollmentCode = new MfaOtpEnrollmentCode();\n   * await mfaOtpEnrollmentCode.tryAnotherMethod();\n   * ```\n   */\n  async tryAnotherMethod(payload?: TryAnotherMethodOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaOtpEnrollmentCode.screenIdentifier, 'tryAnotherMethod'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.PICK_AUTHENTICATOR,\n    });\n  }\n}\n\nexport { MfaOtpEnrollmentCodeMembers, ContinueOptions, TryAnotherMethodOptions, ScreenOptions as ScreenMembersOnMfaOtpEnrollmentCode };\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["MfaOtpEnrollmentCode","BaseContext","screen","constructor","super","screenContext","this","getContext","ScreenOverride","payload","options","state","transaction","telemetry","screenIdentifier","FormHandler","submitData","action","FormActions","DEFAULT","tryAnotherMethod","PICK_AUTHENTICATOR"],"mappings":"yOAoBqB,MAAAA,UAA6BC,EAIhDC,OAKA,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH,GAkBnC,cAAM,CAASI,GACb,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAACb,EAAqBc,iBAAkB,mBAE/C,IAAIC,EAAYL,GAASM,WAA4B,IACtDP,EACHQ,OAAQC,EAAYC,UAiBxB,sBAAMC,CAAiBX,GACrB,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAACb,EAAqBc,iBAAkB,2BAE/C,IAAIC,EAAYL,GAASM,WAA0B,IACpDP,EACHQ,OAAQC,EAAYG"}