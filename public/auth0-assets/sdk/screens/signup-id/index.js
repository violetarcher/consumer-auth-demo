import{ScreenIds as t}from"../../constants/enums.js";import{BaseContext as e}from"../../models/base-context.js";import{getBrowserCapabilities as s}from"../../utils/browser-capabilities.js";import{FormHandler as n}from"../../utils/form-handler.js";import{ScreenOverride as r}from"./screen-override.js";import{TransactionOverride as i}from"./transaction-override.js";class a extends e{static screenIdentifier=t.SIGNUP_ID;screen;transaction;constructor(){super();const t=this.getContext("screen"),e=this.getContext("transaction");this.screen=new r(t),this.transaction=new i(e)}async signup(t){const e={state:this.transaction.state,telemetry:[a.screenIdentifier,"signup"]},r=(this.transaction.requiredIdentifiers||[]).filter((e=>!Object.keys(t).includes(e)));if(r.length)throw new Error(`Missing parameter(s): ${r.join(", ")}`);if(t.phone?.trim()){const{phone:e,...s}=t;t={...s,phone_number:e}}const i=await s();await new n(e).submitData({...t,...i})}async federatedSignup(t){const e={state:this.transaction.state,telemetry:[a.screenIdentifier,"federatedSignup"]};await new n(e).submitData(t)}}export{a as default};
//# sourceMappingURL=index.js.map
