{"version":3,"file":"index.js","sources":["../../../../src/screens/consent/index.ts"],"sourcesContent":["import { Scope } from '../../../interfaces/models/screen';\nimport { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type { ConsentMembers, ScreenMembersOnConsent } from '../../../interfaces/screens/consent';\nimport type { FormOptions as SDKFormOptions } from '../../../interfaces/utils/form-handler';\n\nexport default class Consent extends BaseContext implements ConsentMembers {\n  static screenIdentifier: string = ScreenIds.CONSENT;\n\n  /**\n   * Holds the specific screen data and properties for the Consent screen,\n   * processed by `ScreenOverride`. This includes the list of `scopes` being requested\n   * and the `hideScopes` flag.\n   * @type {ScreenMembersOnConsent}\n   * @public\n   */\n  public screen: ScreenMembersOnConsent;\n\n  /**\n   * Creates an instance of the `Consent` screen manager.\n   * The constructor initializes the `BaseContext` and sets up the `screen` property\n   * with an instance of `ScreenOverride` tailored for the consent screen.\n   * @throws {Error} If the Universal Login Context is not available or if the\n   * current screen name in the context does not match `Consent.screenIdentifier`.\n   */\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * Submits the user's decision to accept (grant) the requested permissions.\n   * This method prepares and posts form data to the `/u/consent?state=<transaction_state>` endpoint\n   * with `action: \"accept\"`. The transaction state is automatically included in both the\n   * URL query parameter and the form body.\n   *\n   * @param {CustomOptions} [payload] - Optional. An object for any custom key-value pairs\n   *                                    to be sent with the request. These parameters will be\n   *                                    included in the form data submitted to the server.\n   * @returns {Promise<void>} A promise that resolves once the form submission is initiated.\n   *                          Typically, a successful submission leads to a server-side redirect.\n   * @throws {Error} Throws an error if `FormHandler` encounters an unrecoverable issue\n   *                 during submission (e.g., network error). Server-side validation errors\n   *                 from Auth0 (like \"invalid_request\") are not thrown as JavaScript errors\n   *                 but are made available in `this.transaction.errors` after the operation.\n   * @example\n   * ```typescript\n   * import Consent from '@auth0/auth0-acul-js/consent';\n   * const consentManager = new Consent();\n   * const handleAccept = async () => {\n   *  try {\n   *    await consentManager.accept();\n   *    console.log('Consent accepted successfully.');\n   *  } catch (err) {\n   *    console.error('Error accepting consent:', err);\n   *  }\n   * };\n   * ```\n   */\n  async accept(payload?: CustomOptions): Promise<void> {\n    const formOptions: SDKFormOptions = {\n      state: this.transaction.state, // For form body\n      telemetry: [Consent.screenIdentifier, 'accept']\n    };\n\n    const submitPayload = {\n      ...payload,\n      action: FormActions.ACCEPT,\n    };\n\n    await new FormHandler(formOptions).submitData<typeof submitPayload>(submitPayload);\n  }\n\n  /**\n   * Submits the user's decision to deny (reject) the requested permissions.\n   * This method prepares and posts form data to the `/u/consent?state=<transaction_state>` endpoint\n   * with `action: \"deny\"`. The transaction state is automatically included in both the\n   * URL query parameter and the form body.\n   *\n   * @param {CustomOptions} [payload] - Optional. An object for any custom key-value pairs\n   *                                    to be sent with the request. These parameters will be\n   *                                    included in the form data submitted to the server.\n   * @returns {Promise<void>} A promise that resolves once the form submission is initiated.\n   *                          A successful submission usually results in a server-side redirect.\n   * @throws {Error} Throws an error if `FormHandler` encounters an issue (e.g., network error).\n   *                 Server-side validation errors are reflected in `this.transaction.errors`.\n   * @example\n   * ```typescript\n   * import Consent from '@auth0/auth0-acul-js/consent';\n   * const consentManager = new Consent();\n   * const handleDeny = async () => {\n   *  try {\n   *    await consentManager.deny();\n   *    console.log('Form denied successfully.');\n   *  } catch (err) {\n   *    console.error('Failed to deny form:', error);\n   *  }\n   * };\n   */\n  async deny(payload?: CustomOptions): Promise<void> {\n    const formOptions: SDKFormOptions = {\n      state: this.transaction.state, // For form body\n      telemetry: [Consent.screenIdentifier, 'deny']\n    };\n\n    const submitPayload = {\n      ...payload,\n      action: FormActions.DENY,\n    };\n\n    await new FormHandler(formOptions).submitData<typeof submitPayload>(submitPayload);\n  }\n}\n\n// Export all necessary types and members for this screen\nexport { ConsentMembers, ScreenMembersOnConsent, Scope };\nexport * from '../../../interfaces/export/common'; // Re-export common types\nexport * from '../../../interfaces/export/base-properties'; // Re-export base model members"],"names":["Consent","BaseContext","static","ScreenIds","CONSENT","screen","constructor","super","screenContext","this","getContext","ScreenOverride","accept","payload","formOptions","state","transaction","telemetry","screenIdentifier","submitPayload","action","FormActions","ACCEPT","FormHandler","submitData","deny","DENY"],"mappings":"8RAYqB,MAAAA,UAAgBC,EACnCC,wBAAkCC,EAAUC,QASrCC,OASP,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH,GAgCnC,YAAMI,CAAOC,GACX,MAAMC,EAA8B,CAClCC,MAAON,KAAKO,YAAYD,MACxBE,UAAW,CAACjB,EAAQkB,iBAAkB,WAGlCC,EAAgB,IACjBN,EACHO,OAAQC,EAAYC,cAGhB,IAAIC,EAAYT,GAAaU,WAAiCL,GA6BtE,UAAMM,CAAKZ,GACT,MAAMC,EAA8B,CAClCC,MAAON,KAAKO,YAAYD,MACxBE,UAAW,CAACjB,EAAQkB,iBAAkB,SAGlCC,EAAgB,IACjBN,EACHO,OAAQC,EAAYK,YAGhB,IAAIH,EAAYT,GAAaU,WAAiCL"}