{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-webauthn-platform-enrollment/index.ts"],"sourcesContent":["import { ScreenIds, FormActions, Errors } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\nimport { createPasskeyCredentials } from '../../utils/passkeys';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  MfaWebAuthnPlatformEnrollmentMembers,\n  ScreenMembersOnMfaWebAuthnPlatformEnrollment as ScreenOptions,\n  SubmitPasskeyCredentialOptions, // Though this interface will now be just CustomOptions effectively\n  ReportBrowserErrorOptions,\n} from '../../../interfaces/screens/mfa-webauthn-platform-enrollment';\nimport type { FormOptions as SDKFormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * @class MfaWebAuthnPlatformEnrollment\n * @extends BaseContext\n * implements MfaWebAuthnPlatformEnrollmentMembers\n * description Manages interactions for the MFA WebAuthn Platform Enrollment screen.\n * This screen guides the user through enrolling a platform authenticator (like Touch ID, Windows Hello)\n * as a Multi-Factor Authentication method. It handles the creation and submission of the WebAuthn credential\n * or reports browser-side errors. It also allows users to snooze the enrollment or refuse to enroll.\n */\nexport default class MfaWebAuthnPlatformEnrollment extends BaseContext implements MfaWebAuthnPlatformEnrollmentMembers {\n  /**\n   * static\n   * @property {string} screenIdentifier - The unique identifier for the 'mfa-webauthn-platform-enrollment' screen.\n   */\n  static screenIdentifier: string = ScreenIds.MFA_WEBAUTHN_PLATFORM_ENROLLMENT;\n\n  /**\n   * @property {ScreenOptions} screen - Holds the specific screen data and properties,\n   * processed by `ScreenOverride` for the MFA WebAuthn Platform Enrollment screen.\n   * This includes convenient access to `screen.publicKey`.\n   */\n  public screen: ScreenOptions;\n\n  /**\n   * Initializes a new instance of the `MfaWebAuthnPlatformEnrollment` class.\n   * @throws {Error} If the Universal Login Context is not available or if the screen name\n   * in the context does not match `MfaWebAuthnPlatformEnrollment.screenIdentifier`.\n   */\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * Initiates the WebAuthn platform credential creation process using the public key options\n   * available on `this.screen.publicKey` and submits the resulting credential to the server.\n   * This method internally calls `createPasskeyCredentials` (which wraps `navigator.credentials.create()`).\n   *\n   * @param {SubmitPasskeyCredentialOptions} [payload] - Optional custom parameters to be sent to the server\n   * along with the created credential.\n   * @returns {Promise<void>} A promise that resolves when the credential is successfully created and submitted.\n   * @throws {Error} Throws an error if `this.screen.publicKey` is not available, if `createPasskeyCredentials` fails\n   * (e.g., user cancellation, hardware issues), or if the submission to the server fails.\n   * @example\n   * ```typescript\n   * // Assuming 'sdk' is an instance of MfaWebAuthnPlatformEnrollment\n   * try {\n   *   await sdk.submitPasskeyCredential(); // No need to pass publicKey explicitly\n   *   // On success, Auth0 handles redirection.\n   * } catch (error) {\n   *   console.error('Passkey enrollment failed:', error);\n   *   if (error.name && error.message) { // Check if it looks like a WebAuthn error\n   *     await sdk.reportBrowserError({ error: { name: error.name, message: error.message } });\n   *   }\n   * }\n   * ```\n   */\n  async submitPasskeyCredential(payload?: SubmitPasskeyCredentialOptions): Promise<void> {\n    const publicKeyOptions = this.screen.publicKey;\n\n    if (!publicKeyOptions) {\n      throw new Error(Errors.PASSKEY_PUBLIC_KEY_UNAVAILABLE);\n    }\n\n    const formOptions: SDKFormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaWebAuthnPlatformEnrollment.screenIdentifier, 'submitPasskeyCredential'],\n    };\n\n    const credentialResponse = await createPasskeyCredentials(publicKeyOptions);\n    await new FormHandler(formOptions).submitData({\n      ...(payload || {}), // Spread custom options if any\n      action: FormActions.DEFAULT,\n      response: JSON.stringify(credentialResponse),\n    });\n  }\n\n  /**\n   * Reports a browser-side error encountered during the WebAuthn `navigator.credentials.create()` operation.\n   *\n   * @param {ReportBrowserErrorOptions} payload - An object containing the `error` (with `name` and `message` properties\n   * from the browser's WebAuthn API error) and any other custom options.\n   * @returns {Promise<void>} A promise that resolves upon successful submission of the error report.\n   * @throws {Error} Throws an error if the form submission fails.\n   */\n  async reportBrowserError(payload: ReportBrowserErrorOptions): Promise<void> {\n    const { error, ...customPayload } = payload;\n    const formOptions: SDKFormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaWebAuthnPlatformEnrollment.screenIdentifier, 'reportBrowserError'],\n    };\n    await new FormHandler(formOptions).submitData({\n      ...customPayload,\n      action: `${FormActions.SHOW_ERROR_ACTION_PREFIX}${JSON.stringify(error)}`,\n      response: '',\n    });\n  }\n\n  /**\n   * Allows the user to choose to snooze the WebAuthn platform enrollment.\n   *\n   * @param {CustomOptions} [payload] - Optional custom parameters to be sent with the request.\n   * @returns {Promise<void>} A promise that resolves upon successful submission of the snooze action.\n   */\n  async snoozeEnrollment(payload?: CustomOptions): Promise<void> {\n    const formOptions: SDKFormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaWebAuthnPlatformEnrollment.screenIdentifier, 'snoozeEnrollment'],\n    };\n    await new FormHandler(formOptions).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.SNOOZE_ENROLLMENT,\n    });\n  }\n\n  /**\n   * Allows the user to refuse WebAuthn platform enrollment on the current device.\n   *\n   * @param {CustomOptions} [payload] - Optional custom parameters to be sent with the request.\n   * @returns {Promise<void>} A promise that resolves upon successful submission of the refusal action.\n   */\n  async refuseEnrollmentOnThisDevice(payload?: CustomOptions): Promise<void> {\n    const formOptions: SDKFormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaWebAuthnPlatformEnrollment.screenIdentifier, 'refuseEnrollmentOnThisDevice'],\n    };\n    await new FormHandler(formOptions).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.REFUSE_ADD_DEVICE,\n    });\n  }\n}\n\nexport {\n  MfaWebAuthnPlatformEnrollmentMembers,\n  ScreenOptions as ScreenMembersOnMfaWebAuthnPlatformEnrollment,\n  SubmitPasskeyCredentialOptions,\n  ReportBrowserErrorOptions,\n};\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';"],"names":["MfaWebAuthnPlatformEnrollment","BaseContext","static","ScreenIds","MFA_WEBAUTHN_PLATFORM_ENROLLMENT","screen","constructor","super","screenContext","this","getContext","ScreenOverride","submitPasskeyCredential","payload","publicKeyOptions","publicKey","Error","Errors","PASSKEY_PUBLIC_KEY_UNAVAILABLE","formOptions","state","transaction","telemetry","screenIdentifier","credentialResponse","createPasskeyCredentials","FormHandler","submitData","action","FormActions","DEFAULT","response","JSON","stringify","reportBrowserError","error","customPayload","SHOW_ERROR_ACTION_PREFIX","snoozeEnrollment","SNOOZE_ENROLLMENT","refuseEnrollmentOnThisDevice","REFUSE_ADD_DEVICE"],"mappings":"oZA0BqB,MAAAA,UAAsCC,EAKzDC,wBAAkCC,EAAUC,iCAOrCC,OAOP,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH,GA2BnC,6BAAMI,CAAwBC,GAC5B,MAAMC,EAAmBL,KAAKJ,OAAOU,UAErC,IAAKD,EACH,MAAM,IAAIE,MAAMC,EAAOC,gCAGzB,MAAMC,EAA8B,CAClCC,MAAOX,KAAKY,YAAYD,MACxBE,UAAW,CAACtB,EAA8BuB,iBAAkB,4BAGxDC,QAA2BC,EAAyBX,SACpD,IAAIY,EAAYP,GAAaQ,WAAW,IACxCd,GAAW,CAAA,EACfe,OAAQC,EAAYC,QACpBC,SAAUC,KAAKC,UAAUT,KAY7B,wBAAMU,CAAmBrB,GACvB,MAAMsB,MAAEA,KAAUC,GAAkBvB,EAC9BM,EAA8B,CAClCC,MAAOX,KAAKY,YAAYD,MACxBE,UAAW,CAACtB,EAA8BuB,iBAAkB,6BAExD,IAAIG,EAAYP,GAAaQ,WAAW,IACzCS,EACHR,OAAQ,GAAGC,EAAYQ,2BAA2BL,KAAKC,UAAUE,KACjEJ,SAAU,KAUd,sBAAMO,CAAiBzB,GACrB,MAAMM,EAA8B,CAClCC,MAAOX,KAAKY,YAAYD,MACxBE,UAAW,CAACtB,EAA8BuB,iBAAkB,2BAExD,IAAIG,EAAYP,GAAaQ,WAA0B,IACxDd,EACHe,OAAQC,EAAYU,oBAUxB,kCAAMC,CAA6B3B,GACjC,MAAMM,EAA8B,CAClCC,MAAOX,KAAKY,YAAYD,MACxBE,UAAW,CAACtB,EAA8BuB,iBAAkB,uCAExD,IAAIG,EAAYP,GAAaQ,WAA0B,IACxDd,EACHe,OAAQC,EAAYY"}