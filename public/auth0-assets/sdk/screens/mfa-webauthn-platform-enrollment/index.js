import{FormActions as t}from"../../constants/form-actions.js";import{ScreenIds as e}from"../../constants/enums.js";import{Errors as s}from"../../constants/errors.js";import{BaseContext as r}from"../../models/base-context.js";import{FormHandler as n}from"../../utils/form-handler.js";import{createPasskeyCredentials as o}from"../../utils/passkeys.js";import{ScreenOverride as i}from"./screen-override.js";class a extends r{static screenIdentifier=e.MFA_WEBAUTHN_PLATFORM_ENROLLMENT;screen;constructor(){super();const t=this.getContext("screen");this.screen=new i(t)}async submitPasskeyCredential(e){const r=this.screen.publicKey;if(!r)throw new Error(s.PASSKEY_PUBLIC_KEY_UNAVAILABLE);const i={state:this.transaction.state,telemetry:[a.screenIdentifier,"submitPasskeyCredential"]},c=await o(r);await new n(i).submitData({...e||{},action:t.DEFAULT,response:JSON.stringify(c)})}async reportBrowserError(e){const{error:s,...r}=e,o={state:this.transaction.state,telemetry:[a.screenIdentifier,"reportBrowserError"]};await new n(o).submitData({...r,action:`${t.SHOW_ERROR_ACTION_PREFIX}${JSON.stringify(s)}`,response:""})}async snoozeEnrollment(e){const s={state:this.transaction.state,telemetry:[a.screenIdentifier,"snoozeEnrollment"]};await new n(s).submitData({...e,action:t.SNOOZE_ENROLLMENT})}async refuseEnrollmentOnThisDevice(e){const s={state:this.transaction.state,telemetry:[a.screenIdentifier,"refuseEnrollmentOnThisDevice"]};await new n(s).submitData({...e,action:t.REFUSE_ADD_DEVICE})}}export{a as default};
//# sourceMappingURL=index.js.map
