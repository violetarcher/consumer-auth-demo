import{FormActions as t}from"../../constants/form-actions.js";import{ScreenIds as e}from"../../constants/enums.js";import{BaseContext as s}from"../../models/base-context.js";import{FormHandler as r}from"../../utils/form-handler.js";import{ScreenOverride as n}from"./screen-override.js";import{UntrustedDataOverride as o}from"./untrusted-data-overrider.js";class a extends s{static screenIdentifier=e.MFA_OTP_CHALLENGE;screen;untrustedData;constructor(){super();const t=this.getContext("screen"),e=this.getContext("untrusted_data");this.screen=new n(t),this.untrustedData=new o(e)}async continue(e){const s={state:this.transaction.state,telemetry:[a.screenIdentifier,"continue"]},{rememberDevice:n,...o}=e||{},i={...o,action:t.DEFAULT};n&&(i.rememberBrowser=!0),await new r(s).submitData(i)}async tryAnotherMethod(e){const s={state:this.transaction.state,telemetry:[a.screenIdentifier,"tryAnotherMethod"]};await new r(s).submitData({...e,action:t.PICK_AUTHENTICATOR})}}export{a as default};
//# sourceMappingURL=index.js.map
