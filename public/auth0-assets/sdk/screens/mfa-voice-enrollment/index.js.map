{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-voice-enrollment/index.ts"],"sourcesContent":["import { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { MfaVoiceEnrollmentMembers, ContinueOptions } from '../../../interfaces/screens/mfa-voice-enrollment';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * Class implementing the mfa-voice-enrollment screen functionality.\n */\nexport default class MfaVoiceEnrollment extends BaseContext implements MfaVoiceEnrollmentMembers {\n  static screenIdentifier: string = ScreenIds.MFA_VOICE_ENROLLMENT;\n\n  /**\n   * Creates an instance of MfaVoiceEnrollment screen manager.\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Continues with the default action.\n   * @param  payload - Optional payload.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import MfaVoiceEnrollment from '@auth0/auth0-acul-js/mfa-voice-enrollment';\n   * const mfaVoiceEnrollmentManager = new MfaVoiceEnrollment();\n   * const handleContinueEnrollment = async () => {\n   *  try {\n   *    await mfaVoiceEnrollmentManager.continue({\n   *      phone: '+1234567890',\n   *      // Add any optional CustomOptions here if needed \n   *    });\n   *    console.log('Voice enrollment continued successfully.');\n   *  } catch (error) {\n   *    console.error('Error continuing voice enrollment:', error);\n   *  }\n   * };\n   * ```\n   */\n  async continue(payload: ContinueOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaVoiceEnrollment.screenIdentifier, 'continue'],\n    };\n\n    await new FormHandler(options).submitData({\n      ...payload,\n      action: FormActions.DEFAULT,\n    });\n  }\n\n  /**\n   * Allows trying another authentication method\n   * @param {CustomOptions} [payload] - Optional payload.\n   * @example\n   * ```typescript\n   * import MfaVoiceEnrollment from '@auth0/auth0-acul-js/mfa-voice-enrollment';\n   * const mfaVoiceEnrollment = new MfaVoiceEnrollment();\n   * const handleTryAnotherMethod = async () => {\n   *  await mfaVoiceEnrollment.tryAnotherMethod();\n   * };\n   * ```\n   */\n  async tryAnotherMethod(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaVoiceEnrollment.screenIdentifier, 'tryAnotherMethod'],\n    };\n\n    await new FormHandler(options).submitData({\n      ...payload,\n      action: FormActions.PICK_AUTHENTICATOR,\n    });\n  }\n\n  /**\n   * Allows picking a country code for the phone number\n   * @param {CustomOptions} [payload] - Optional payload.\n   * @example\n   * ```typescript\n   * import MfaVoiceEnrollment from '@auth0/auth0-acul-js/mfa-voice-enrollment';\n   * const mfaVoiceEnrollment = new MfaVoiceEnrollment();\n   * const handlePickCountryCode = async () => {\n   *  await mfaVoiceEnrollment.selectPhoneCountryCode();\n   * };\n   * ```\n   */\n  async selectPhoneCountryCode(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaVoiceEnrollment.screenIdentifier, 'selectPhoneCountryCode'],\n    };\n\n    await new FormHandler(options).submitData({\n      ...payload,\n      action: FormActions.PICK_COUNTRY_CODE,\n    });\n  }\n}\n\nexport { MfaVoiceEnrollmentMembers, ContinueOptions };\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["MfaVoiceEnrollment","BaseContext","static","ScreenIds","MFA_VOICE_ENROLLMENT","constructor","super","payload","options","state","this","transaction","telemetry","screenIdentifier","FormHandler","submitData","action","FormActions","DEFAULT","tryAnotherMethod","PICK_AUTHENTICATOR","selectPhoneCountryCode","PICK_COUNTRY_CODE"],"mappings":"wOAWqB,MAAAA,UAA2BC,EAC9CC,wBAAkCC,EAAUC,qBAK5C,WAAAC,GACEC,QAwBF,cAAM,CAASC,GACb,MAAMC,EAAuB,CAC3BC,MAAOC,KAAKC,YAAYF,MACxBG,UAAW,CAACZ,EAAmBa,iBAAkB,mBAG7C,IAAIC,EAAYN,GAASO,WAAW,IACrCR,EACHS,OAAQC,EAAYC,UAgBxB,sBAAMC,CAAiBZ,GACrB,MAAMC,EAAuB,CAC3BC,MAAOC,KAAKC,YAAYF,MACxBG,UAAW,CAACZ,EAAmBa,iBAAkB,2BAG7C,IAAIC,EAAYN,GAASO,WAAW,IACrCR,EACHS,OAAQC,EAAYG,qBAgBxB,4BAAMC,CAAuBd,GAC3B,MAAMC,EAAuB,CAC3BC,MAAOC,KAAKC,YAAYF,MACxBG,UAAW,CAACZ,EAAmBa,iBAAkB,iCAG7C,IAAIC,EAAYN,GAASO,WAAW,IACrCR,EACHS,OAAQC,EAAYK"}