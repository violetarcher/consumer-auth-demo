{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-sms-enrollment/index.ts"],"sourcesContent":["import { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type {\n  MfaSmsEnrollmentMembers,\n  MfaSmsEnrollmentOptions,\n  ScreenMembersOnMfaSmsEnrollment,\n} from '../../../interfaces/screens/mfa-sms-enrollment';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * Represents the MFA SMS Enrollment screen.\n */\nexport default class MfaSmsEnrollment extends BaseContext implements MfaSmsEnrollmentMembers {\n  static screenIdentifier: string = ScreenIds.MFA_SMS_ENROLLMENT;\n  screen: ScreenMembersOnMfaSmsEnrollment;\n\n  /**\n   * Initializes a new instance of the MfaSmsEnrollment class.\n   */\n  constructor() {\n    super();\n    this.screen = this.getContext('screen') as ScreenMembersOnMfaSmsEnrollment;\n  }\n\n  /**\n   * Handles the action to pick a country code for SMS enrollment.\n   * @param payload Optional custom options to include in the request.\n   * @returns A promise that resolves when the action is complete.\n   * @example\n   * ```typescript\n   * import MfaSmsEnrollment from '@auth0/auth0-acul-js/mfa-sms-enrollment';\n   *\n   * const mfaSmsEnrollment = new MfaSmsEnrollment();\n   * await mfaSmsEnrollment.pickCountryCode();\n   * ```\n   */\n  async pickCountryCode(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaSmsEnrollment.screenIdentifier, 'pickCountryCode'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.PICK_COUNTRY_CODE,\n    });\n  }\n\n  /**\n   * Continues the SMS enrollment process with the provided phone number.\n   * @param payload The phone number to use for enrollment.\n   * @returns A promise that resolves when the enrollment process is complete.\n   * @throws {Error} If the phone number is missing.\n   * @example\n   * ```typescript\n   * import MfaSmsEnrollment from '@auth0/auth0-acul-js/mfa-sms-enrollment';\n   *\n   * const mfaSmsEnrollment = new MfaSmsEnrollment();\n   * await mfaSmsEnrollment.continueEnrollment({ phone: '1234567890' });\n   * ```\n   */\n  async continueEnrollment(payload: MfaSmsEnrollmentOptions): Promise<void> {\n    if (!payload.phone) {\n      throw new Error('Phone number is required to continue enrollment.');\n    }\n\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaSmsEnrollment.screenIdentifier, 'continueEnrollment'],\n    };\n    await new FormHandler(options).submitData<MfaSmsEnrollmentOptions>({\n      ...payload,\n      action: FormActions.DEFAULT,\n    });\n  }\n\n  /**\n   * Handles the action to try another method for MFA.\n   * @param payload Optional custom options to include in the request.\n   * @returns A promise that resolves when the action is complete.\n   * @example\n   * ```typescript\n   * import MfaSmsEnrollment from '@auth0/auth0-acul-js/mfa-sms-enrollment';\n   *\n   * const mfaSmsEnrollment = new MfaSmsEnrollment();\n   * await mfaSmsEnrollment.tryAnotherMethod();\n   * ```\n   */\n  async tryAnotherMethod(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaSmsEnrollment.screenIdentifier, 'tryAnotherMethod'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.PICK_AUTHENTICATOR,\n    });\n  }\n}\n\nexport { MfaSmsEnrollmentMembers, MfaSmsEnrollmentOptions, ScreenMembersOnMfaSmsEnrollment };\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["MfaSmsEnrollment","BaseContext","static","ScreenIds","MFA_SMS_ENROLLMENT","screen","constructor","super","this","getContext","pickCountryCode","payload","options","state","transaction","telemetry","screenIdentifier","FormHandler","submitData","action","FormActions","PICK_COUNTRY_CODE","continueEnrollment","phone","Error","DEFAULT","tryAnotherMethod","PICK_AUTHENTICATOR"],"mappings":"wOAeqB,MAAAA,UAAyBC,EAC5CC,wBAAkCC,EAAUC,mBAC5CC,OAKA,WAAAC,GACEC,QACAC,KAAKH,OAASG,KAAKC,WAAW,UAehC,qBAAMC,CAAgBC,GACpB,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAACf,EAAiBgB,iBAAkB,0BAE3C,IAAIC,EAAYL,GAASM,WAA0B,IACpDP,EACHQ,OAAQC,EAAYC,oBAiBxB,wBAAMC,CAAmBX,GACvB,IAAKA,EAAQY,MACX,MAAM,IAAIC,MAAM,oDAGlB,MAAMZ,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAACf,EAAiBgB,iBAAkB,6BAE3C,IAAIC,EAAYL,GAASM,WAAoC,IAC9DP,EACHQ,OAAQC,EAAYK,UAgBxB,sBAAMC,CAAiBf,GACrB,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAACf,EAAiBgB,iBAAkB,2BAE3C,IAAIC,EAAYL,GAASM,WAA0B,IACpDP,EACHQ,OAAQC,EAAYO"}