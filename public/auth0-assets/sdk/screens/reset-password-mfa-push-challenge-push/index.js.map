{"version":3,"file":"index.js","sources":["../../../../src/screens/reset-password-mfa-push-challenge-push/index.ts"],"sourcesContent":["import { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  ResetPasswordMfaPushChallengePushMembers,\n  ScreenMembersOnResetPasswordMfaPushChallengePush as ScreenOptions,\n} from '../../../interfaces/screens/reset-password-mfa-push-challenge-push';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * Class representing the reset-password-mfa-push-challenge-push screen functionality\n * This screen is shown when a push notification has been sent to the user's device during password reset\n */\nexport default class ResetPasswordMfaPushChallengePush extends BaseContext implements ResetPasswordMfaPushChallengePushMembers {\n  static screenIdentifier: string = ScreenIds.RESET_PASSWORD_MFA_PUSH_CHALLENGE_PUSH;\n  screen: ScreenOptions;\n\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * Continues with the push notification challenge\n   * @param payload Optional custom options to include with the request\n   * @example\n   * ```typescript\n   * import ResetPasswordMfaPushChallengePush from '@auth0/auth0-acul-js/reset-password-mfa-push-challenge-push';\n   *\n   * const resetPasswordMfaPushChallengePush = new ResetPasswordMfaPushChallengePush();\n   * await resetPasswordMfaPushChallengePush.continue();\n   * ```\n   */\n  async continue(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaPushChallengePush.screenIdentifier, 'continue'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>(payload || {});\n  }\n\n  /**\n   * Re-sends the push notification\n   * @param payload Optional custom options to include with the request\n   * @example\n   * ```typescript\n   * import ResetPasswordMfaPushChallengePush from '@auth0/auth0-acul-js/reset-password-mfa-push-challenge-push';\n   *\n   * const resetPasswordMfaPushChallengePush = new ResetPasswordMfaPushChallengePush();\n   * await resetPasswordMfaPushChallengePush.resendPushNotification();\n   * ```\n   */\n  async resendPushNotification(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaPushChallengePush.screenIdentifier, 'resendPushNotification'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.RESEND,\n    });\n  }\n\n  /**\n   * Switches to entering the verification code manually\n   * @param payload Optional custom options to include with the request\n   * @example\n   * ```typescript\n   * import ResetPasswordMfaPushChallengePush from '@auth0/auth0-acul-js/reset-password-mfa-push-challenge-push';\n   *\n   * const resetPasswordMfaPushChallengePush = new ResetPasswordMfaPushChallengePush();\n   * await resetPasswordMfaPushChallengePush.enterCodeManually();\n   * ```\n   */\n  async enterCodeManually(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaPushChallengePush.screenIdentifier, 'enterCodeManually'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.ENTER_OTP_CODE,\n    });\n  }\n\n  /**\n   * Allows trying another authentication method\n   * @param payload Optional custom options to include with the request\n   * @example\n   * ```typescript\n   * import ResetPasswordMfaPushChallengePush from '@auth0/auth0-acul-js/reset-password-mfa-push-challenge-push';\n   *\n   * const resetPasswordMfaPushChallengePush = new ResetPasswordMfaPushChallengePush();\n   * await resetPasswordMfaPushChallengePush.tryAnotherMethod();\n   * ```\n   */\n  async tryAnotherMethod(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaPushChallengePush.screenIdentifier, 'tryAnotherMethod'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.PICK_AUTHENTICATOR,\n    });\n  }\n}\n\nexport { ResetPasswordMfaPushChallengePushMembers, ScreenOptions as ScreenMembersOnResetPasswordMfaPushChallengePush };\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["ResetPasswordMfaPushChallengePush","BaseContext","static","ScreenIds","RESET_PASSWORD_MFA_PUSH_CHALLENGE_PUSH","screen","constructor","super","screenContext","this","getContext","ScreenOverride","payload","options","state","transaction","telemetry","screenIdentifier","FormHandler","submitData","resendPushNotification","action","FormActions","RESEND","enterCodeManually","ENTER_OTP_CODE","tryAnotherMethod","PICK_AUTHENTICATOR"],"mappings":"8RAkBqB,MAAAA,UAA0CC,EAC7DC,wBAAkCC,EAAUC,uCAC5CC,OAEA,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH,GAcnC,cAAM,CAASI,GACb,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAAkCiB,iBAAkB,mBAE5D,IAAIC,EAAYL,GAASM,WAA0BP,GAAW,CAAA,GActE,4BAAMQ,CAAuBR,GAC3B,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAAkCiB,iBAAkB,iCAE5D,IAAIC,EAAYL,GAASM,WAA0B,IACpDP,EACHS,OAAQC,EAAYC,SAexB,uBAAMC,CAAkBZ,GACtB,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAAkCiB,iBAAkB,4BAE5D,IAAIC,EAAYL,GAASM,WAA0B,IACpDP,EACHS,OAAQC,EAAYG,iBAexB,sBAAMC,CAAiBd,GACrB,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAAkCiB,iBAAkB,2BAE5D,IAAIC,EAAYL,GAASM,WAA0B,IACpDP,EACHS,OAAQC,EAAYK"}