{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-phone-challenge/index.ts"],"sourcesContent":["/**\n * @file Implements the functionality for the MFA Phone Challenge screen (mfa-phone-challenge).\n * This screen allows users to choose between receiving an MFA code via SMS or a voice call.\n */\n\nimport { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  MfaPhoneChallengeMembers,\n  ScreenMembersOnMfaPhoneChallenge as ScreenOptions,\n  ContinueOptions,\n  PickPhoneOptions,\n  PickAuthenticatorOptions,\n} from '../../../interfaces/screens/mfa-phone-challenge';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * @class MfaPhoneChallenge\n * @extends {BaseContext}\n * Manages the interactions and state for the MFA Phone Challenge screen.\n * Allows users to select SMS or voice call for verification and provides options to pick another phone or authenticator.\n */\nexport default class MfaPhoneChallenge extends BaseContext implements MfaPhoneChallengeMembers {\n  /**\n   * The unique identifier for this screen.\n   */\n  static screenIdentifier: string = ScreenIds.MFA_PHONE_CHALLENGE; // Use the exact screen name from context\n\n  /**\n   * Holds the specific screen data for the MFA Phone Challenge.\n   */\n  screen: ScreenOptions;\n\n  /**\n   * Initializes a new instance of the `MfaPhoneChallenge` class.\n   * It sets up the screen-specific data by creating an instance of `ScreenOverride`.\n   */\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * Submits the user's choice of receiving the MFA code via SMS or voice call.\n   * It uses the phone number provided in the screen context.\n   *\n   * @param {ContinueOptions} payload - Options containing the delivery type ('sms' or 'voice').\n   * @returns {Promise<void>} A promise that resolves upon successful submission.\n   * @throws {Error} Throws an error if the phone number is not available in the screen context or if the submission fails.\n   * @example\n   * ```typescript\n   * const mfaPhoneChallenge = new MfaPhoneChallenge();\n   * // Request code via SMS\n   * await mfaPhoneChallenge.continue({ type: 'sms' });\n   * // Request code via Voice Call\n   * await mfaPhoneChallenge.continue({ type: 'voice' });\n   * ```\n   */\n  async continue(payload: ContinueOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaPhoneChallenge.screenIdentifier, 'continue'],\n    };\n\n    await new FormHandler(options).submitData<ContinueOptions & { action: string }>({\n      ...payload, // Includes type: 'sms' | 'voice'\n      action: FormActions.DEFAULT, // Use the default action for submission\n    });\n  }\n\n  /**\n   * Initiates the process for the user to select a different phone number (if applicable).\n   * This typically triggers a navigation to a phone selection screen.\n   *\n   * @param {PickPhoneOptions} [payload] - Optional custom options for the request.\n   * @returns {Promise<void>} A promise that resolves upon successful submission.\n   * @throws {Error} Throws an error if the submission fails.\n   * @example\n   * ```typescript\n   * const mfaPhoneChallenge = new MfaPhoneChallenge();\n   * await mfaPhoneChallenge.pickPhone();\n   * ```\n   */\n  async pickPhone(payload?: PickPhoneOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaPhoneChallenge.screenIdentifier, 'pickPhone'],\n    };\n\n    await new FormHandler(options).submitData<PickPhoneOptions & { action: string }>({\n      ...payload,\n      action: 'pick-phone', // Specific action for picking phone\n    });\n  }\n\n  /**\n   * Allows the user to choose a different MFA method (e.g., OTP, Recovery Code).\n   * This typically triggers navigation to the authenticator selection screen.\n   *\n   * @param {PickAuthenticatorOptions} [payload] - Optional custom options for the request.\n   * @returns {Promise<void>} A promise that resolves upon successful submission.\n   * @throws {Error} Throws an error if the submission fails.\n   * @example\n   * ```typescript\n   * const mfaPhoneChallenge = new MfaPhoneChallenge();\n   * await mfaPhoneChallenge.tryAnotherMethod();\n   * ```\n   */\n  async tryAnotherMethod(payload?: PickAuthenticatorOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaPhoneChallenge.screenIdentifier, 'tryAnotherMethod'],\n    };\n\n    await new FormHandler(options).submitData<PickAuthenticatorOptions & { action: string }>({\n      ...payload,\n      action: FormActions.PICK_AUTHENTICATOR, // Standard action for picking authenticator\n    });\n  }\n}\n\n// Export the members and options for external use\nexport { MfaPhoneChallengeMembers, ScreenOptions as ScreenMembersOnMfaPhoneChallenge, ContinueOptions, PickPhoneOptions, PickAuthenticatorOptions };\n\n// Re-export common interfaces and base properties\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["MfaPhoneChallenge","BaseContext","static","ScreenIds","MFA_PHONE_CHALLENGE","screen","constructor","super","screenContext","this","getContext","ScreenOverride","payload","options","state","transaction","telemetry","screenIdentifier","FormHandler","submitData","action","FormActions","DEFAULT","pickPhone","tryAnotherMethod","PICK_AUTHENTICATOR"],"mappings":"8RA2BqB,MAAAA,UAA0BC,EAI7CC,wBAAkCC,EAAUC,oBAK5CC,OAMA,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH,GAmBnC,cAAM,CAASI,GACb,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAAkBiB,iBAAkB,mBAG5C,IAAIC,EAAYL,GAASM,WAAiD,IAC3EP,EACHQ,OAAQC,EAAYC,UAiBxB,eAAMC,CAAUX,GACd,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAAkBiB,iBAAkB,oBAG5C,IAAIC,EAAYL,GAASM,WAAkD,IAC5EP,EACHQ,OAAQ,eAiBZ,sBAAMI,CAAiBZ,GACrB,MAAMC,EAAuB,CAC3BC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAAkBiB,iBAAkB,2BAG5C,IAAIC,EAAYL,GAASM,WAA0D,IACpFP,EACHQ,OAAQC,EAAYI"}