{"version":3,"file":"index.js","sources":["../../../../src/screens/reset-password-mfa-recovery-code-challenge/index.ts"],"sourcesContent":["import { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { ResetPasswordMfaRecoveryCodeChallengeMembers } from '../../../interfaces/screens/reset-password-mfa-recovery-code-challenge';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * Class implementing the Reset Password MFA Recovery Code Challenge screen functionality.\n */\nexport default class ResetPasswordMfaRecoveryCodeChallenge extends BaseContext implements ResetPasswordMfaRecoveryCodeChallengeMembers {\n  static screenIdentifier: string = ScreenIds.RESET_PASSWORD_MFA_RECOVERY_CODE_CHALLENGE;\n\n  /**\n   * Creates an instance of the ResetPasswordMfaRecoveryCodeChallenge screen.\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Continues with the provided recovery code.\n   * @param {string} code - The recovery code entered by the user.\n   * @param {CustomOptions} [payload] - Optional payload.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import ResetPasswordMfaRecoveryCodeChallenge from '@auth0/auth0-acul-js/reset-password-mfa-recovery-code-challenge';\n   * const resetPasswordMfaManager = new ResetPasswordMfaRecoveryCodeChallenge();\n   * const continueWithRecoveryCode = async () => {\n   *  try {\n   *    await resetPasswordMfaManager.continue('RECOVERY_CODE');\n   *     console.log('Recovery code submitted successfully.');\n   *  } catch (error) {\n   *    console.error('Error submitting recovery code:', error);\n   *  }\n   * };\n   * ```\n   */\n  async continue(code: string, payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaRecoveryCodeChallenge.screenIdentifier, 'continue'],\n    };\n\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      code,\n      action: FormActions.DEFAULT,\n    });\n  }\n\n  /**\n   * Navigates to the screen where the user can pick another MFA method.\n   * @param {CustomOptions} [payload] - Optional payload.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import ResetPasswordMfaRecoveryCodeChallenge from '@auth0/auth0-acul-js/reset-password-mfa-recovery-code-challenge';\n   * const resetPasswordMfaRecoveryCodeChallengeManager = new ResetPasswordMfaRecoveryCodeChallenge();\n   * const handleTryAnotherMethod = async () => {\n   *  try {\n   *    await resetPasswordMfaRecoveryCodeChallengeManager.tryAnotherMethod();\n   *  } catch (error) {\n   *    console.error('Failed to try another method:', error);\n   *  }\n   * };\n   * ```\n   */\n  async tryAnotherMethod(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [ResetPasswordMfaRecoveryCodeChallenge.screenIdentifier, 'tryAnotherMethod'],\n    };\n\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.PICK_AUTHENTICATOR,\n    });\n  }\n}\n\nexport { ResetPasswordMfaRecoveryCodeChallengeMembers };\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["ResetPasswordMfaRecoveryCodeChallenge","BaseContext","static","ScreenIds","RESET_PASSWORD_MFA_RECOVERY_CODE_CHALLENGE","constructor","super","code","payload","options","state","this","transaction","telemetry","screenIdentifier","FormHandler","submitData","action","FormActions","DEFAULT","tryAnotherMethod","PICK_AUTHENTICATOR"],"mappings":"wOAWqB,MAAAA,UAA8CC,EACjEC,wBAAkCC,EAAUC,2CAK5C,WAAAC,GACEC,QAsBF,cAAM,CAASC,EAAcC,GAC3B,MAAMC,EAAuB,CAC3BC,MAAOC,KAAKC,YAAYF,MACxBG,UAAW,CAACb,EAAsCc,iBAAkB,mBAGhE,IAAIC,EAAYN,GAASO,WAA0B,IACpDR,EACHD,OACAU,OAAQC,EAAYC,UAqBxB,sBAAMC,CAAiBZ,GACrB,MAAMC,EAAuB,CAC3BC,MAAOC,KAAKC,YAAYF,MACxBG,UAAW,CAACb,EAAsCc,iBAAkB,2BAGhE,IAAIC,EAAYN,GAASO,WAA0B,IACpDR,EACHS,OAAQC,EAAYG"}