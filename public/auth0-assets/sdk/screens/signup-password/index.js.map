{"version":3,"file":"index.js","sources":["../../../../src/screens/signup-password/index.ts"],"sourcesContent":["import { ScreenIds } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\nimport { TransactionOverride } from './transaction-override';\n\nimport type { TransactionContext } from '../../../interfaces/models/transaction';\nimport type {\n  SignupPasswordMembers,\n  ScreenContextOnSignupPassword,\n  ScreenMembersOnSignupPassword as ScreenOptions,\n  TransactionMembersOnSignupPassword as TransactionOptions,\n  SignupPasswordOptions,\n  FederatedSignupOptions\n} from '../../../interfaces/screens/signup-password';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\nexport default class SignupPassword extends BaseContext implements SignupPasswordMembers {\n  static screenIdentifier: string = ScreenIds.SIGNUP_PASSWORD;\n  screen: ScreenOptions;\n  transaction: TransactionOptions;\n\n  constructor() {\n    super();\n\n    const screenContext = this.getContext('screen') as ScreenContextOnSignupPassword;\n    const transactionContext = this.getContext('transaction') as TransactionContext;\n\n    this.screen = new ScreenOverride(screenContext);\n    this.transaction = new TransactionOverride(transactionContext);\n  }\n\n  /**\n   * @remarks\n   * This methods handles signup-password related screen configuration.\n   * It allows to proceed with registering signup password along with signup identifiers passed in previous screen\n   *\n   * @example\n   * import SignupPassword from \"@auth0/auth0-acul-js/signup-password\";\n   *\n   * const signupPasswordManager = new SignupPassword();\n   * const { transaction, screen } = signupPasswordManager;\n   *\n   * //get mandatory & optional identifiers required for signup-password screen to proceed\n   * const mandatoryIdentifier = transaction.getRequiredIdentifiers(); //eg: email\n   * const optionalIdentifiers = transaction.getOptionalIdentifiers() //eg: phone\n   *\n   * //get signup data submitted on previous screen from previous screen\n   * const data = transaction.screen.getScreenData(); //eg: email, phone\n   *\n   *\n   * const signupParams = {\n   *  email : data.email,\n   *  password: \"******\"\n   * };\n   *\n   * signupPasswordManager.signup(signupParams);\n   */\n  async signup(payload: SignupPasswordOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [this.constructor.name, 'signup'],\n    };\n\n    if (payload.phone?.trim() ?? '') {\n      const { phone, ...rest } = payload;\n      payload = { ...rest, phone_number: phone };\n    }\n\n    await new FormHandler(options).submitData<SignupPasswordOptions>(payload);\n  }\n\n  /**\n     * @remarks\n     * This methods handles allows signup via different social identifiers.\n     * Eg: Google, Facebook etc.\n     *\n     * @example\n     * import SignupPassword from \"@auth0/auth0-acul-js/signup-id\";\n     *\n     * const signupIdManager = new SignupPassword();\n     * const { transaction } = signupIdManager;\n     *\n     * //get social connections\n     * const socialConnection = transaction.getAlternateConnections(); //eg: \"google-oauth2\"\n     *\n     * const signupParams = {\n     *  connection : socialConnection[0].name, // \"google-oauth2\"\n     * };\n     *\n     * signupIdManager.federatedSignup(signupParams);\n     */\n  async federatedSignup(payload: FederatedSignupOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [SignupPassword.screenIdentifier, 'federatedSignup'],\n    };\n\n    await new FormHandler(options).submitData<FederatedSignupOptions>(payload);\n  }\n}\n\nexport {\n  SignupPasswordMembers,\n  SignupPasswordOptions,\n  FederatedSignupOptions,\n  ScreenOptions as ScreenMembersOnSignupPassword,\n  TransactionOptions as TransactionMembersOnSignupPassword,\n};\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["SignupPassword","BaseContext","static","ScreenIds","SIGNUP_PASSWORD","screen","transaction","constructor","super","screenContext","this","getContext","transactionContext","ScreenOverride","TransactionOverride","signup","payload","options","state","telemetry","name","phone","trim","rest","phone_number","FormHandler","submitData","federatedSignup","screenIdentifier"],"mappings":"gSAkBqB,MAAAA,UAAuBC,EAC1CC,wBAAkCC,EAAUC,gBAC5CC,OACAC,YAEA,WAAAC,GACEC,QAEA,MAAMC,EAAgBC,KAAKC,WAAW,UAChCC,EAAqBF,KAAKC,WAAW,eAE3CD,KAAKL,OAAS,IAAIQ,EAAeJ,GACjCC,KAAKJ,YAAc,IAAIQ,EAAoBF,GA6B7C,YAAMG,CAAOC,GACX,MAAMC,EAAuB,CAC3BC,MAAOR,KAAKJ,YAAYY,MACxBC,UAAW,CAACT,KAAKH,YAAYa,KAAM,WAGrC,GAAIJ,EAAQK,OAAOC,OAAc,CAC/B,MAAMD,MAAEA,KAAUE,GAASP,EAC3BA,EAAU,IAAKO,EAAMC,aAAcH,SAG/B,IAAII,EAAYR,GAASS,WAAkCV,GAuBnE,qBAAMW,CAAgBX,GACpB,MAAMC,EAAuB,CAC3BC,MAAOR,KAAKJ,YAAYY,MACxBC,UAAW,CAACnB,EAAe4B,iBAAkB,0BAGzC,IAAIH,EAAYR,GAASS,WAAmCV"}