{"version":3,"file":"index.js","sources":["../../../../src/screens/email-verification-result/index.ts"],"sourcesContent":["import { ScreenIds } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  EmailVerificationResultMembers,\n  ScreenMembersOnEmailVerificationResult as ScreenOptions,\n} from '../../../interfaces/screens/email-verification-result';\n\n/**\n * @class EmailVerificationResult\n * @extends BaseContext\n * implements EmailVerificationResultMembers\n * description Manages the interactions and data for the Email Verification Result screen.\n * This screen displays the outcome of an email verification process and offers a link to login.\n * It typically doesn't involve form submissions or complex operations from the user beyond navigation.\n *\n * @example\n * ```typescript\n * import EmailVerificationResult from '@auth0/auth0-acul-js/email-verification-result';\n *\n * const emailVerificationResultScreen = new EmailVerificationResult();\n *\n * // Access screen data\n * const status = emailVerificationResultScreen.screen.data?.status;\n * const loginLink = emailVerificationResultScreen.screen.loginLink;\n *\n * console.log(`Verification Status: ${status}`);\n * if (loginLink) {\n *   console.log(`Proceed to login: ${loginLink}`);\n *   // In a UI, you would use this link for a button or anchor tag\n *   // e.g., <a href={loginLink}>Go to Login</a>\n * }\n * ```\n */\nexport default class EmailVerificationResult extends BaseContext implements EmailVerificationResultMembers {\n  /**\n   * static\n   * @property {string} screenIdentifier - The unique identifier for the Email Verification Result screen.\n   * This identifier is used by `BaseContext` to ensure the correct screen class is instantiated.\n   */\n  static screenIdentifier: string = ScreenIds.EMAIL_VERIFICATION_RESULT;\n\n  /**\n   * @property {ScreenOptions} screen - Holds the specific screen data and properties for the\n   * This includes the verification status and the login link.\n   */\n  screen: ScreenOptions;\n\n  /**\n   * Initializes a new instance of the `EmailVerificationResult` class.\n   * It retrieves the screen-specific context and sets up the `screen` property\n   * @throws {Error} If the Universal Login Context is not available or if the\n   * current screen name in the context does not match `EmailVerificationResult.screenIdentifier`.\n   */\n  constructor() {\n    super(); // Calls BaseContext constructor for global context initialization and validation.\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  // This screen is informational. No specific operations like form submissions are defined.\n  // Users will typically navigate away using the `loginLink` provided in `this.screen.loginLink`.\n}\n\n// Export the primary class and its relevant member and options interfaces.\nexport { EmailVerificationResultMembers, ScreenOptions as ScreenMembersOnEmailVerificationResult };\n\n// Re-export common interfaces and base properties for convenience.\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';"],"names":["EmailVerificationResult","BaseContext","static","ScreenIds","EMAIL_VERIFICATION_RESULT","screen","constructor","super","screenContext","this","getContext","ScreenOverride"],"mappings":"sKAqCqB,MAAAA,UAAgCC,EAMnDC,wBAAkCC,EAAUC,0BAM5CC,OAQA,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH"}