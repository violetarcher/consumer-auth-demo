{"version":3,"file":"screen-override.js","sources":["../../../../src/screens/mfa-webauthn-roaming-challenge/screen-override.ts"],"sourcesContent":["import { Screen } from '../../models/screen';\nimport { getPublicKey, getShowRememberDevice, getWebAuthnType } from '../../shared/screen';\n\nimport type { PasskeyRead, ScreenContext } from '../../../interfaces/models/screen';\nimport type { ScreenMembersOnMfaWebAuthnRoamingChallenge as OverrideOptions } from '../../../interfaces/screens/mfa-webauthn-roaming-challenge';\n\n/**\n * @class ScreenOverride\n * @extends Screen\n * @implements OverrideOptions\n * @description Provides specific data accessors for the 'mfa-webauthn-roaming-challenge' screen context.\n * It ensures that `showRememberDevice`, `webauthnType`, and `publicKeyChallengeOptions`\n * are correctly typed and accessible from the screen's data.\n */\nexport class ScreenOverride extends Screen implements OverrideOptions {\n  showRememberDevice?: boolean | undefined;\n  webauthnType: string | null;\n  publicKey: PasskeyRead['public_key'] | null;\n\n  /**\n   * Initializes a new instance of the `ScreenOverride` class for the 'mfa-webauthn-roaming-challenge' screen.\n   * Parses the screen context to extract and type the relevant data fields.\n   * @param {ScreenContext} screenContext - The screen context provided by Universal Login.\n   */\n  constructor(screenContext: ScreenContext) {\n    super(screenContext);\n    this.publicKey = ScreenOverride.getPublicKey(screenContext);\n    this.webauthnType = ScreenOverride.getWebAuthnType(screenContext)\n    this.showRememberDevice = ScreenOverride.getShowRememberDevice(screenContext)\n  }\n\n  \n    static getPublicKey = (screenContext: ScreenContext): OverrideOptions['publicKey'] => {\n      return getPublicKey(screenContext) as OverrideOptions['publicKey'];\n    };\n    \n    /**\n     * Retrieves the WebAuthn type from the screen context.\n     * @param screenContext The screen context containing the data.\n     * @returns The WebAuthn type (e.g., 'roaming') or null if not available.\n     */\n    static getWebAuthnType = (screenContext: ScreenContext): string | null => {\n      return getWebAuthnType(screenContext);\n    };\n\n    static getShowRememberDevice = (screenContext: ScreenContext): boolean => {\n      return getShowRememberDevice(screenContext)\n    }\n}"],"names":["ScreenOverride","Screen","showRememberDevice","webauthnType","publicKey","constructor","screenContext","super","this","getPublicKey","getWebAuthnType","getShowRememberDevice","static"],"mappings":"sJAcM,MAAOA,UAAuBC,EAClCC,mBACAC,aACAC,UAOA,WAAAC,CAAYC,GACVC,MAAMD,GACNE,KAAKJ,UAAYJ,EAAeS,aAAaH,GAC7CE,KAAKL,aAAeH,EAAeU,gBAAgBJ,GACnDE,KAAKN,mBAAqBF,EAAeW,sBAAsBL,GAI/DM,oBAAuBN,GACdG,EAAaH,GAQtBM,uBAA0BN,GACjBI,EAAgBJ,GAGzBM,6BAAgCN,GACvBK,EAAsBL"}