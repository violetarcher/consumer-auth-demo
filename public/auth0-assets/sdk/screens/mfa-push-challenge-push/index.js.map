{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-push-challenge-push/index.ts"],"sourcesContent":["import { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\nimport { UntrustedDataOverride } from './untrusted-data-overrider';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type { UntrustedDataContext } from '../../../interfaces/models/untrusted-data';\nimport type {\n  MfaPushChallengePushMembers,\n  WithRememberOptions,\n  ScreenMembersOnMfaPushChallengePush as ScreenOptions,\n  UntrustedDataMembersOnMfaPushChallengePush as UntrustedDataOptions,\n} from '../../../interfaces/screens/mfa-push-challenge-push';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * Class implementing the mfa-push-challenge-push screen functionality\n * This screen is shown when a user needs to confirm a push notification during MFA\n */\nexport default class MfaPushChallengePush extends BaseContext implements MfaPushChallengePushMembers {\n  static screenIdentifier: string = ScreenIds.MFA_PUSH_CHALLENGE_PUSH;\n  screen: ScreenOptions;\n  untrustedData: UntrustedDataOptions;\n\n  /**\n   * Creates an instance of MfaPushChallengePush screen manager\n   */\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    const untrustedDataContext = this.getContext('untrusted_data') as UntrustedDataContext;\n    this.screen = new ScreenOverride(screenContext);\n    this.untrustedData = new UntrustedDataOverride(untrustedDataContext);\n  }\n\n  /**\n   * Continues with the push notification challenge\n   * @param payload Optional custom options to include with the request\n   * @example\n   * ```typescript\n   * const mfaPushChallengePush = new MfaPushChallengePush();\n   * await mfaPushChallengePush.continue();\n   * ```\n   */\n  async continue(payload?: WithRememberOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaPushChallengePush.screenIdentifier, 'continue'],\n    };\n\n    const { rememberDevice, ...restPayload } = payload || {};\n    const submitPayload: Record<string, string | number | boolean> = { ...restPayload, action: FormActions.CONTINUE };\n\n    if (rememberDevice) {\n      submitPayload.rememberBrowser = true;\n    }\n    await new FormHandler(options).submitData(submitPayload);\n  }\n\n  /**\n   * Resends the push notification\n   * @param payload Optional custom options to include with the request\n   * @example\n   * ```typescript\n   * const mfaPushChallengePush = new MfaPushChallengePush();\n   * await mfaPushChallengePush.resendPushNotification();\n   * ```\n   */\n  async resendPushNotification(payload?: WithRememberOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaPushChallengePush.screenIdentifier, 'resendPushNotification'],\n    };\n    const { rememberDevice = false, ...restPayload } = payload || {};\n    await new FormHandler(options).submitData<WithRememberOptions>({\n      rememberBrowser: rememberDevice ? 'true' : undefined,\n      ...restPayload,\n      action: FormActions.RESEND,\n    });\n  }\n\n  /**\n   * Switches to entering the verification code manually\n   * @param payload Optional custom options to include with the request\n   * @example\n   * ```typescript\n   * const mfaPushChallengePush = new MfaPushChallengePush();\n   * await mfaPushChallengePush.enterCodeManually();\n   * ```\n   */\n  async enterCodeManually(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaPushChallengePush.screenIdentifier, 'enterCodeManually'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.ENTER_OTP_CODE,\n    });\n  }\n\n  /**\n   * Allows trying another authentication method\n   * @param payload Optional custom options to include with the request\n   * @example\n   * ```typescript\n   * const mfaPushChallengePush = new MfaPushChallengePush();\n   * await mfaPushChallengePush.tryAnotherMethod();\n   * ```\n   */\n  async tryAnotherMethod(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaPushChallengePush.screenIdentifier, 'tryAnotherMethod'],\n    };\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.PICK_AUTHENTICATOR,\n    });\n  }\n}\n\nexport {\n  MfaPushChallengePushMembers,\n  WithRememberOptions,\n  ScreenOptions as ScreenMembersOnMfaPushChallengePush,\n  UntrustedDataOptions as UntrustedDataMembersOnMfaPushChallengePush,\n};\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["MfaPushChallengePush","BaseContext","static","ScreenIds","MFA_PUSH_CHALLENGE_PUSH","screen","untrustedData","constructor","super","screenContext","this","getContext","untrustedDataContext","ScreenOverride","UntrustedDataOverride","payload","options","state","transaction","telemetry","screenIdentifier","rememberDevice","restPayload","submitPayload","action","FormActions","CONTINUE","rememberBrowser","FormHandler","submitData","resendPushNotification","undefined","RESEND","enterCodeManually","ENTER_OTP_CODE","tryAnotherMethod","PICK_AUTHENTICATOR"],"mappings":"oWAsBqB,MAAAA,UAA6BC,EAChDC,wBAAkCC,EAAUC,wBAC5CC,OACAC,cAKA,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UAChCC,EAAuBF,KAAKC,WAAW,kBAC7CD,KAAKL,OAAS,IAAIQ,EAAeJ,GACjCC,KAAKJ,cAAgB,IAAIQ,EAAsBF,GAYjD,cAAM,CAASG,GACb,MAAMC,EAAuB,CAC3BC,MAAOP,KAAKQ,YAAYD,MACxBE,UAAW,CAACnB,EAAqBoB,iBAAkB,cAG/CC,eAAEA,KAAmBC,GAAgBP,GAAW,CAAE,EAClDQ,EAA2D,IAAKD,EAAaE,OAAQC,EAAYC,UAEnGL,IACFE,EAAcI,iBAAkB,SAE5B,IAAIC,EAAYZ,GAASa,WAAWN,GAY5C,4BAAMO,CAAuBf,GAC3B,MAAMC,EAAuB,CAC3BC,MAAOP,KAAKQ,YAAYD,MACxBE,UAAW,CAACnB,EAAqBoB,iBAAkB,4BAE/CC,eAAEA,GAAiB,KAAUC,GAAgBP,GAAW,CAAE,QAC1D,IAAIa,EAAYZ,GAASa,WAAgC,CAC7DF,gBAAiBN,EAAiB,YAASU,KACxCT,EACHE,OAAQC,EAAYO,SAaxB,uBAAMC,CAAkBlB,GACtB,MAAMC,EAAuB,CAC3BC,MAAOP,KAAKQ,YAAYD,MACxBE,UAAW,CAACnB,EAAqBoB,iBAAkB,4BAE/C,IAAIQ,EAAYZ,GAASa,WAA0B,IACpDd,EACHS,OAAQC,EAAYS,iBAaxB,sBAAMC,CAAiBpB,GACrB,MAAMC,EAAuB,CAC3BC,MAAOP,KAAKQ,YAAYD,MACxBE,UAAW,CAACnB,EAAqBoB,iBAAkB,2BAE/C,IAAIQ,EAAYZ,GAASa,WAA0B,IACpDd,EACHS,OAAQC,EAAYW"}