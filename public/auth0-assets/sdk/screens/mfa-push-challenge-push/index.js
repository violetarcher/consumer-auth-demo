import{FormActions as t}from"../../constants/form-actions.js";import{ScreenIds as e}from"../../constants/enums.js";import{BaseContext as s}from"../../models/base-context.js";import{FormHandler as n}from"../../utils/form-handler.js";import{ScreenOverride as r}from"./screen-override.js";import{UntrustedDataOverride as a}from"./untrusted-data-overrider.js";class i extends s{static screenIdentifier=e.MFA_PUSH_CHALLENGE_PUSH;screen;untrustedData;constructor(){super();const t=this.getContext("screen"),e=this.getContext("untrusted_data");this.screen=new r(t),this.untrustedData=new a(e)}async continue(e){const s={state:this.transaction.state,telemetry:[i.screenIdentifier,"continue"]},{rememberDevice:r,...a}=e||{},o={...a,action:t.CONTINUE};r&&(o.rememberBrowser=!0),await new n(s).submitData(o)}async resendPushNotification(e){const s={state:this.transaction.state,telemetry:[i.screenIdentifier,"resendPushNotification"]},{rememberDevice:r=!1,...a}=e||{};await new n(s).submitData({rememberBrowser:r?"true":void 0,...a,action:t.RESEND})}async enterCodeManually(e){const s={state:this.transaction.state,telemetry:[i.screenIdentifier,"enterCodeManually"]};await new n(s).submitData({...e,action:t.ENTER_OTP_CODE})}async tryAnotherMethod(e){const s={state:this.transaction.state,telemetry:[i.screenIdentifier,"tryAnotherMethod"]};await new n(s).submitData({...e,action:t.PICK_AUTHENTICATOR})}}export{i as default};
//# sourceMappingURL=index.js.map
