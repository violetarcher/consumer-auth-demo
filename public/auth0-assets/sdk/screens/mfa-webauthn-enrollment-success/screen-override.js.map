{"version":3,"file":"screen-override.js","sources":["../../../../src/screens/mfa-webauthn-enrollment-success/screen-override.ts"],"sourcesContent":["import { Screen } from '../../models/screen';\n\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type { ScreenMembersOnMfaWebAuthnEnrollmentSuccess as OverrideOptions } from '../../../interfaces/screens/mfa-webauthn-enrollment-success';\nimport type { WebAuthnType } from '../../../interfaces/screens/mfa-webauthn-error'; // Reusing WebAuthnType\n\n/**\n * @class ScreenOverride\n * @extends Screen\n * @implements OverrideOptions\n * @description Provides specific data accessors for the 'mfa-webauthn-enrollment-success' screen context.\n * It ensures that `nickname` and `webauthnType` are correctly parsed and typed from the\n * `screen.data` object provided by the Universal Login context.\n */\nexport class ScreenOverride extends Screen implements OverrideOptions {\n  /**\n   * @property {object | null} data - Screen-specific data.\n   * @property {string} data.nickname - The nickname of the enrolled WebAuthn authenticator.\n   * @property {WebAuthnType} data.webauthnType - The type of the enrolled WebAuthn authenticator.\n   */\n  public data: OverrideOptions['data'];\n\n  /**\n   * Initializes a new instance of the `ScreenOverride` class for the 'mfa-webauthn-enrollment-success' screen.\n   * It calls the base `Screen` constructor and then parses the screen-specific data using `getScreenData`.\n   * @param {ScreenContext} screenContext - The screen context object provided by Universal Login\n   * for the 'mfa-webauthn-enrollment-success' screen.\n   */\n  constructor(screenContext: ScreenContext) {\n    super(screenContext); // Initialize the base Screen class with the provided context.\n    this.data = ScreenOverride.getScreenData(screenContext);\n  }\n\n  /**\n   * @static\n   * @method getScreenData\n   * @description Extracts and transforms the screen-specific data from the provided `ScreenContext`.\n   * Specifically, it retrieves `nickname` and `webauthnType` from `screenContext.data`.\n   *\n   * @param {ScreenContext} screenContext - The screen context containing the raw data.\n   * @returns {OverrideOptions['data']} A structured object containing `nickname` and `webauthnType`.\n   * Returns `null` if the essential data (`nickname` or `webauthnType`) is missing or invalid in type.\n   */\n  static getScreenData = (screenContext: ScreenContext): OverrideOptions['data'] => {\n    const rawData = screenContext.data;\n\n    // Validate that data exists and contains the expected properties with correct types.\n    if (\n      !rawData ||\n      typeof rawData.nickname !== 'string' ||\n      (rawData.webauthnType !== 'webauthn-roaming' && rawData.webauthnType !== 'webauthn-platform')\n    ) {\n      // If essential data is missing or types are incorrect, return null.\n      // This indicates an unexpected context structure.\n      return null;\n    }\n\n    // Return the structured data object with validated and typed properties.\n    return {\n      nickname: rawData.nickname,\n      webauthnType: rawData.webauthnType as WebAuthnType,\n    };\n  };\n}"],"names":["ScreenOverride","Screen","data","constructor","screenContext","super","this","getScreenData","static","rawData","nickname","webauthnType"],"mappings":"gDAcM,MAAOA,UAAuBC,EAM3BC,KAQP,WAAAC,CAAYC,GACVC,MAAMD,GACNE,KAAKJ,KAAOF,EAAeO,cAAcH,GAa3CI,qBAAwBJ,IACtB,MAAMK,EAAUL,EAAcF,KAG9B,OACGO,GAC2B,iBAArBA,EAAQC,UACW,qBAAzBD,EAAQE,cAAgE,sBAAzBF,EAAQE,aAIjD,KAIF,CACLD,SAAUD,EAAQC,SAClBC,aAAcF,EAAQE,aACvB"}