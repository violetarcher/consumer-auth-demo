{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-webauthn-enrollment-success/index.ts"],"sourcesContent":["import { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport { ScreenOverride } from './screen-override';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { ScreenContext } from '../../../interfaces/models/screen';\nimport type {\n  MfaWebAuthnEnrollmentSuccessMembers,\n  ScreenMembersOnMfaWebAuthnEnrollmentSuccess as ScreenOptions,\n  ContinueOptions,\n} from '../../../interfaces/screens/mfa-webauthn-enrollment-success';\nimport type { FormOptions as SDKFormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * @class MfaWebAuthnEnrollmentSuccess\n * @extends BaseContext\n * implements MfaWebAuthnEnrollmentSuccessMembers\n * description Manages interactions for the MFA WebAuthn Enrollment Success screen.\n * This screen confirms the successful enrollment of a WebAuthn authenticator (platform or roaming)\n * and provides a method for the user to continue the authentication flow.\n */\nexport default class MfaWebAuthnEnrollmentSuccess extends BaseContext implements MfaWebAuthnEnrollmentSuccessMembers {\n  /**\n   * static\n   * @property {string} screenIdentifier - The unique identifier for the 'mfa-webauthn-enrollment-success' screen.\n   * This is used by the `BaseContext` to ensure the correct screen class is instantiated based on the\n   * `window.universal_login_context.screen.name`.\n   */\n  static screenIdentifier: string = ScreenIds.MFA_WEBAUTHN_ENROLLMENT_SUCCESS;\n\n  /**\n   * @property {ScreenOptions} screen - Holds the specific screen data and properties for this screen,\n   * processed by `ScreenOverride`. This includes the enrolled authenticator's `nickname` and `webauthnType`.\n   */\n  public screen: ScreenOptions;\n\n  /**\n   * Initializes a new instance of the `MfaWebAuthnEnrollmentSuccess` class.\n   * It retrieves the necessary context (screen, transaction, etc.) from the global `universal_login_context`\n   * and sets up screen-specific properties via `ScreenOverride`.\n   * @throws {Error} If the Universal Login Context is not available or if the screen name\n   * in the context does not match `MfaWebAuthnEnrollmentSuccess.screenIdentifier`.\n   */\n  constructor() {\n    super();\n    const screenContext = this.getContext('screen') as ScreenContext;\n    this.screen = new ScreenOverride(screenContext);\n  }\n\n  /**\n   * Allows the user to continue the authentication flow after a successful WebAuthn enrollment.\n   * This method sends a POST request to the `/u/mfa-webauthn-enrollment-success` endpoint\n   * with the action set to \"default\", indicating the user is proceeding from this success screen.\n   *\n   * @param {ContinueOptions} [payload] - Optional. An object for `CustomOptions` if any\n   *                                        additional parameters need to be sent with the request.\n   *                                        These custom parameters will be included in the form data.\n   * @returns {Promise<void>} A promise that resolves when the continue action is successfully submitted.\n   *                          On successful submission, the Auth0 server will typically redirect the user\n   *                          to the next appropriate step in the authentication flow.\n   * @throws {Error} Throws an error if the form submission fails (e.g., due to network issues,\n   *                 an invalid transaction state, or other server-side validation errors).\n   *                 If an error occurs, details might be available in `this.transaction.errors`\n   *                 if the page re-renders.\n   *\n   * @example\n   * ```typescript\n   * // Assuming 'sdk' is an instance of MfaWebAuthnEnrollmentSuccess\n   * async function handleContinueClick() {\n   *   try {\n   *     await sdk.continue();\n   *     // User will be redirected by Auth0.\n   *   } catch (error) {\n   *     console.error(\"Error continuing after WebAuthn enrollment success:\", error);\n   *     // Display error message to the user, potentially from sdk.transaction.errors\n   *   }\n   * }\n   * ```\n   */\n  async continue(payload?: ContinueOptions): Promise<void> {\n    const formOptions: SDKFormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaWebAuthnEnrollmentSuccess.screenIdentifier, 'continue']\n    };\n\n    // The payload for this action is simple, primarily just the action itself.\n    // Any custom options from the 'payload' argument are also included.\n    const submitPayload: CustomOptions & { action: string } = {\n      ...(payload || {}), // Spread custom options if any\n      action: FormActions.DEFAULT,\n    };\n\n    await new FormHandler(formOptions).submitData(submitPayload);\n  }\n}\n\n// Export the primary class and its relevant member and options interfaces for external use.\nexport {\n  MfaWebAuthnEnrollmentSuccessMembers,\n  ScreenOptions as ScreenMembersOnMfaWebAuthnEnrollmentSuccess,\n  ContinueOptions,\n};\n\n// Re-export common interfaces and base properties for convenience when using this screen's SDK.\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';"],"names":["MfaWebAuthnEnrollmentSuccess","BaseContext","static","ScreenIds","MFA_WEBAUTHN_ENROLLMENT_SUCCESS","screen","constructor","super","screenContext","this","getContext","ScreenOverride","payload","formOptions","state","transaction","telemetry","screenIdentifier","submitPayload","action","FormActions","DEFAULT","FormHandler","submitData"],"mappings":"8RAuBqB,MAAAA,UAAqCC,EAOxDC,wBAAkCC,EAAUC,gCAMrCC,OASP,WAAAC,GACEC,QACA,MAAMC,EAAgBC,KAAKC,WAAW,UACtCD,KAAKJ,OAAS,IAAIM,EAAeH,GAiCnC,cAAM,CAASI,GACb,MAAMC,EAA8B,CAClCC,MAAOL,KAAKM,YAAYD,MACxBE,UAAW,CAAChB,EAA6BiB,iBAAkB,aAKvDC,EAAoD,IACpDN,GAAW,CAAA,EACfO,OAAQC,EAAYC,eAGhB,IAAIC,EAAYT,GAAaU,WAAWL"}