{"version":3,"file":"index.js","sources":["../../../../src/screens/mfa-recovery-code-challenge/index.ts"],"sourcesContent":["import { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type {\n  MfaRecoveryCodeChallengeMembers, ContinueOptions\n} from '../../../interfaces/screens/mfa-recovery-code-challenge';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * Class implementing the MFA Recovery Code Challenge screen functionality.\n */\nexport default class MfaRecoveryCodeChallenge extends BaseContext implements MfaRecoveryCodeChallengeMembers {\n  static screenIdentifier: string = ScreenIds.MFA_RECOVERY_CODE_CHALLENGE;\n\n  /**\n   * Creates an instance of the MfaRecoveryCodeChallenge screen.\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Continues with the provided recovery code.\n   * @param payload - The payload containing the recovery code and optional custom options.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import MfaRecoveryCodeChallenge from '@auth0/auth0-acul-js/mfa-recovery-code-challenge';\n   * const mfaRecoveryCodeChallengeManager = new MfaRecoveryCodeChallenge();\n   * const handleContinueEnrollment = async () => {\n   *  try {\n   *    await mfaRecoveryCodeChallengeManager.continue('YOUR_RECOVERY_CODE');\n   *  } catch (error) {\n   *    console.error('Error continuing with recovery code:', error);\n   *  }\n   * }\n   * ```\n   */\n  async continue(payload: ContinueOptions): Promise<void> {\n    if (!payload || !payload?.code) {\n      return Promise.reject(new Error('The recovery code is required.'));\n    }\n\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaRecoveryCodeChallenge.screenIdentifier, 'continue'],\n    };\n\n    await new FormHandler(options).submitData<ContinueOptions>({\n      ...payload,\n      action: FormActions.DEFAULT,\n    });\n  }\n\n  /**\n   * Navigates to the screen where the user can pick another MFA method.\n   * @param payload Optional payload.\n   * @returns {Promise<void>}\n   * @example\n   * ```typescript\n   * import MfaRecoveryCodeChallenge from '@auth0/auth0-acul-js/mfa-recovery-code-challenge';\n   * const mfaRecoveryCodeChallengeManager = new MfaRecoveryCodeChallenge();\n   * const switchAuthenticator = async () => {\n   *  try {\n   *    await mfaRecoveryCodeChallengeManager.tryAnotherMethod();\n   *    console.log('Switched to another authentication method.');\n   *  } catch (error) {\n   *    console.error('Error switching authenticator:', error);\n   *  }\n   * };\n   * ```\n   */\n  async tryAnotherMethod(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [MfaRecoveryCodeChallenge.screenIdentifier, 'tryAnotherMethod'],\n    };\n\n    await new FormHandler(options).submitData<CustomOptions>({\n      ...payload,\n      action: FormActions.PICK_AUTHENTICATOR,\n    });\n  }\n}\n\nexport { MfaRecoveryCodeChallengeMembers, ContinueOptions };\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["MfaRecoveryCodeChallenge","BaseContext","static","ScreenIds","MFA_RECOVERY_CODE_CHALLENGE","constructor","super","payload","code","Promise","reject","Error","options","state","this","transaction","telemetry","screenIdentifier","FormHandler","submitData","action","FormActions","DEFAULT","tryAnotherMethod","PICK_AUTHENTICATOR"],"mappings":"wOAaqB,MAAAA,UAAiCC,EACpDC,wBAAkCC,EAAUC,4BAK5C,WAAAC,GACEC,QAoBF,cAAM,CAASC,GACb,IAAKA,IAAYA,GAASC,KACxB,OAAOC,QAAQC,OAAO,IAAIC,MAAM,mCAGlC,MAAMC,EAAuB,CAC3BC,MAAOC,KAAKC,YAAYF,MACxBG,UAAW,CAAChB,EAAyBiB,iBAAkB,mBAGnD,IAAIC,EAAYN,GAASO,WAA4B,IACtDZ,EACHa,OAAQC,EAAYC,UAsBxB,sBAAMC,CAAiBhB,GACrB,MAAMK,EAAuB,CAC3BC,MAAOC,KAAKC,YAAYF,MACxBG,UAAW,CAAChB,EAAyBiB,iBAAkB,2BAGnD,IAAIC,EAAYN,GAASO,WAA0B,IACpDZ,EACHa,OAAQC,EAAYG"}