{"version":3,"file":"index.js","sources":["../../../../src/screens/device-code-activation/index.ts"],"sourcesContent":["import { ScreenIds, FormActions } from '../../constants';\nimport { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport type { DeviceCodeActivationMembers, ContinueOptions } from '../../../interfaces/screens/device-code-activation';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * Class implementing the Device Code Activation screen functionality.\n * This screen is displayed when the user needs to enter the code on their device to activate it.\n */\nexport default class DeviceCodeActivation extends BaseContext implements DeviceCodeActivationMembers {\n  static screenIdentifier: string = ScreenIds.DEVICE_CODE_ACTIVATION;\n\n  /**\n   * Creates an instance of the DeviceCodeActivation screen.\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Submits the device code entered by the user.\n   * This action is triggered when the user enters the code displayed on their device and submits the form.\n   *\n   * @param {object} payload - An object containing the code entered by the user and any custom payload.\n   * @param {string} payload.code - The device code entered by the user.\n   *\n   * @returns {Promise<void>} A promise that resolves when the code is successfully submitted.\n   * @example\n   * ```typescript\n   * import DeviceCodeActivation from '@auth0/auth0-acul-js/device-code-activation';\n   * const deviceCodeActivationManager = new DeviceCodeActivation();\n   * async function activateDeviceCode(code) {\n   *   try {\n   *    await deviceCodeActivationManager.continue({ code });\n   *    console.log('Device code activation successful.');\n   *   } catch (error) {\n   *    console.error('Error during device code activation:', error);\n   *   }\n   * }\n   * ```\n   * Rejects with an error if the submission fails.\n   */\n  async continue(payload: ContinueOptions): Promise<void> {\n    if (!payload || !payload.code) {\n      return Promise.reject(new Error('The code parameter is required.'));\n    }\n\n    const formOptions: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [DeviceCodeActivation.screenIdentifier, 'continue'],\n    };\n\n    await new FormHandler(formOptions).submitData({\n      ...payload,\n      action: FormActions.DEFAULT,\n    });\n  }\n}\n\nexport { DeviceCodeActivationMembers, ContinueOptions };\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["DeviceCodeActivation","BaseContext","static","ScreenIds","DEVICE_CODE_ACTIVATION","constructor","super","payload","code","Promise","reject","Error","formOptions","state","this","transaction","telemetry","screenIdentifier","FormHandler","submitData","action","FormActions","DEFAULT"],"mappings":"wOAWqB,MAAAA,UAA6BC,EAChDC,wBAAkCC,EAAUC,uBAK5C,WAAAC,GACEC,QA0BF,cAAM,CAASC,GACb,IAAKA,IAAYA,EAAQC,KACvB,OAAOC,QAAQC,OAAO,IAAIC,MAAM,oCAGlC,MAAMC,EAA2B,CAC/BC,MAAOC,KAAKC,YAAYF,MACxBG,UAAW,CAAChB,EAAqBiB,iBAAkB,mBAG/C,IAAIC,EAAYN,GAAaO,WAAW,IACzCZ,EACHa,OAAQC,EAAYC"}