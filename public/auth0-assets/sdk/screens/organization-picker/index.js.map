{"version":3,"file":"index.js","sources":["../../../../src/screens/organization-picker/index.ts"],"sourcesContent":["import { BaseContext } from '../../models/base-context';\nimport { FormHandler } from '../../utils/form-handler';\n\nimport type { CustomOptions } from '../../../interfaces/common';\nimport type { OrganizationPickerMembers, SelectOrganizationOptions } from '../../../interfaces/screens/organization-picker';\nimport type { FormOptions } from '../../../interfaces/utils/form-handler';\n\n/**\n * Class implementing the organization-picker screen functionality.\n * This screen allows users to select an organization from a list of available organizations.\n */\nexport default class OrganizationPicker extends BaseContext implements OrganizationPickerMembers {\n  /**\n   * Creates an instance of OrganizationPicker screen manager.\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Submits the selected organization ID.\n   * @param payload The ID of the selected organization. { organization: string; }\n   * @example\n   * ```typescript\n   * import OrganizationPicker from '@auth0/auth0-acul-js/organization-picker';\n   *\n   * const organizationPicker = new OrganizationPicker();\n   * organizationPicker.selectOrganization({\n   *   organization: 'org_XXXXXXXXXXXXXXX'\n   * });\n   * ```\n   */\n  async selectOrganization(payload: SelectOrganizationOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [OrganizationPicker.screenIdentifier, 'selectOrganization'],\n    };\n    await new FormHandler(options).submitData(payload);\n  }\n\n  /**\n   * Submits the action to skip the organization selection.\n   * @param payload Optional custom options to include with the request.\n   * @example\n   * ```typescript\n   * import OrganizationPicker from '@auth0/auth0-acul-js/organization-picker';\n   *\n   * const organizationPicker = new OrganizationPicker();\n   * organizationPicker.skipOrganizationSelection();\n   * ```\n   */\n  async skipOrganizationSelection(payload?: CustomOptions): Promise<void> {\n    const options: FormOptions = {\n      state: this.transaction.state,\n      telemetry: [OrganizationPicker.screenIdentifier, 'skipOrganizationSelection'],\n    };\n    await new FormHandler(options).submitData({\n      ...payload,\n      organizationSkipped: true,\n      state: this.transaction.state,\n    });\n  }\n}\n\nexport { OrganizationPickerMembers, SelectOrganizationOptions };\nexport * from '../../../interfaces/export/common';\nexport * from '../../../interfaces/export/base-properties';\n"],"names":["OrganizationPicker","BaseContext","constructor","super","selectOrganization","payload","options","state","this","transaction","telemetry","screenIdentifier","FormHandler","submitData","skipOrganizationSelection","organizationSkipped"],"mappings":"qHAWqB,MAAAA,UAA2BC,EAI9C,WAAAC,GACEC,QAgBF,wBAAMC,CAAmBC,GACvB,MAAMC,EAAuB,CAC3BC,MAAOC,KAAKC,YAAYF,MACxBG,UAAW,CAACV,EAAmBW,iBAAkB,6BAE7C,IAAIC,EAAYN,GAASO,WAAWR,GAc5C,+BAAMS,CAA0BT,GAC9B,MAAMC,EAAuB,CAC3BC,MAAOC,KAAKC,YAAYF,MACxBG,UAAW,CAACV,EAAmBW,iBAAkB,oCAE7C,IAAIC,EAAYN,GAASO,WAAW,IACrCR,EACHU,qBAAqB,EACrBR,MAAOC,KAAKC,YAAYF"}